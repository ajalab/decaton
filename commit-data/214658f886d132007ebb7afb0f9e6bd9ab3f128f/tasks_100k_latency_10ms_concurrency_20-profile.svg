<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1462" onload="init(evt)" viewBox="0 0 1200 1462" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1445"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1445"> </text>
<g id="frames">
<g>
<title>all (376 samples, 100.00%)</title><rect x="10.0" y="1411.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1422.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.27%)</title><rect x="10.0" y="1395.0" width="3.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 7.18%)</title><rect x="13.1" y="1395.0" width="84.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.1" y="1406.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.27%)</title><rect x="13.1" y="1379.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.1" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.27%)</title><rect x="13.1" y="1363.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.27%)</title><rect x="13.1" y="1347.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.27%)</title><rect x="13.1" y="1331.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (1 samples, 0.27%)</title><rect x="13.1" y="1315.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.27%)</title><rect x="13.1" y="1299.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.27%)</title><rect x="13.1" y="1283.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.27%)</title><rect x="13.1" y="1267.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.27%)</title><rect x="13.1" y="1251.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.27%)</title><rect x="13.1" y="1235.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (26 samples, 6.91%)</title><rect x="16.3" y="1379.0" width="81.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.3" y="1390.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.27%)</title><rect x="16.3" y="1363.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.3" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.27%)</title><rect x="16.3" y="1347.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.3" y="1358.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.27%)</title><rect x="16.3" y="1331.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.3" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.27%)</title><rect x="16.3" y="1315.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.3" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.27%)</title><rect x="16.3" y="1299.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.3" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.27%)</title><rect x="16.3" y="1283.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.27%)</title><rect x="19.4" y="1363.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.4" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.27%)</title><rect x="19.4" y="1347.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.resume (1 samples, 0.27%)</title><rect x="19.4" y="1331.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.27%)</title><rect x="19.4" y="1315.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.27%)</title><rect x="19.4" y="1299.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.4" y="1310.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.27%)</title><rect x="19.4" y="1283.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.4" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="19.4" y="1267.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 1.60%)</title><rect x="22.6" y="1363.0" width="18.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.6" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/315156815.accept (6 samples, 1.60%)</title><rect x="22.6" y="1347.0" width="18.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.6" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (6 samples, 1.60%)</title><rect x="22.6" y="1331.0" width="18.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.6" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.53%)</title><rect x="28.8" y="1315.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.8" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.53%)</title><rect x="28.8" y="1299.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.8" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.53%)</title><rect x="28.8" y="1283.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.53%)</title><rect x="28.8" y="1267.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.53%)</title><rect x="28.8" y="1251.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.53%)</title><rect x="28.8" y="1235.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.27%)</title><rect x="28.8" y="1219.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.27%)</title><rect x="28.8" y="1203.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.27%)</title><rect x="28.8" y="1187.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.27%)</title><rect x="32.0" y="1219.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="35.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.27%)</title><rect x="32.0" y="1203.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.27%)</title><rect x="32.0" y="1187.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="35.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (2 samples, 0.53%)</title><rect x="35.1" y="1315.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="38.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (18 samples, 4.79%)</title><rect x="41.4" y="1363.0" width="56.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.4" y="1374.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (18 samples, 4.79%)</title><rect x="41.4" y="1347.0" width="56.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.4" y="1358.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (12 samples, 3.19%)</title><rect x="44.5" y="1331.0" width="37.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.5" y="1342.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.33%)</title><rect x="44.5" y="1315.0" width="15.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.33%)</title><rect x="44.5" y="1299.0" width="15.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.27%)</title><rect x="44.5" y="1283.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.80%)</title><rect x="47.7" y="1283.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="50.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.27%)</title><rect x="47.7" y="1267.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.27%)</title><rect x="47.7" y="1251.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.27%)</title><rect x="47.7" y="1235.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getOrElse (1 samples, 0.27%)</title><rect x="47.7" y="1219.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.27%)</title><rect x="47.7" y="1203.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.27%)</title><rect x="47.7" y="1187.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.53%)</title><rect x="50.8" y="1267.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.53%)</title><rect x="50.8" y="1251.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.27%)</title><rect x="50.8" y="1235.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="50.8" y="1219.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="50.8" y="1203.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="53.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="50.8" y="1187.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.27%)</title><rect x="53.9" y="1235.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.27%)</title><rect x="53.9" y="1219.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.27%)</title><rect x="53.9" y="1203.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.27%)</title><rect x="53.9" y="1187.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="56.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.27%)</title><rect x="53.9" y="1171.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.9" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.27%)</title><rect x="53.9" y="1155.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.9" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.27%)</title><rect x="53.9" y="1139.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.9" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.27%)</title><rect x="53.9" y="1123.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="56.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.27%)</title><rect x="53.9" y="1107.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.27%)</title><rect x="53.9" y="1091.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.9" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.27%)</title><rect x="53.9" y="1075.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$255/173075007.shouldBlock (1 samples, 0.27%)</title><rect x="57.1" y="1283.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.27%)</title><rect x="57.1" y="1267.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.27%)</title><rect x="57.1" y="1251.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="60.1" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.27%)</title><rect x="57.1" y="1235.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.1" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.27%)</title><rect x="57.1" y="1219.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.1" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.27%)</title><rect x="57.1" y="1203.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="60.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.27%)</title><rect x="57.1" y="1187.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.1" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.27%)</title><rect x="57.1" y="1171.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.1" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.27%)</title><rect x="57.1" y="1155.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.1" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.27%)</title><rect x="57.1" y="1139.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.1" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.27%)</title><rect x="57.1" y="1123.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.27%)</title><rect x="57.1" y="1107.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="60.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.27%)</title><rect x="57.1" y="1091.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="60.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$241/1341203299.test (1 samples, 0.27%)</title><rect x="57.1" y="1075.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="60.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$hasAllFetchPositions$4 (1 samples, 0.27%)</title><rect x="57.1" y="1059.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2400 (1 samples, 0.27%)</title><rect x="57.1" y="1043.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.hasValidPosition (1 samples, 0.27%)</title><rect x="57.1" y="1027.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.1" y="1038.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.27%)</title><rect x="57.1" y="1011.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="60.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 1.86%)</title><rect x="60.2" y="1315.0" width="22.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="63.2" y="1326.0">o..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.27%)</title><rect x="60.2" y="1299.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 1.60%)</title><rect x="63.4" y="1299.0" width="18.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.33%)</title><rect x="63.4" y="1283.0" width="15.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.33%)</title><rect x="63.4" y="1267.0" width="15.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.80%)</title><rect x="63.4" y="1251.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.53%)</title><rect x="72.8" y="1251.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.53%)</title><rect x="72.8" y="1235.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.53%)</title><rect x="72.8" y="1219.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.8" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.53%)</title><rect x="72.8" y="1203.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="75.8" y="1214.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (2 samples, 0.53%)</title><rect x="72.8" y="1187.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.27%)</title><rect x="79.0" y="1283.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.27%)</title><rect x="79.0" y="1267.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="79.0" y="1251.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="79.0" y="1235.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.0" y="1246.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.27%)</title><rect x="79.0" y="1219.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="82.0" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="79.0" y="1203.0" width="3.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="82.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.80%)</title><rect x="82.2" y="1331.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="85.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.80%)</title><rect x="82.2" y="1315.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.80%)</title><rect x="82.2" y="1299.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="85.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.27%)</title><rect x="82.2" y="1283.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="85.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.27%)</title><rect x="82.2" y="1267.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.2" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.27%)</title><rect x="82.2" y="1251.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.2" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.27%)</title><rect x="82.2" y="1235.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.2" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.27%)</title><rect x="82.2" y="1219.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.2" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.27%)</title><rect x="82.2" y="1203.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="85.2" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.27%)</title><rect x="82.2" y="1187.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="85.2" y="1198.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.27%)</title><rect x="82.2" y="1171.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.2" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.27%)</title><rect x="82.2" y="1155.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.27%)</title><rect x="85.3" y="1283.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="88.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.27%)</title><rect x="88.5" y="1283.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.27%)</title><rect x="88.5" y="1267.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.5" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.27%)</title><rect x="88.5" y="1251.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.5" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.27%)</title><rect x="88.5" y="1235.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="91.5" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.27%)</title><rect x="88.5" y="1219.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.5" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.27%)</title><rect x="88.5" y="1203.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="91.5" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.27%)</title><rect x="88.5" y="1187.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="91.5" y="1198.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.27%)</title><rect x="88.5" y="1171.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.5" y="1182.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.27%)</title><rect x="88.5" y="1155.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="91.5" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.27%)</title><rect x="88.5" y="1139.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.5" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.27%)</title><rect x="88.5" y="1123.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.5" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.27%)</title><rect x="88.5" y="1107.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="91.5" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.27%)</title><rect x="88.5" y="1091.0" width="3.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="91.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.27%)</title><rect x="91.6" y="1331.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.27%)</title><rect x="91.6" y="1315.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="94.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.27%)</title><rect x="91.6" y="1299.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="94.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.27%)</title><rect x="91.6" y="1283.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="94.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.27%)</title><rect x="91.6" y="1267.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.27%)</title><rect x="91.6" y="1251.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.27%)</title><rect x="91.6" y="1235.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="94.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.27%)</title><rect x="91.6" y="1219.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="94.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.27%)</title><rect x="94.7" y="1331.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="97.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.27%)</title><rect x="94.7" y="1315.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.7" y="1326.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.27%)</title><rect x="94.7" y="1299.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="97.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$251/627528525.accept (1 samples, 0.27%)</title><rect x="94.7" y="1283.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.7" y="1294.0"></text>
</g>
<g>
<title>java/lang/Thread.run (233 samples, 61.97%)</title><rect x="97.9" y="1395.0" width="731.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="100.9" y="1406.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (233 samples, 61.97%)</title><rect x="97.9" y="1379.0" width="731.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="100.9" y="1390.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (233 samples, 61.97%)</title><rect x="97.9" y="1363.0" width="731.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.9" y="1374.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1453980388.run (220 samples, 58.51%)</title><rect x="101.0" y="1347.0" width="690.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="104.0" y="1358.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1453980388.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (220 samples, 58.51%)</title><rect x="101.0" y="1331.0" width="690.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.0" y="1342.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (220 samples, 58.51%)</title><rect x="101.0" y="1315.0" width="690.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.0" y="1326.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (219 samples, 58.24%)</title><rect x="101.0" y="1299.0" width="687.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="104.0" y="1310.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="104.1" y="1283.0" width="3.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="107.1" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (62 samples, 16.49%)</title><rect x="107.3" y="1283.0" width="194.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="110.3" y="1294.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (62 samples, 16.49%)</title><rect x="107.3" y="1267.0" width="194.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.3" y="1278.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (62 samples, 16.49%)</title><rect x="107.3" y="1251.0" width="194.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.3" y="1262.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (62 samples, 16.49%)</title><rect x="107.3" y="1235.0" width="194.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.3" y="1246.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (62 samples, 16.49%)</title><rect x="107.3" y="1219.0" width="194.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="110.3" y="1230.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (62 samples, 16.49%)</title><rect x="107.3" y="1203.0" width="194.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="110.3" y="1214.0">com/fasterxml/jackson/dat..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (17 samples, 4.52%)</title><rect x="107.3" y="1187.0" width="53.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.3" y="1198.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 1.60%)</title><rect x="132.4" y="1171.0" width="18.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 1.60%)</title><rect x="132.4" y="1155.0" width="18.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="135.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 1.60%)</title><rect x="132.4" y="1139.0" width="18.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="135.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 1.60%)</title><rect x="132.4" y="1123.0" width="18.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 1.60%)</title><rect x="132.4" y="1107.0" width="18.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 1.60%)</title><rect x="132.4" y="1091.0" width="18.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="135.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 1.60%)</title><rect x="132.4" y="1075.0" width="18.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="135.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 0.80%)</title><rect x="151.2" y="1171.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="154.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.27%)</title><rect x="157.5" y="1155.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="160.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.27%)</title><rect x="157.5" y="1139.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="160.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.27%)</title><rect x="157.5" y="1123.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="160.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (39 samples, 10.37%)</title><rect x="160.6" y="1187.0" width="122.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="163.6" y="1198.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.53%)</title><rect x="160.6" y="1171.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.53%)</title><rect x="160.6" y="1155.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="163.6" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.53%)</title><rect x="160.6" y="1139.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.53%)</title><rect x="160.6" y="1123.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.6" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="163.8" y="1107.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="166.8" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="163.8" y="1091.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="166.8" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="163.8" y="1075.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="166.8" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.27%)</title><rect x="163.8" y="1059.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="166.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 1.60%)</title><rect x="166.9" y="1171.0" width="18.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="169.9" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 1.33%)</title><rect x="170.1" y="1155.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="173.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (31 samples, 8.24%)</title><rect x="185.7" y="1171.0" width="97.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.7" y="1182.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 2.39%)</title><rect x="188.9" y="1155.0" width="28.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.9" y="1166.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.80%)</title><rect x="192.0" y="1139.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="195.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.80%)</title><rect x="192.0" y="1123.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.80%)</title><rect x="192.0" y="1107.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.80%)</title><rect x="201.4" y="1139.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.53%)</title><rect x="210.9" y="1139.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.53%)</title><rect x="210.9" y="1123.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.9" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.27%)</title><rect x="217.1" y="1155.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (20 samples, 5.32%)</title><rect x="220.3" y="1155.0" width="62.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.3" y="1166.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (20 samples, 5.32%)</title><rect x="220.3" y="1139.0" width="62.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.3" y="1150.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (20 samples, 5.32%)</title><rect x="220.3" y="1123.0" width="62.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.3" y="1134.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 1.86%)</title><rect x="220.3" y="1107.0" width="21.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.3" y="1118.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.53%)</title><rect x="229.7" y="1091.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.53%)</title><rect x="229.7" y="1075.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.53%)</title><rect x="229.7" y="1059.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.53%)</title><rect x="229.7" y="1043.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.53%)</title><rect x="229.7" y="1027.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.27%)</title><rect x="236.0" y="1091.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.27%)</title><rect x="239.1" y="1091.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.53%)</title><rect x="242.2" y="1107.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.53%)</title><rect x="242.2" y="1091.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.53%)</title><rect x="242.2" y="1075.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.53%)</title><rect x="242.2" y="1059.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.53%)</title><rect x="242.2" y="1043.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 1.33%)</title><rect x="248.5" y="1107.0" width="15.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 1.33%)</title><rect x="248.5" y="1091.0" width="15.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 1.33%)</title><rect x="248.5" y="1075.0" width="15.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 1.33%)</title><rect x="248.5" y="1059.0" width="15.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="251.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 1.33%)</title><rect x="248.5" y="1043.0" width="15.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 1.60%)</title><rect x="264.2" y="1107.0" width="18.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 1.60%)</title><rect x="283.0" y="1187.0" width="18.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.0" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 1.60%)</title><rect x="283.0" y="1171.0" width="18.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.0" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 1.60%)</title><rect x="283.0" y="1155.0" width="18.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 1.60%)</title><rect x="283.0" y="1139.0" width="18.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 1.60%)</title><rect x="283.0" y="1123.0" width="18.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (138 samples, 36.70%)</title><rect x="301.9" y="1283.0" width="433.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.9" y="1294.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (23 samples, 6.12%)</title><rect x="301.9" y="1267.0" width="72.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.9" y="1278.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (23 samples, 6.12%)</title><rect x="301.9" y="1251.0" width="72.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="304.9" y="1262.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (21 samples, 5.59%)</title><rect x="308.1" y="1235.0" width="65.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.1" y="1246.0">ch/qos/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (20 samples, 5.32%)</title><rect x="311.3" y="1219.0" width="62.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="314.3" y="1230.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (19 samples, 5.05%)</title><rect x="314.4" y="1203.0" width="59.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="317.4" y="1214.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 2.13%)</title><rect x="348.9" y="1187.0" width="25.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="351.9" y="1198.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (25 samples, 6.65%)</title><rect x="374.0" y="1267.0" width="78.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="377.0" y="1278.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (25 samples, 6.65%)</title><rect x="374.0" y="1251.0" width="78.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="377.0" y="1262.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (15 samples, 3.99%)</title><rect x="380.3" y="1235.0" width="47.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.3" y="1246.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (11 samples, 2.93%)</title><rect x="392.9" y="1219.0" width="34.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="395.9" y="1230.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 2.66%)</title><rect x="396.0" y="1203.0" width="31.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="399.0" y="1214.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.80%)</title><rect x="402.3" y="1187.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="405.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.80%)</title><rect x="402.3" y="1171.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="405.3" y="1182.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.80%)</title><rect x="402.3" y="1155.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="405.3" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.80%)</title><rect x="402.3" y="1139.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="405.3" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.53%)</title><rect x="405.4" y="1123.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="408.4" y="1134.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.53%)</title><rect x="405.4" y="1107.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="408.4" y="1118.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.53%)</title><rect x="405.4" y="1091.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="408.4" y="1102.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.27%)</title><rect x="405.4" y="1075.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="408.4" y="1086.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.27%)</title><rect x="405.4" y="1059.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="408.4" y="1070.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.27%)</title><rect x="408.6" y="1075.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="411.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.80%)</title><rect x="411.7" y="1187.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="414.7" y="1198.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.53%)</title><rect x="421.1" y="1187.0" width="6.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="424.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.27%)</title><rect x="427.4" y="1235.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="430.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.27%)</title><rect x="427.4" y="1219.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="430.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.27%)</title><rect x="427.4" y="1203.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="430.4" y="1214.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 1.86%)</title><rect x="430.5" y="1235.0" width="22.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="433.5" y="1246.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 1.86%)</title><rect x="430.5" y="1219.0" width="22.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="433.5" y="1230.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.53%)</title><rect x="430.5" y="1203.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="433.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.53%)</title><rect x="430.5" y="1187.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="433.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.53%)</title><rect x="430.5" y="1171.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="433.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.53%)</title><rect x="430.5" y="1155.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.27%)</title><rect x="436.8" y="1203.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="439.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.27%)</title><rect x="436.8" y="1187.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="439.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.27%)</title><rect x="436.8" y="1171.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="439.8" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.27%)</title><rect x="436.8" y="1155.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="439.8" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.27%)</title><rect x="436.8" y="1139.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="439.8" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.06%)</title><rect x="439.9" y="1203.0" width="12.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="442.9" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.53%)</title><rect x="446.2" y="1187.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="449.2" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.53%)</title><rect x="446.2" y="1171.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="449.2" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.27%)</title><rect x="446.2" y="1155.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="449.2" y="1166.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.27%)</title><rect x="449.4" y="1155.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="452.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (83 samples, 22.07%)</title><rect x="452.5" y="1267.0" width="260.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="455.5" y="1278.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (1 samples, 0.27%)</title><rect x="452.5" y="1251.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="455.5" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (82 samples, 21.81%)</title><rect x="455.6" y="1251.0" width="257.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="458.6" y="1262.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="468.2" y="1235.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="471.2" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="468.2" y="1219.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="471.2" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="468.2" y="1203.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="471.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1419902398.process (68 samples, 18.09%)</title><rect x="471.3" y="1235.0" width="213.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="474.3" y="1246.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (68 samples, 18.09%)</title><rect x="471.3" y="1219.0" width="213.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="474.3" y="1230.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (68 samples, 18.09%)</title><rect x="471.3" y="1203.0" width="213.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="474.3" y="1214.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.80%)</title><rect x="471.3" y="1187.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="474.3" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.80%)</title><rect x="471.3" y="1171.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="474.3" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.80%)</title><rect x="471.3" y="1155.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="474.3" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.80%)</title><rect x="471.3" y="1139.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="474.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.27%)</title><rect x="477.6" y="1123.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="480.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (63 samples, 16.76%)</title><rect x="480.7" y="1187.0" width="197.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.7" y="1198.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>java/lang/Thread.sleep (60 samples, 15.96%)</title><rect x="483.9" y="1171.0" width="188.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="486.9" y="1182.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (55 samples, 14.63%)</title><rect x="493.3" y="1155.0" width="172.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="496.3" y="1166.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.33%)</title><rect x="505.9" y="1139.0" width="15.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="508.9" y="1150.0"></text>
</g>
<g>
<title>Monitor::unlock() (6 samples, 1.60%)</title><rect x="521.5" y="1139.0" width="18.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="524.5" y="1150.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.53%)</title><rect x="540.4" y="1139.0" width="6.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="543.4" y="1150.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (8 samples, 2.13%)</title><rect x="546.6" y="1139.0" width="25.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="549.6" y="1150.0">j..</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (30 samples, 7.98%)</title><rect x="571.8" y="1139.0" width="94.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="574.8" y="1150.0">os::sleep(T..</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.27%)</title><rect x="578.0" y="1123.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="581.0" y="1134.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 1.86%)</title><rect x="581.2" y="1123.0" width="21.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="584.2" y="1134.0">_..</text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.27%)</title><rect x="603.1" y="1123.0" width="3.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="606.1" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 3.46%)</title><rect x="606.3" y="1123.0" width="40.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="609.3" y="1134.0">__p..</text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.27%)</title><rect x="647.1" y="1123.0" width="3.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="650.1" y="1134.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.06%)</title><rect x="650.2" y="1123.0" width="12.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="653.2" y="1134.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.27%)</title><rect x="662.8" y="1123.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="665.8" y="1134.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.27%)</title><rect x="665.9" y="1155.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="668.9" y="1166.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.27%)</title><rect x="669.0" y="1155.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="672.0" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.53%)</title><rect x="672.2" y="1171.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="675.2" y="1182.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.53%)</title><rect x="672.2" y="1155.0" width="6.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="675.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.27%)</title><rect x="678.5" y="1187.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="681.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.27%)</title><rect x="681.6" y="1187.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="684.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.27%)</title><rect x="681.6" y="1171.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="684.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.27%)</title><rect x="681.6" y="1155.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="684.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.27%)</title><rect x="681.6" y="1139.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="684.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (1 samples, 0.27%)</title><rect x="681.6" y="1123.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="684.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.53%)</title><rect x="684.7" y="1235.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="687.7" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.53%)</title><rect x="691.0" y="1235.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="694.0" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.53%)</title><rect x="691.0" y="1219.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="694.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (5 samples, 1.33%)</title><rect x="697.3" y="1235.0" width="15.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="700.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 1.86%)</title><rect x="713.0" y="1267.0" width="21.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="716.0" y="1278.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.53%)</title><rect x="728.7" y="1251.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="731.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.27%)</title><rect x="731.8" y="1235.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="734.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/612143743.accept (1 samples, 0.27%)</title><rect x="731.8" y="1219.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="734.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (1 samples, 0.27%)</title><rect x="731.8" y="1203.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="734.8" y="1214.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.27%)</title><rect x="731.8" y="1187.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="734.8" y="1198.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.27%)</title><rect x="731.8" y="1171.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="734.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 3.72%)</title><rect x="734.9" y="1283.0" width="44.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="737.9" y="1294.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 3.46%)</title><rect x="738.1" y="1267.0" width="40.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="741.1" y="1278.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 3.46%)</title><rect x="738.1" y="1251.0" width="40.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="741.1" y="1262.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/612143743.accept (1 samples, 0.27%)</title><rect x="738.1" y="1235.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="741.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (1 samples, 0.27%)</title><rect x="738.1" y="1219.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="741.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.27%)</title><rect x="738.1" y="1203.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="741.1" y="1214.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.27%)</title><rect x="738.1" y="1187.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.1" y="1198.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.27%)</title><rect x="738.1" y="1171.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="741.1" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="738.1" y="1155.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="741.1" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="738.1" y="1139.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="741.1" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="738.1" y="1123.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="741.1" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="738.1" y="1107.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="741.1" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.27%)</title><rect x="738.1" y="1091.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="741.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1322739818.accept (12 samples, 3.19%)</title><rect x="741.2" y="1235.0" width="37.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="744.2" y="1246.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (12 samples, 3.19%)</title><rect x="741.2" y="1219.0" width="37.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="744.2" y="1230.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/63452178.complete (12 samples, 3.19%)</title><rect x="741.2" y="1203.0" width="37.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="744.2" y="1214.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (12 samples, 3.19%)</title><rect x="741.2" y="1187.0" width="37.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="744.2" y="1198.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/2140818395.complete (12 samples, 3.19%)</title><rect x="741.2" y="1171.0" width="37.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="744.2" y="1182.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (12 samples, 3.19%)</title><rect x="741.2" y="1155.0" width="37.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="744.2" y="1166.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (12 samples, 3.19%)</title><rect x="741.2" y="1139.0" width="37.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="744.2" y="1150.0">com..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 3.19%)</title><rect x="741.2" y="1123.0" width="37.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="744.2" y="1134.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 3.19%)</title><rect x="741.2" y="1107.0" width="37.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="744.2" y="1118.0">ch/..</text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.80%)</title><rect x="778.9" y="1283.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="781.9" y="1294.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.80%)</title><rect x="778.9" y="1267.0" width="9.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="781.9" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.27%)</title><rect x="788.3" y="1299.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="791.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 3.19%)</title><rect x="791.4" y="1347.0" width="37.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="794.4" y="1358.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 2.39%)</title><rect x="800.9" y="1331.0" width="28.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="803.9" y="1342.0">ja..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.53%)</title><rect x="829.1" y="1395.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.53%)</title><rect x="829.1" y="1379.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="832.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.53%)</title><rect x="829.1" y="1363.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="832.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.27%)</title><rect x="829.1" y="1347.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="832.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.27%)</title><rect x="829.1" y="1331.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="832.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.27%)</title><rect x="829.1" y="1315.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="832.1" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.27%)</title><rect x="829.1" y="1299.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="832.1" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.27%)</title><rect x="829.1" y="1283.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="832.1" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.27%)</title><rect x="829.1" y="1267.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="832.1" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.27%)</title><rect x="829.1" y="1251.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="832.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.27%)</title><rect x="832.2" y="1347.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="835.2" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.27%)</title><rect x="832.2" y="1331.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="835.2" y="1342.0"></text>
</g>
<g>
<title>start_thread (113 samples, 30.05%)</title><rect x="835.4" y="1395.0" width="354.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="838.4" y="1406.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (113 samples, 30.05%)</title><rect x="835.4" y="1379.0" width="354.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="838.4" y="1390.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 4.79%)</title><rect x="835.4" y="1363.0" width="56.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="838.4" y="1374.0">GangWo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.53%)</title><rect x="835.4" y="1347.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="838.4" y="1358.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.53%)</title><rect x="835.4" y="1331.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="838.4" y="1342.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.53%)</title><rect x="835.4" y="1315.0" width="6.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="838.4" y="1326.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 3.99%)</title><rect x="841.6" y="1347.0" width="47.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="844.6" y="1358.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (15 samples, 3.99%)</title><rect x="841.6" y="1331.0" width="47.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="844.6" y="1342.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (13 samples, 3.46%)</title><rect x="841.6" y="1315.0" width="40.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="844.6" y="1326.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.33%)</title><rect x="857.3" y="1299.0" width="15.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="860.3" y="1310.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.27%)</title><rect x="863.6" y="1283.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="866.6" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.27%)</title><rect x="863.6" y="1267.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="866.6" y="1278.0"></text>
</g>
<g>
<title>G1AllocRegion::attempt_allocation_locked(unsigned long, bool) (1 samples, 0.27%)</title><rect x="863.6" y="1251.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="866.6" y="1262.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.27%)</title><rect x="863.6" y="1235.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="866.6" y="1246.0"></text>
</g>
<g>
<title>G1AllocRegion::fill_up_remaining_space(HeapRegion*, bool) (1 samples, 0.27%)</title><rect x="863.6" y="1219.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="866.6" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.27%)</title><rect x="863.6" y="1203.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="866.6" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.53%)</title><rect x="866.8" y="1283.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="869.8" y="1294.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.27%)</title><rect x="869.9" y="1267.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="872.9" y="1278.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (3 samples, 0.80%)</title><rect x="873.0" y="1299.0" width="9.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="876.0" y="1310.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.53%)</title><rect x="882.4" y="1315.0" width="6.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="885.4" y="1326.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.27%)</title><rect x="888.7" y="1347.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="891.7" y="1358.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.27%)</title><rect x="888.7" y="1331.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="891.7" y="1342.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.27%)</title><rect x="888.7" y="1315.0" width="3.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="891.7" y="1326.0"></text>
</g>
<g>
<title>JavaThread::run() (94 samples, 25.00%)</title><rect x="891.9" y="1363.0" width="295.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="894.9" y="1374.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (94 samples, 25.00%)</title><rect x="891.9" y="1347.0" width="295.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="894.9" y="1358.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (94 samples, 25.00%)</title><rect x="891.9" y="1331.0" width="295.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="894.9" y="1342.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (93 samples, 24.73%)</title><rect x="891.9" y="1315.0" width="291.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="894.9" y="1326.0">CompileBroker::invoke_compiler_on_metho..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (91 samples, 24.20%)</title><rect x="891.9" y="1299.0" width="285.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="894.9" y="1310.0">C2Compiler::compile_method(ciEnv*, ciM..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (91 samples, 24.20%)</title><rect x="891.9" y="1283.0" width="285.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="894.9" y="1294.0">Compile::Compile(ciEnv*, C2Compiler*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (52 samples, 13.83%)</title><rect x="891.9" y="1267.0" width="163.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="894.9" y="1278.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.27%)</title><rect x="891.9" y="1251.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="894.9" y="1262.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.27%)</title><rect x="891.9" y="1235.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="894.9" y="1246.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.27%)</title><rect x="891.9" y="1219.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="894.9" y="1230.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::ValueRecorder(Arena*) (1 samples, 0.27%)</title><rect x="891.9" y="1203.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="894.9" y="1214.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.27%)</title><rect x="895.0" y="1251.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="898.0" y="1262.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.27%)</title><rect x="895.0" y="1235.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="898.0" y="1246.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.27%)</title><rect x="895.0" y="1219.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="898.0" y="1230.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 1.86%)</title><rect x="898.1" y="1251.0" width="22.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="901.1" y="1262.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 1.86%)</title><rect x="898.1" y="1235.0" width="22.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="901.1" y="1246.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.80%)</title><rect x="898.1" y="1219.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="901.1" y="1230.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.27%)</title><rect x="907.6" y="1219.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="910.6" y="1230.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.80%)</title><rect x="910.7" y="1219.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="913.7" y="1230.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.80%)</title><rect x="910.7" y="1203.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="913.7" y="1214.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (3 samples, 0.80%)</title><rect x="910.7" y="1187.0" width="9.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="913.7" y="1198.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.80%)</title><rect x="910.7" y="1171.0" width="9.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="913.7" y="1182.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (3 samples, 0.80%)</title><rect x="910.7" y="1155.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="913.7" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (2 samples, 0.53%)</title><rect x="913.8" y="1139.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="916.8" y="1150.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (2 samples, 0.53%)</title><rect x="913.8" y="1123.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="916.8" y="1134.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.27%)</title><rect x="920.1" y="1251.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="923.1" y="1262.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.27%)</title><rect x="920.1" y="1235.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="923.1" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.80%)</title><rect x="923.2" y="1251.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.2" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.53%)</title><rect x="923.2" y="1235.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.2" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.27%)</title><rect x="923.2" y="1219.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.2" y="1230.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.27%)</title><rect x="923.2" y="1203.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.2" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.27%)</title><rect x="926.4" y="1219.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="929.4" y="1230.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.27%)</title><rect x="929.5" y="1235.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="932.5" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;) (1 samples, 0.27%)</title><rect x="932.7" y="1251.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="935.7" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (38 samples, 10.11%)</title><rect x="935.8" y="1251.0" width="119.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="938.8" y="1262.0">PhaseChaitin::R..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="935.8" y="1235.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="938.8" y="1246.0"></text>
</g>
<g>
<title>MachTypeNode::bottom_type() const (1 samples, 0.27%)</title><rect x="938.9" y="1235.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="941.9" y="1246.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.27%)</title><rect x="942.1" y="1235.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="945.1" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.27%)</title><rect x="942.1" y="1219.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="945.1" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.27%)</title><rect x="945.2" y="1235.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="948.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.27%)</title><rect x="945.2" y="1219.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.2" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 1.06%)</title><rect x="948.4" y="1235.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="951.4" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.53%)</title><rect x="948.4" y="1219.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="951.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.53%)</title><rect x="954.6" y="1219.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="957.6" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.53%)</title><rect x="954.6" y="1203.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="957.6" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 1.60%)</title><rect x="960.9" y="1235.0" width="18.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="963.9" y="1246.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.27%)</title><rect x="964.0" y="1219.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="967.0" y="1230.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.27%)</title><rect x="967.2" y="1219.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="970.2" y="1230.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.27%)</title><rect x="970.3" y="1219.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="973.3" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.27%)</title><rect x="973.5" y="1219.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="976.5" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.27%)</title><rect x="976.6" y="1219.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.6" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.27%)</title><rect x="976.6" y="1203.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.6" y="1214.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.27%)</title><rect x="976.6" y="1187.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.6" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 2.39%)</title><rect x="979.7" y="1235.0" width="28.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="982.7" y="1246.0">Ph..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.27%)</title><rect x="986.0" y="1219.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.0" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="989.1" y="1219.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.1" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.06%)</title><rect x="992.3" y="1219.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.3" y="1230.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.27%)</title><rect x="998.6" y="1203.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.6" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1001.7" y="1203.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1004.7" y="1214.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.27%)</title><rect x="1004.8" y="1219.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1007.8" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.27%)</title><rect x="1008.0" y="1235.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1011.0" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.27%)</title><rect x="1008.0" y="1219.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1011.0" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.53%)</title><rect x="1011.1" y="1235.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1014.1" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.27%)</title><rect x="1014.3" y="1219.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1017.3" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.27%)</title><rect x="1014.3" y="1203.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.3" y="1214.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.27%)</title><rect x="1014.3" y="1187.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.3" y="1198.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.27%)</title><rect x="1014.3" y="1171.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.3" y="1182.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.80%)</title><rect x="1017.4" y="1235.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1020.4" y="1246.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.80%)</title><rect x="1017.4" y="1219.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1020.4" y="1230.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.80%)</title><rect x="1017.4" y="1203.0" width="9.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1020.4" y="1214.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.53%)</title><rect x="1017.4" y="1187.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1020.4" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.27%)</title><rect x="1023.7" y="1187.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1026.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.27%)</title><rect x="1026.8" y="1235.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.8" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1026.8" y="1219.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1029.8" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.53%)</title><rect x="1029.9" y="1235.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1032.9" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1033.1" y="1219.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.1" y="1230.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.06%)</title><rect x="1036.2" y="1235.0" width="12.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1039.2" y="1246.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.27%)</title><rect x="1036.2" y="1219.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1039.2" y="1230.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.27%)</title><rect x="1039.4" y="1219.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1042.4" y="1230.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.53%)</title><rect x="1042.5" y="1219.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1045.5" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1045.6" y="1203.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1048.6" y="1214.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.27%)</title><rect x="1048.8" y="1235.0" width="3.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1051.8" y="1246.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.27%)</title><rect x="1051.9" y="1235.0" width="3.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1054.9" y="1246.0"></text>
</g>
<g>
<title>Compile::Optimize() (29 samples, 7.71%)</title><rect x="1055.1" y="1267.0" width="91.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.1" y="1278.0">Compile::Op..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.27%)</title><rect x="1055.1" y="1251.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.1" y="1262.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.27%)</title><rect x="1055.1" y="1235.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1058.1" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.27%)</title><rect x="1058.2" y="1251.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.2" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.27%)</title><rect x="1058.2" y="1235.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.2" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1219.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.2" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1203.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.2" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1187.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.2" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1171.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1155.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.2" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1139.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1123.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1107.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1091.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1075.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1059.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1043.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1027.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="1011.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="995.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="979.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="963.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1061.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="947.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="931.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="915.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="899.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="883.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="867.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="851.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="835.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="819.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="803.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="787.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="771.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="755.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="739.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="723.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="707.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="691.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="675.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="659.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="643.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="627.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="611.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="595.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="579.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="563.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="547.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="531.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="515.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="499.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1061.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="483.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="467.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="451.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="435.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="419.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1061.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="403.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="387.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="371.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1061.2" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="355.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.2" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="339.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.2" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="323.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.2" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="307.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.2" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="291.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.2" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="275.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1061.2" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="259.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.2" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="243.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.2" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="227.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.2" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="211.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.2" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="195.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.2" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="179.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.2" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="163.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.2" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="147.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.2" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="131.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.2" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="115.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.2" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="99.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.2" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="83.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.2" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="67.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.2" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1058.2" y="51.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.2" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.27%)</title><rect x="1058.2" y="35.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.2" y="46.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (23 samples, 6.12%)</title><rect x="1061.3" y="1251.0" width="72.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.3" y="1262.0">PhaseIde..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.27%)</title><rect x="1061.3" y="1235.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1064.3" y="1246.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.27%)</title><rect x="1061.3" y="1219.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1064.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.53%)</title><rect x="1064.5" y="1235.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.5" y="1246.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.27%)</title><rect x="1067.6" y="1219.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.6" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.53%)</title><rect x="1070.7" y="1235.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.7" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 3.46%)</title><rect x="1077.0" y="1235.0" width="40.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.0" y="1246.0">Pha..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.27%)</title><rect x="1080.2" y="1219.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.2" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (11 samples, 2.93%)</title><rect x="1083.3" y="1219.0" width="34.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1086.3" y="1230.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (10 samples, 2.66%)</title><rect x="1086.4" y="1203.0" width="31.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1089.4" y="1214.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.27%)</title><rect x="1114.7" y="1187.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.27%)</title><rect x="1117.8" y="1235.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.8" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.80%)</title><rect x="1121.0" y="1235.0" width="9.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.27%)</title><rect x="1121.0" y="1219.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.0" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.27%)</title><rect x="1121.0" y="1203.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.0" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.27%)</title><rect x="1124.1" y="1219.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.1" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.27%)</title><rect x="1127.2" y="1219.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.2" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.27%)</title><rect x="1127.2" y="1203.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.2" y="1214.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.27%)</title><rect x="1130.4" y="1235.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.4" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.80%)</title><rect x="1133.5" y="1251.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.80%)</title><rect x="1133.5" y="1235.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.5" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.53%)</title><rect x="1133.5" y="1219.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.5" y="1230.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1139.8" y="1219.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.8" y="1230.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.27%)</title><rect x="1142.9" y="1251.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.9" y="1262.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.27%)</title><rect x="1142.9" y="1235.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.9" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="1142.9" y="1219.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.9" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 2.39%)</title><rect x="1146.1" y="1267.0" width="28.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.1" y="1278.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 2.39%)</title><rect x="1146.1" y="1251.0" width="28.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.1" y="1262.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 2.39%)</title><rect x="1146.1" y="1235.0" width="28.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.1" y="1246.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 2.39%)</title><rect x="1146.1" y="1219.0" width="28.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.1" y="1230.0">Pa..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.27%)</title><rect x="1146.1" y="1203.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.1" y="1214.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.27%)</title><rect x="1146.1" y="1187.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.1" y="1198.0"></text>
</g>
<g>
<title>GraphKit::make_exception_state(Node*) (1 samples, 0.27%)</title><rect x="1146.1" y="1171.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.1" y="1182.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.27%)</title><rect x="1146.1" y="1155.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.1" y="1166.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.27%)</title><rect x="1146.1" y="1139.0" width="3.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1149.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 2.13%)</title><rect x="1149.2" y="1203.0" width="25.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.2" y="1214.0">P..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 2.13%)</title><rect x="1149.2" y="1187.0" width="25.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.2" y="1198.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.13%)</title><rect x="1149.2" y="1171.0" width="25.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.2" y="1182.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.13%)</title><rect x="1149.2" y="1155.0" width="25.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.2" y="1166.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.13%)</title><rect x="1149.2" y="1139.0" width="25.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.2" y="1150.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.13%)</title><rect x="1149.2" y="1123.0" width="25.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.2" y="1134.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 2.13%)</title><rect x="1149.2" y="1107.0" width="25.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.2" y="1118.0">P..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 2.13%)</title><rect x="1149.2" y="1091.0" width="25.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.2" y="1102.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.27%)</title><rect x="1149.2" y="1075.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.2" y="1086.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.27%)</title><rect x="1149.2" y="1059.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.2" y="1070.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.27%)</title><rect x="1149.2" y="1043.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.2" y="1054.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.27%)</title><rect x="1149.2" y="1027.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.2" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.27%)</title><rect x="1149.2" y="1011.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.2" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.27%)</title><rect x="1149.2" y="995.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.2" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.27%)</title><rect x="1149.2" y="979.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.2" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.27%)</title><rect x="1149.2" y="963.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.2" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.27%)</title><rect x="1149.2" y="947.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.2" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.27%)</title><rect x="1149.2" y="931.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.2" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.27%)</title><rect x="1149.2" y="915.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.2" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.27%)</title><rect x="1149.2" y="899.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.2" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.27%)</title><rect x="1149.2" y="883.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.2" y="894.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.27%)</title><rect x="1149.2" y="867.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.2" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1149.2" y="851.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.2" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1149.2" y="835.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.2" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.27%)</title><rect x="1149.2" y="819.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.2" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.27%)</title><rect x="1149.2" y="803.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.2" y="814.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.27%)</title><rect x="1149.2" y="787.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.2" y="798.0"></text>
</g>
<g>
<title>Monitor::TrySpin(Thread*) (1 samples, 0.27%)</title><rect x="1149.2" y="771.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.06%)</title><rect x="1152.3" y="1075.0" width="12.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.3" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.06%)</title><rect x="1152.3" y="1059.0" width="12.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.06%)</title><rect x="1152.3" y="1043.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.06%)</title><rect x="1152.3" y="1027.0" width="12.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.06%)</title><rect x="1152.3" y="1011.0" width="12.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.06%)</title><rect x="1152.3" y="995.0" width="12.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.3" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.06%)</title><rect x="1152.3" y="979.0" width="12.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.3" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.06%)</title><rect x="1152.3" y="963.0" width="12.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.3" y="974.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.27%)</title><rect x="1152.3" y="947.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.3" y="958.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.27%)</title><rect x="1152.3" y="931.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.3" y="942.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.27%)</title><rect x="1152.3" y="915.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.3" y="926.0"></text>
</g>
<g>
<title>_init (1 samples, 0.27%)</title><rect x="1152.3" y="899.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1155.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.80%)</title><rect x="1155.5" y="947.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.80%)</title><rect x="1155.5" y="931.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.80%)</title><rect x="1155.5" y="915.0" width="9.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.80%)</title><rect x="1155.5" y="899.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.5" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.80%)</title><rect x="1155.5" y="883.0" width="9.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.5" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.80%)</title><rect x="1155.5" y="867.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.80%)</title><rect x="1155.5" y="851.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.80%)</title><rect x="1155.5" y="835.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.80%)</title><rect x="1155.5" y="819.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.80%)</title><rect x="1155.5" y="803.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.5" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.80%)</title><rect x="1155.5" y="787.0" width="9.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.5" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.80%)</title><rect x="1155.5" y="771.0" width="9.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.80%)</title><rect x="1155.5" y="755.0" width="9.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.80%)</title><rect x="1155.5" y="739.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.80%)</title><rect x="1155.5" y="723.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.80%)</title><rect x="1155.5" y="707.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.5" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.80%)</title><rect x="1155.5" y="691.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.5" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.80%)</title><rect x="1155.5" y="675.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.80%)</title><rect x="1155.5" y="659.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.53%)</title><rect x="1155.5" y="643.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.53%)</title><rect x="1155.5" y="627.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.53%)</title><rect x="1155.5" y="611.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.5" y="622.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1155.5" y="595.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.5" y="606.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.27%)</title><rect x="1155.5" y="579.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.5" y="590.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.27%)</title><rect x="1155.5" y="563.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.5" y="574.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.27%)</title><rect x="1155.5" y="547.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.5" y="558.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.27%)</title><rect x="1155.5" y="531.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1158.6" y="595.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1158.6" y="579.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1158.6" y="563.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1158.6" y="547.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1158.6" y="531.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1158.6" y="515.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1158.6" y="499.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1158.6" y="483.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1158.6" y="467.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1158.6" y="451.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1158.6" y="435.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.6" y="446.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.27%)</title><rect x="1158.6" y="419.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.6" y="430.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.27%)</title><rect x="1158.6" y="403.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.6" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1158.6" y="387.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.6" y="398.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.27%)</title><rect x="1158.6" y="371.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.6" y="382.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.27%)</title><rect x="1158.6" y="355.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.6" y="366.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.27%)</title><rect x="1161.8" y="643.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.8" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.80%)</title><rect x="1164.9" y="1075.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.9" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.80%)</title><rect x="1164.9" y="1059.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.80%)</title><rect x="1164.9" y="1043.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.80%)</title><rect x="1164.9" y="1027.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.80%)</title><rect x="1164.9" y="1011.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.80%)</title><rect x="1164.9" y="995.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.80%)</title><rect x="1164.9" y="979.0" width="9.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.9" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.80%)</title><rect x="1164.9" y="963.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.9" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.80%)</title><rect x="1164.9" y="947.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.80%)</title><rect x="1164.9" y="931.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.80%)</title><rect x="1164.9" y="915.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.80%)</title><rect x="1164.9" y="899.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.80%)</title><rect x="1164.9" y="883.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.9" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.80%)</title><rect x="1164.9" y="867.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.80%)</title><rect x="1164.9" y="851.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.80%)</title><rect x="1164.9" y="835.0" width="9.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.80%)</title><rect x="1164.9" y="819.0" width="9.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.80%)</title><rect x="1164.9" y="803.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.80%)</title><rect x="1164.9" y="787.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.53%)</title><rect x="1164.9" y="771.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.53%)</title><rect x="1164.9" y="755.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.53%)</title><rect x="1164.9" y="739.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.53%)</title><rect x="1164.9" y="723.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.53%)</title><rect x="1164.9" y="707.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.53%)</title><rect x="1164.9" y="691.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.53%)</title><rect x="1164.9" y="675.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.53%)</title><rect x="1164.9" y="659.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.53%)</title><rect x="1164.9" y="643.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.53%)</title><rect x="1164.9" y="627.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.53%)</title><rect x="1164.9" y="611.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.53%)</title><rect x="1164.9" y="595.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.53%)</title><rect x="1164.9" y="579.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.53%)</title><rect x="1164.9" y="563.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.53%)</title><rect x="1164.9" y="547.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.53%)</title><rect x="1164.9" y="531.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.53%)</title><rect x="1164.9" y="515.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1164.9" y="499.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.9" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.9" y="483.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.9" y="467.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.9" y="451.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1164.9" y="435.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1164.9" y="419.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1164.9" y="403.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1164.9" y="387.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.9" y="371.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.9" y="355.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1164.9" y="339.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1164.9" y="323.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1164.9" y="307.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1164.9" y="291.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.9" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.27%)</title><rect x="1164.9" y="275.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.9" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1164.9" y="259.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.9" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1164.9" y="243.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="254.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.27%)</title><rect x="1164.9" y="227.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.9" y="238.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.27%)</title><rect x="1164.9" y="211.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.9" y="222.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.27%)</title><rect x="1164.9" y="195.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.9" y="206.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.27%)</title><rect x="1164.9" y="179.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.9" y="190.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.27%)</title><rect x="1164.9" y="163.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.9" y="174.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.27%)</title><rect x="1164.9" y="147.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1168.0" y="499.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.27%)</title><rect x="1168.0" y="483.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.0" y="494.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1168.0" y="467.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.0" y="478.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.27%)</title><rect x="1168.0" y="451.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.0" y="462.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.27%)</title><rect x="1168.0" y="435.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.0" y="446.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.27%)</title><rect x="1168.0" y="419.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.0" y="430.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.27%)</title><rect x="1168.0" y="403.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.0" y="414.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.27%)</title><rect x="1168.0" y="387.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.0" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1171.2" y="771.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1171.2" y="755.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1171.2" y="739.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1171.2" y="723.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1171.2" y="707.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1171.2" y="691.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1171.2" y="675.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1171.2" y="659.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1171.2" y="643.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1171.2" y="627.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1171.2" y="611.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1171.2" y="595.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1171.2" y="579.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1171.2" y="563.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1171.2" y="547.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1171.2" y="531.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1171.2" y="515.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1171.2" y="499.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.2" y="510.0"></text>
</g>
<g>
<title>Parse::push_constant(ciConstant, bool, bool, Type const*) (1 samples, 0.27%)</title><rect x="1171.2" y="483.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="494.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.27%)</title><rect x="1171.2" y="467.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="478.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.27%)</title><rect x="1171.2" y="451.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.2" y="462.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.27%)</title><rect x="1171.2" y="435.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.2" y="446.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.27%)</title><rect x="1174.3" y="1267.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.3" y="1278.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.27%)</title><rect x="1174.3" y="1251.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.3" y="1262.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.53%)</title><rect x="1177.4" y="1299.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="1310.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.53%)</title><rect x="1177.4" y="1283.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="1294.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.53%)</title><rect x="1177.4" y="1267.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="1278.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.53%)</title><rect x="1177.4" y="1251.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="1262.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.27%)</title><rect x="1177.4" y="1235.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="1246.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.27%)</title><rect x="1177.4" y="1219.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="1230.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.27%)</title><rect x="1177.4" y="1203.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.27%)</title><rect x="1177.4" y="1187.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.27%)</title><rect x="1177.4" y="1171.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.27%)</title><rect x="1177.4" y="1155.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.27%)</title><rect x="1177.4" y="1139.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="1150.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.27%)</title><rect x="1177.4" y="1123.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.27%)</title><rect x="1177.4" y="1107.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="1118.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.27%)</title><rect x="1177.4" y="1091.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="1102.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.27%)</title><rect x="1177.4" y="1075.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1177.4" y="1059.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1177.4" y="1043.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.27%)</title><rect x="1177.4" y="1027.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.4" y="1038.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.27%)</title><rect x="1177.4" y="1011.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="1022.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.27%)</title><rect x="1180.6" y="1235.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="1246.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.27%)</title><rect x="1180.6" y="1219.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="1230.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.27%)</title><rect x="1180.6" y="1203.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="1214.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.27%)</title><rect x="1183.7" y="1315.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="1326.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.27%)</title><rect x="1183.7" y="1299.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.7" y="1310.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.27%)</title><rect x="1183.7" y="1283.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="1294.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.27%)</title><rect x="1183.7" y="1267.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="1278.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.27%)</title><rect x="1186.9" y="1363.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.9" y="1374.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.27%)</title><rect x="1186.9" y="1347.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.9" y="1358.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.27%)</title><rect x="1186.9" y="1331.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.9" y="1342.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.27%)</title><rect x="1186.9" y="1315.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.9" y="1326.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.27%)</title><rect x="1186.9" y="1299.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.9" y="1310.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.27%)</title><rect x="1186.9" y="1283.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.9" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.27%)</title><rect x="1186.9" y="1267.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.9" y="1278.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.27%)</title><rect x="1186.9" y="1251.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.9" y="1262.0"></text>
</g>
</g>
</svg>
