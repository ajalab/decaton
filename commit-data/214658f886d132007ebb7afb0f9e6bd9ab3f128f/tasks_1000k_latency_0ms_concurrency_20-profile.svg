<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1221"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1221"> </text>
<g id="frames">
<g>
<title>all (1,176 samples, 100.00%)</title><rect x="10.0" y="1187.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (287 samples, 24.40%)</title><rect x="10.0" y="1171.0" width="288.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (286 samples, 24.32%)</title><rect x="10.0" y="1155.0" width="287.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1166.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (4 samples, 0.34%)</title><rect x="11.0" y="1139.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.34%)</title><rect x="11.0" y="1123.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="13.0" y="1107.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="13.0" y="1091.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="13.0" y="1075.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="13.0" y="1059.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="13.0" y="1043.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.0" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="13.0" y="1027.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="16.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="14.0" y="1027.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="14.0" y="1011.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="14.0" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$262/1852055060.test (1 samples, 0.09%)</title><rect x="14.0" y="979.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="15.0" y="1139.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="15.0" y="1123.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="15.0" y="1107.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="15.0" y="1091.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="15.0" y="1075.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="15.0" y="1059.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="15.0" y="1043.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="15.0" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="15.0" y="1011.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="15.0" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$264/668763840.test (1 samples, 0.09%)</title><rect x="15.0" y="979.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.34%)</title><rect x="16.0" y="1139.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.34%)</title><rect x="16.0" y="1123.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.34%)</title><rect x="16.0" y="1107.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$260/1649181109.accept (4 samples, 0.34%)</title><rect x="16.0" y="1091.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.34%)</title><rect x="16.0" y="1075.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.34%)</title><rect x="16.0" y="1059.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.0" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.26%)</title><rect x="16.0" y="1043.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.0" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.09%)</title><rect x="19.0" y="1043.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.0" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="19.0" y="1027.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="20.0" y="1139.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="20.0" y="1123.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (223 samples, 18.96%)</title><rect x="21.0" y="1139.0" width="223.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.0" y="1150.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/1356205958.accept (214 samples, 18.20%)</title><rect x="22.0" y="1123.0" width="214.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.0" y="1134.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (214 samples, 18.20%)</title><rect x="22.0" y="1107.0" width="214.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.0" y="1118.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (162 samples, 13.78%)</title><rect x="25.1" y="1091.0" width="162.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.1" y="1102.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (162 samples, 13.78%)</title><rect x="25.1" y="1075.0" width="162.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.1" y="1086.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (162 samples, 13.78%)</title><rect x="25.1" y="1059.0" width="162.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.1" y="1070.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (162 samples, 13.78%)</title><rect x="25.1" y="1043.0" width="162.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.1" y="1054.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (162 samples, 13.78%)</title><rect x="25.1" y="1027.0" width="162.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.1" y="1038.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (162 samples, 13.78%)</title><rect x="25.1" y="1011.0" width="162.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.1" y="1022.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (113 samples, 9.61%)</title><rect x="66.2" y="995.0" width="113.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.2" y="1006.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (31 samples, 2.64%)</title><rect x="68.2" y="979.0" width="31.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.2" y="990.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (31 samples, 2.64%)</title><rect x="68.2" y="963.0" width="31.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.2" y="974.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (31 samples, 2.64%)</title><rect x="68.2" y="947.0" width="31.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.2" y="958.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.60%)</title><rect x="99.3" y="979.0" width="7.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (7 samples, 0.60%)</title><rect x="99.3" y="963.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="102.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.34%)</title><rect x="99.3" y="947.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.3" y="958.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.34%)</title><rect x="99.3" y="931.0" width="4.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="102.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.26%)</title><rect x="103.3" y="947.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="106.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (73 samples, 6.21%)</title><rect x="106.3" y="979.0" width="73.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="109.3" y="990.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (73 samples, 6.21%)</title><rect x="106.3" y="963.0" width="73.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="109.3" y="974.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (72 samples, 6.12%)</title><rect x="106.3" y="947.0" width="72.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="109.3" y="958.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (72 samples, 6.12%)</title><rect x="106.3" y="931.0" width="72.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.3" y="942.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (71 samples, 6.04%)</title><rect x="107.3" y="915.0" width="71.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="110.3" y="926.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 5.61%)</title><rect x="109.3" y="899.0" width="66.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="112.3" y="910.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="109.3" y="883.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="112.3" y="894.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.17%)</title><rect x="111.3" y="883.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="114.3" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_signal (38 samples, 3.23%)</title><rect x="113.4" y="883.0" width="38.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="116.4" y="894.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.43%)</title><rect x="151.5" y="883.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="154.5" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (19 samples, 1.62%)</title><rect x="156.5" y="883.0" width="19.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="159.5" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.17%)</title><rect x="175.6" y="899.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="178.6" y="910.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="177.6" y="899.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="180.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="178.6" y="947.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.43%)</title><rect x="179.6" y="995.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (5 samples, 0.43%)</title><rect x="179.6" y="979.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.43%)</title><rect x="179.6" y="963.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.6" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="183.6" y="947.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="186.6" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="183.6" y="931.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="186.6" y="942.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="183.6" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="186.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.17%)</title><rect x="184.6" y="995.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="187.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="184.6" y="979.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="187.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="184.6" y="963.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="184.6" y="947.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="185.6" y="963.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="185.6" y="947.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.6" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="186.6" y="995.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="189.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (5 samples, 0.43%)</title><rect x="187.6" y="1091.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.6" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (5 samples, 0.43%)</title><rect x="187.6" y="1075.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (4 samples, 0.34%)</title><rect x="192.6" y="1091.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.6" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.34%)</title><rect x="192.6" y="1075.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.6" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.34%)</title><rect x="192.6" y="1059.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (39 samples, 3.32%)</title><rect x="196.6" y="1091.0" width="39.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.6" y="1102.0">com..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.09%)</title><rect x="196.6" y="1075.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (38 samples, 3.23%)</title><rect x="197.6" y="1075.0" width="38.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.6" y="1086.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.51%)</title><rect x="223.7" y="1059.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.34%)</title><rect x="223.7" y="1043.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.34%)</title><rect x="223.7" y="1027.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.34%)</title><rect x="223.7" y="1011.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="226.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.17%)</title><rect x="227.7" y="1043.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.7" y="1054.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="229.7" y="1059.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="232.7" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.43%)</title><rect x="230.7" y="1059.0" width="5.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="233.7" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="235.8" y="1091.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="238.8" y="1102.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="236.8" y="1123.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="239.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.17%)</title><rect x="237.8" y="1123.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.17%)</title><rect x="237.8" y="1107.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.17%)</title><rect x="237.8" y="1091.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.17%)</title><rect x="237.8" y="1075.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.8" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="237.8" y="1059.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="240.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="238.8" y="1059.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="239.8" y="1123.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.09%)</title><rect x="239.8" y="1107.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="239.8" y="1091.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="242.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.09%)</title><rect x="239.8" y="1075.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.34%)</title><rect x="240.8" y="1123.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.34%)</title><rect x="240.8" y="1107.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="243.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.34%)</title><rect x="240.8" y="1091.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.34%)</title><rect x="240.8" y="1075.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.8" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.34%)</title><rect x="240.8" y="1059.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (52 samples, 4.42%)</title><rect x="244.8" y="1139.0" width="52.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.8" y="1150.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (52 samples, 4.42%)</title><rect x="244.8" y="1123.0" width="52.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.8" y="1134.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (31 samples, 2.64%)</title><rect x="244.8" y="1107.0" width="31.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="247.8" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (31 samples, 2.64%)</title><rect x="244.8" y="1091.0" width="31.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.8" y="1102.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (30 samples, 2.55%)</title><rect x="244.8" y="1075.0" width="30.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.8" y="1086.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (25 samples, 2.13%)</title><rect x="245.8" y="1059.0" width="25.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.8" y="1070.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (25 samples, 2.13%)</title><rect x="245.8" y="1043.0" width="25.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="248.8" y="1054.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.36%)</title><rect x="247.8" y="1027.0" width="16.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.77%)</title><rect x="254.8" y="1011.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (9 samples, 0.77%)</title><rect x="254.8" y="995.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (9 samples, 0.77%)</title><rect x="254.8" y="979.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (9 samples, 0.77%)</title><rect x="254.8" y="963.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (9 samples, 0.77%)</title><rect x="254.8" y="947.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (9 samples, 0.77%)</title><rect x="254.8" y="931.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="257.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (9 samples, 0.77%)</title><rect x="254.8" y="915.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (6 samples, 0.51%)</title><rect x="263.9" y="1027.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="266.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.09%)</title><rect x="263.9" y="1011.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 0.43%)</title><rect x="264.9" y="1011.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.43%)</title><rect x="264.9" y="995.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.9" y="1006.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.43%)</title><rect x="264.9" y="979.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="267.9" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="268.9" y="963.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="271.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.09%)</title><rect x="269.9" y="1027.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="272.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.17%)</title><rect x="270.9" y="1059.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.17%)</title><rect x="270.9" y="1043.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="273.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="270.9" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="270.9" y="1011.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="271.9" y="1027.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="271.9" y="1011.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="271.9" y="995.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="271.9" y="979.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="272.9" y="1059.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="272.9" y="1043.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="272.9" y="1027.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="272.9" y="1011.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="272.9" y="995.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="273.9" y="1059.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.09%)</title><rect x="274.9" y="1075.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="274.9" y="1059.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="274.9" y="1043.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.9" y="1054.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="274.9" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="274.9" y="1011.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="277.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.51%)</title><rect x="275.9" y="1107.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.51%)</title><rect x="275.9" y="1091.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.51%)</title><rect x="275.9" y="1075.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.26%)</title><rect x="275.9" y="1059.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/616823838.accept (3 samples, 0.26%)</title><rect x="275.9" y="1043.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.26%)</title><rect x="275.9" y="1027.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (3 samples, 0.26%)</title><rect x="275.9" y="1011.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.09%)</title><rect x="276.9" y="995.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="276.9" y="979.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.9" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="276.9" y="963.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="277.9" y="995.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.9" y="1006.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="278.9" y="1059.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="278.9" y="1043.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="278.9" y="1027.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="278.9" y="1011.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="279.9" y="1059.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="279.9" y="1043.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="279.9" y="1027.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="282.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="279.9" y="1011.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="279.9" y="995.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="279.9" y="979.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="280.9" y="1059.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="280.9" y="1043.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.9" y="1054.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="280.9" y="1027.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="280.9" y="1011.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="280.9" y="995.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="280.9" y="979.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="283.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (9 samples, 0.77%)</title><rect x="281.9" y="1107.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.60%)</title><rect x="281.9" y="1091.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (3 samples, 0.26%)</title><rect x="281.9" y="1075.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.17%)</title><rect x="281.9" y="1059.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.09%)</title><rect x="281.9" y="1043.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="281.9" y="1027.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.09%)</title><rect x="282.9" y="1043.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.09%)</title><rect x="282.9" y="1027.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="282.9" y="1011.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="282.9" y="995.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.09%)</title><rect x="283.9" y="1059.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.09%)</title><rect x="283.9" y="1043.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="283.9" y="1027.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="283.9" y="1011.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.34%)</title><rect x="284.9" y="1075.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="284.9" y="1059.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="284.9" y="1043.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.09%)</title><rect x="284.9" y="1027.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.09%)</title><rect x="284.9" y="1011.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="284.9" y="995.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="284.9" y="979.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedCount.update (1 samples, 0.09%)</title><rect x="284.9" y="963.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.26%)</title><rect x="285.9" y="1059.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="285.9" y="1043.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="285.9" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.9" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="285.9" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="288.9" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="285.9" y="995.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="288.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.17%)</title><rect x="286.9" y="1043.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.17%)</title><rect x="286.9" y="1027.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.17%)</title><rect x="286.9" y="1011.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.17%)</title><rect x="286.9" y="995.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.17%)</title><rect x="286.9" y="979.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.9" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.17%)</title><rect x="286.9" y="963.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.9" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="286.9" y="947.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="289.9" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="287.9" y="947.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="290.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.17%)</title><rect x="288.9" y="1091.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.17%)</title><rect x="288.9" y="1075.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.17%)</title><rect x="288.9" y="1059.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.17%)</title><rect x="288.9" y="1043.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.09%)</title><rect x="288.9" y="1027.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="288.9" y="1011.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="289.9" y="1027.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="289.9" y="1011.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="292.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.09%)</title><rect x="289.9" y="995.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.setLeaderEpochIfExists (1 samples, 0.09%)</title><rect x="289.9" y="979.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.09%)</title><rect x="289.9" y="963.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="292.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.09%)</title><rect x="289.9" y="947.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.09%)</title><rect x="289.9" y="931.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.34%)</title><rect x="291.0" y="1107.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="294.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.26%)</title><rect x="292.0" y="1091.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="292.0" y="1075.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$251/1964159502.accept (1 samples, 0.09%)</title><rect x="292.0" y="1059.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="295.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.09%)</title><rect x="292.0" y="1043.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="292.0" y="1027.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="295.0" y="1038.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.09%)</title><rect x="292.0" y="1011.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="295.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$229/361864936.apply (1 samples, 0.09%)</title><rect x="292.0" y="995.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.09%)</title><rect x="292.0" y="979.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.09%)</title><rect x="293.0" y="1075.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.0" y="1086.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="293.0" y="1059.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="293.0" y="1043.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="294.0" y="1075.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="294.0" y="1059.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="294.0" y="1043.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="297.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="294.0" y="1027.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="294.0" y="1011.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="294.0" y="995.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="294.0" y="979.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="297.0" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="294.0" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.0" y="974.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="294.0" y="947.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.0" y="958.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="294.0" y="931.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="295.0" y="1107.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="295.0" y="1091.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="296.0" y="1107.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="296.0" y="1091.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="296.0" y="1075.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="299.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="296.0" y="1059.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="297.0" y="1155.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.0" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="297.0" y="1139.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="300.0" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="297.0" y="1123.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="300.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.run (739 samples, 62.84%)</title><rect x="298.0" y="1171.0" width="741.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.0" y="1182.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (739 samples, 62.84%)</title><rect x="298.0" y="1155.0" width="741.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.0" y="1166.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (739 samples, 62.84%)</title><rect x="298.0" y="1139.0" width="741.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="301.0" y="1150.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/441315088.run (498 samples, 42.35%)</title><rect x="298.0" y="1123.0" width="499.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.0" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (498 samples, 42.35%)</title><rect x="298.0" y="1107.0" width="499.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.0" y="1118.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (498 samples, 42.35%)</title><rect x="298.0" y="1091.0" width="499.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="301.0" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.process..</text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="299.0" y="1075.0" width="3.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="302.0" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.51%)</title><rect x="302.0" y="1075.0" width="6.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="305.0" y="1086.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="305.0" y="1059.0" width="3.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="308.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (486 samples, 41.33%)</title><rect x="308.0" y="1075.0" width="487.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.0" y="1086.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sch..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (3 samples, 0.26%)</title><rect x="315.0" y="1059.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (149 samples, 12.67%)</title><rect x="318.0" y="1059.0" width="149.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.0" y="1070.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (142 samples, 12.07%)</title><rect x="325.1" y="1043.0" width="142.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="328.1" y="1054.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (142 samples, 12.07%)</title><rect x="325.1" y="1027.0" width="142.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.1" y="1038.0">com/linecorp/decat..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="325.1" y="1011.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="328.1" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="325.1" y="995.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="328.1" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="325.1" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="328.1" y="990.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="325.1" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="328.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (140 samples, 11.90%)</title><rect x="326.1" y="1011.0" width="140.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="329.1" y="1022.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (140 samples, 11.90%)</title><rect x="326.1" y="995.0" width="140.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="329.1" y="1006.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (140 samples, 11.90%)</title><rect x="326.1" y="979.0" width="140.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="329.1" y="990.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (26 samples, 2.21%)</title><rect x="326.1" y="963.0" width="26.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="329.1" y="974.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (11 samples, 0.94%)</title><rect x="326.1" y="947.0" width="11.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="329.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (11 samples, 0.94%)</title><rect x="326.1" y="931.0" width="11.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="329.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (11 samples, 0.94%)</title><rect x="326.1" y="915.0" width="11.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="329.1" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.94%)</title><rect x="326.1" y="899.0" width="11.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="329.1" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (11 samples, 0.94%)</title><rect x="326.1" y="883.0" width="11.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.1" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="336.1" y="867.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.1" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="336.1" y="851.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="339.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (15 samples, 1.28%)</title><rect x="337.1" y="947.0" width="15.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="340.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (15 samples, 1.28%)</title><rect x="337.1" y="931.0" width="15.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.34%)</title><rect x="337.1" y="915.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="340.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 0.34%)</title><rect x="337.1" y="899.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="340.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.09%)</title><rect x="340.1" y="883.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="343.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 0.85%)</title><rect x="341.1" y="915.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="344.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (10 samples, 0.85%)</title><rect x="341.1" y="899.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="344.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (5 samples, 0.43%)</title><rect x="341.1" y="883.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="344.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.34%)</title><rect x="346.1" y="883.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="349.1" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="347.1" y="867.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="350.1" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="347.1" y="851.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="350.1" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="347.1" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="350.1" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="347.1" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="350.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="348.1" y="867.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="351.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="350.2" y="883.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="353.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="350.2" y="867.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.09%)</title><rect x="351.2" y="915.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="354.2" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="351.2" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="354.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (100 samples, 8.50%)</title><rect x="352.2" y="963.0" width="100.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.2" y="974.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.43%)</title><rect x="352.2" y="947.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.43%)</title><rect x="352.2" y="931.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="355.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.43%)</title><rect x="352.2" y="915.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.43%)</title><rect x="352.2" y="899.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (5 samples, 0.43%)</title><rect x="352.2" y="883.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="355.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="352.2" y="867.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (4 samples, 0.34%)</title><rect x="353.2" y="867.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (4 samples, 0.34%)</title><rect x="353.2" y="851.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="356.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.43%)</title><rect x="357.2" y="947.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="360.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.43%)</title><rect x="357.2" y="931.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="360.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.17%)</title><rect x="360.2" y="915.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="363.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.77%)</title><rect x="362.2" y="947.0" width="9.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="365.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.51%)</title><rect x="365.2" y="931.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.34%)</title><rect x="367.2" y="915.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="370.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.26%)</title><rect x="368.2" y="899.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (8 samples, 0.68%)</title><rect x="371.2" y="947.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="374.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="371.2" y="931.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="374.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (7 samples, 0.60%)</title><rect x="372.2" y="931.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="375.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (73 samples, 6.21%)</title><rect x="379.3" y="947.0" width="73.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="382.3" y="958.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.79%)</title><rect x="379.3" y="931.0" width="21.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.3" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.34%)</title><rect x="382.3" y="915.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.34%)</title><rect x="382.3" y="899.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.34%)</title><rect x="382.3" y="883.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="385.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (13 samples, 1.11%)</title><rect x="386.3" y="915.0" width="13.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="389.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="399.3" y="915.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="402.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="399.3" y="899.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="402.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (52 samples, 4.42%)</title><rect x="400.3" y="931.0" width="52.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.3" y="942.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (52 samples, 4.42%)</title><rect x="400.3" y="915.0" width="52.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="403.3" y="926.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (52 samples, 4.42%)</title><rect x="400.3" y="899.0" width="52.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.3" y="910.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.94%)</title><rect x="401.3" y="883.0" width="11.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="404.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.17%)</title><rect x="402.3" y="867.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.51%)</title><rect x="404.3" y="867.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.51%)</title><rect x="404.3" y="851.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="407.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.51%)</title><rect x="404.3" y="835.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="407.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.26%)</title><rect x="407.3" y="819.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="410.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="410.4" y="867.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="413.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="411.4" y="867.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="414.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="411.4" y="851.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="414.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.51%)</title><rect x="412.4" y="883.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="415.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.43%)</title><rect x="413.4" y="867.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="416.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.43%)</title><rect x="413.4" y="851.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="416.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.43%)</title><rect x="413.4" y="835.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.4" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.43%)</title><rect x="413.4" y="819.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="416.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.34%)</title><rect x="418.4" y="883.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="421.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (12 samples, 1.02%)</title><rect x="422.4" y="883.0" width="12.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="425.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (12 samples, 1.02%)</title><rect x="422.4" y="867.0" width="12.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="425.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (12 samples, 1.02%)</title><rect x="422.4" y="851.0" width="12.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (12 samples, 1.02%)</title><rect x="422.4" y="835.0" width="12.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="425.4" y="846.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (12 samples, 1.02%)</title><rect x="422.4" y="819.0" width="12.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="425.4" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="431.4" y="803.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="434.4" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="431.4" y="787.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="434.4" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="431.4" y="771.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="434.4" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="431.4" y="755.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="434.4" y="766.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.09%)</title><rect x="432.4" y="755.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="435.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="433.4" y="803.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="436.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.34%)</title><rect x="434.4" y="883.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="437.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.34%)</title><rect x="434.4" y="867.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="437.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.34%)</title><rect x="434.4" y="851.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="437.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.17%)</title><rect x="436.4" y="835.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="439.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (14 samples, 1.19%)</title><rect x="438.5" y="883.0" width="14.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="441.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (4 samples, 0.34%)</title><rect x="448.5" y="867.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="451.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="448.5" y="851.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="451.5" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.09%)</title><rect x="448.5" y="835.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="451.5" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="449.5" y="851.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="452.5" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="449.5" y="835.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="452.5" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="449.5" y="819.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="452.5" y="830.0"></text>
</g>
<g>
<title>_new_array_Java (1 samples, 0.09%)</title><rect x="450.5" y="851.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="453.5" y="862.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="451.5" y="851.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="454.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (14 samples, 1.19%)</title><rect x="452.5" y="963.0" width="14.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="455.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (14 samples, 1.19%)</title><rect x="452.5" y="947.0" width="14.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="455.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (14 samples, 1.19%)</title><rect x="452.5" y="931.0" width="14.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="455.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (14 samples, 1.19%)</title><rect x="452.5" y="915.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="455.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (14 samples, 1.19%)</title><rect x="452.5" y="899.0" width="14.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="455.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="465.5" y="883.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="468.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.09%)</title><rect x="466.5" y="1011.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="469.5" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="466.5" y="995.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="469.5" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="466.5" y="979.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="469.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (303 samples, 25.77%)</title><rect x="467.6" y="1059.0" width="304.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="470.6" y="1070.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="474.6" y="1043.0" width="4.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="477.6" y="1054.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="474.6" y="1027.0" width="4.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="477.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (42 samples, 3.57%)</title><rect x="478.6" y="1043.0" width="42.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="481.6" y="1054.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="479.6" y="1027.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.6" y="1038.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (40 samples, 3.40%)</title><rect x="480.6" y="1027.0" width="40.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="483.6" y="1038.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (40 samples, 3.40%)</title><rect x="480.6" y="1011.0" width="40.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="483.6" y="1022.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 1.36%)</title><rect x="482.6" y="995.0" width="16.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="485.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (16 samples, 1.36%)</title><rect x="482.6" y="979.0" width="16.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="485.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (16 samples, 1.36%)</title><rect x="482.6" y="963.0" width="16.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="485.6" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (16 samples, 1.36%)</title><rect x="482.6" y="947.0" width="16.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="485.6" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (16 samples, 1.36%)</title><rect x="482.6" y="931.0" width="16.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="485.6" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.26%)</title><rect x="498.7" y="995.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="501.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="499.7" y="979.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="502.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="499.7" y="963.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="502.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.09%)</title><rect x="500.7" y="979.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.7" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (19 samples, 1.62%)</title><rect x="501.7" y="995.0" width="19.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="504.7" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 0.26%)</title><rect x="517.7" y="979.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="520.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.26%)</title><rect x="517.7" y="963.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="520.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.51%)</title><rect x="520.7" y="1043.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="523.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.51%)</title><rect x="520.7" y="1027.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="523.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.51%)</title><rect x="520.7" y="1011.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="523.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (173 samples, 14.71%)</title><rect x="526.8" y="1043.0" width="173.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="529.8" y="1054.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (173 samples, 14.71%)</title><rect x="526.8" y="1027.0" width="173.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="529.8" y="1038.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="537.8" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="540.8" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="537.8" y="995.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="540.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="537.8" y="979.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="540.8" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="537.8" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="540.8" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="538.8" y="1011.0" width="3.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="541.8" y="1022.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="539.8" y="995.0" width="2.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="542.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (58 samples, 4.93%)</title><rect x="541.8" y="1011.0" width="58.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="544.8" y="1022.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (29 samples, 2.47%)</title><rect x="551.8" y="995.0" width="29.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="554.8" y="1006.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (29 samples, 2.47%)</title><rect x="551.8" y="979.0" width="29.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="554.8" y="990.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (11 samples, 0.94%)</title><rect x="557.9" y="963.0" width="11.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="560.9" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (11 samples, 0.94%)</title><rect x="557.9" y="947.0" width="11.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="560.9" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (11 samples, 0.94%)</title><rect x="557.9" y="931.0" width="11.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="560.9" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.85%)</title><rect x="557.9" y="915.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="560.9" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.51%)</title><rect x="557.9" y="899.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="560.9" y="910.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="557.9" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="560.9" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.43%)</title><rect x="558.9" y="883.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="561.9" y="894.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (5 samples, 0.43%)</title><rect x="558.9" y="867.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="561.9" y="878.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="558.9" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="561.9" y="862.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.17%)</title><rect x="559.9" y="851.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="562.9" y="862.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="560.9" y="835.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="563.9" y="846.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.17%)</title><rect x="561.9" y="851.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="564.9" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.34%)</title><rect x="563.9" y="899.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="566.9" y="910.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="564.9" y="883.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="567.9" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="565.9" y="883.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="568.9" y="894.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="566.9" y="867.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="569.9" y="878.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.09%)</title><rect x="567.9" y="915.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="570.9" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (8 samples, 0.68%)</title><rect x="568.9" y="963.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="571.9" y="974.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="576.9" y="963.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="579.9" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="577.9" y="963.0" width="3.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="580.9" y="974.0"></text>
</g>
<g>
<title>jshort_arraycopy (4 samples, 0.34%)</title><rect x="580.9" y="995.0" width="4.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="583.9" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (15 samples, 1.28%)</title><rect x="584.9" y="995.0" width="15.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="587.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.34%)</title><rect x="600.0" y="1011.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="603.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.60%)</title><rect x="604.0" y="1011.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="607.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.09%)</title><rect x="604.0" y="995.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="607.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="604.0" y="979.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="607.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.09%)</title><rect x="604.0" y="963.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="607.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.51%)</title><rect x="605.0" y="995.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="608.0" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="605.0" y="979.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="608.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (2 samples, 0.17%)</title><rect x="605.0" y="963.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="608.0" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="607.0" y="979.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="610.0" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.26%)</title><rect x="608.0" y="979.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="611.0" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (89 samples, 7.57%)</title><rect x="611.0" y="1011.0" width="89.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="614.0" y="1022.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (85 samples, 7.23%)</title><rect x="615.1" y="995.0" width="85.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="618.1" y="1006.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (11 samples, 0.94%)</title><rect x="631.1" y="979.0" width="11.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.1" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.94%)</title><rect x="631.1" y="963.0" width="11.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (11 samples, 0.94%)</title><rect x="631.1" y="947.0" width="11.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="634.1" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (11 samples, 0.94%)</title><rect x="631.1" y="931.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="634.1" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (11 samples, 0.94%)</title><rect x="631.1" y="915.0" width="11.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.1" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="642.1" y="979.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="645.1" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="642.1" y="963.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="645.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="642.1" y="947.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.1" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="642.1" y="931.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="645.1" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.17%)</title><rect x="642.1" y="915.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.1" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (56 samples, 4.76%)</title><rect x="644.1" y="979.0" width="56.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.1" y="990.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (51 samples, 4.34%)</title><rect x="649.2" y="963.0" width="51.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="652.2" y="974.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.68%)</title><rect x="650.2" y="947.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="653.2" y="958.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (8 samples, 0.68%)</title><rect x="650.2" y="931.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="653.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (42 samples, 3.57%)</title><rect x="658.2" y="947.0" width="42.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="661.2" y="958.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.17%)</title><rect x="683.3" y="931.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="686.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.77%)</title><rect x="685.3" y="931.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="688.3" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="693.3" y="915.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="696.3" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="693.3" y="899.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="696.3" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="693.3" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="696.3" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="693.3" y="867.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="696.3" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="693.3" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="696.3" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="693.3" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="696.3" y="846.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="693.3" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="696.3" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="693.3" y="803.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="696.3" y="814.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.51%)</title><rect x="694.3" y="931.0" width="6.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="697.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (64 samples, 5.44%)</title><rect x="700.3" y="1043.0" width="64.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="703.3" y="1054.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (64 samples, 5.44%)</title><rect x="700.3" y="1027.0" width="64.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="703.3" y="1038.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1014288372.process (30 samples, 2.55%)</title><rect x="701.3" y="1011.0" width="30.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.3" y="1022.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (29 samples, 2.47%)</title><rect x="702.3" y="995.0" width="29.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="705.3" y="1006.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (26 samples, 2.21%)</title><rect x="702.3" y="979.0" width="26.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.3" y="990.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.26%)</title><rect x="711.4" y="963.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="714.4" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.26%)</title><rect x="711.4" y="947.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="714.4" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.26%)</title><rect x="711.4" y="931.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.4" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.26%)</title><rect x="711.4" y="915.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="714.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="713.4" y="899.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="716.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (14 samples, 1.19%)</title><rect x="714.4" y="963.0" width="14.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="717.4" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.68%)</title><rect x="720.4" y="947.0" width="8.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="723.4" y="958.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.60%)</title><rect x="721.4" y="931.0" width="7.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="724.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.26%)</title><rect x="728.4" y="979.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="731.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="730.4" y="963.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="733.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (7 samples, 0.60%)</title><rect x="731.4" y="1011.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="734.4" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="736.5" y="995.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="739.5" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="736.5" y="979.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="739.5" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="736.5" y="963.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="739.5" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="736.5" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="739.5" y="958.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="736.5" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="739.5" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="737.5" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="740.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="738.5" y="1011.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="741.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="738.5" y="995.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="741.5" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="740.5" y="979.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="743.5" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="740.5" y="963.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="743.5" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="740.5" y="947.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="743.5" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="740.5" y="931.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="743.5" y="942.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="740.5" y="915.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="743.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="740.5" y="899.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="743.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.09%)</title><rect x="741.5" y="1011.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="744.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$281/330580454.get (1 samples, 0.09%)</title><rect x="741.5" y="995.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="744.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$72 (1 samples, 0.09%)</title><rect x="741.5" y="979.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="744.5" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.09%)</title><rect x="742.5" y="1011.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="745.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="742.5" y="995.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="745.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$285/1617091865.get$Lambda (1 samples, 0.09%)</title><rect x="742.5" y="979.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="745.5" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.17%)</title><rect x="743.5" y="1011.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="746.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="744.5" y="995.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="747.5" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.09%)</title><rect x="744.5" y="979.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="747.5" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.68%)</title><rect x="745.5" y="1011.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="748.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.68%)</title><rect x="745.5" y="995.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="748.5" y="1006.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.51%)</title><rect x="745.5" y="979.0" width="6.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="748.5" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.17%)</title><rect x="751.5" y="979.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="754.5" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="753.5" y="1011.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="756.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (10 samples, 0.85%)</title><rect x="754.5" y="1011.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="757.5" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="757.5" y="995.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="760.5" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="757.5" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="760.5" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.51%)</title><rect x="758.5" y="995.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="761.5" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="763.6" y="979.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="766.6" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="763.6" y="963.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="766.6" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="763.6" y="947.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="766.6" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="763.6" y="931.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="766.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.60%)</title><rect x="764.6" y="1043.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="767.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.60%)</title><rect x="764.6" y="1027.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="767.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.60%)</title><rect x="764.6" y="1011.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="767.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$289/1788524137.accept (7 samples, 0.60%)</title><rect x="764.6" y="995.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="767.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (7 samples, 0.60%)</title><rect x="764.6" y="979.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="767.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="764.6" y="963.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="767.6" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="764.6" y="947.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.6" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="764.6" y="931.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="767.6" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="764.6" y="915.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="767.6" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="764.6" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="767.6" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="764.6" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.6" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="764.6" y="867.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="767.6" y="878.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="764.6" y="851.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="767.6" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="764.6" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="767.6" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (6 samples, 0.51%)</title><rect x="765.6" y="963.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="768.6" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (6 samples, 0.51%)</title><rect x="765.6" y="947.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="768.6" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="768.6" y="931.0" width="3.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="771.6" y="942.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="768.6" y="915.0" width="3.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="771.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.36%)</title><rect x="771.6" y="1059.0" width="16.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="774.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.36%)</title><rect x="771.6" y="1043.0" width="16.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="774.6" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.09%)</title><rect x="772.6" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="775.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.19%)</title><rect x="773.6" y="1027.0" width="14.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="776.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$293/1113469869.accept (14 samples, 1.19%)</title><rect x="773.6" y="1011.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="776.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (14 samples, 1.19%)</title><rect x="773.6" y="995.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="776.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/2097184527.complete (14 samples, 1.19%)</title><rect x="773.6" y="979.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="776.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (14 samples, 1.19%)</title><rect x="773.6" y="963.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="776.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1251198481.complete (14 samples, 1.19%)</title><rect x="773.6" y="947.0" width="14.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="776.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (14 samples, 1.19%)</title><rect x="773.6" y="931.0" width="14.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="776.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (14 samples, 1.19%)</title><rect x="773.6" y="915.0" width="14.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="776.6" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.19%)</title><rect x="773.6" y="899.0" width="14.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="776.6" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.17%)</title><rect x="785.6" y="883.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="788.6" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.17%)</title><rect x="785.6" y="867.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="788.6" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.17%)</title><rect x="785.6" y="851.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="788.6" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.68%)</title><rect x="787.6" y="1059.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="790.6" y="1070.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.68%)</title><rect x="787.6" y="1043.0" width="8.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="790.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="795.7" y="1075.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="798.7" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="795.7" y="1059.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="798.7" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="795.7" y="1043.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="798.7" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="795.7" y="1027.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="798.7" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="795.7" y="1011.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="798.7" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="795.7" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="798.7" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="795.7" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="798.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.09%)</title><rect x="796.7" y="1075.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="799.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (13 samples, 1.11%)</title><rect x="797.7" y="1123.0" width="13.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.11%)</title><rect x="797.7" y="1107.0" width="13.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.11%)</title><rect x="797.7" y="1091.0" width="13.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="800.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.11%)</title><rect x="797.7" y="1075.0" width="13.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="800.7" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.43%)</title><rect x="805.7" y="1059.0" width="5.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="808.7" y="1070.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="806.7" y="1043.0" width="4.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="809.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (228 samples, 19.39%)</title><rect x="810.7" y="1123.0" width="228.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="813.7" y="1134.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (228 samples, 19.39%)</title><rect x="810.7" y="1107.0" width="228.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="813.7" y="1118.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (212 samples, 18.03%)</title><rect x="822.8" y="1091.0" width="212.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="825.8" y="1102.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.09%)</title><rect x="833.8" y="1075.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="836.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="833.8" y="1059.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="836.8" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="833.8" y="1043.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="836.8" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="833.8" y="1027.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="836.8" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="833.8" y="1011.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="836.8" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="833.8" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="836.8" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="833.8" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="836.8" y="990.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="833.8" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="836.8" y="974.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.09%)</title><rect x="833.8" y="947.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="836.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 1.28%)</title><rect x="834.8" y="1075.0" width="15.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="837.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (18 samples, 1.53%)</title><rect x="849.8" y="1075.0" width="18.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 1.53%)</title><rect x="849.8" y="1059.0" width="18.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="852.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 1.53%)</title><rect x="849.8" y="1043.0" width="18.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 1.53%)</title><rect x="849.8" y="1027.0" width="18.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="852.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (167 samples, 14.20%)</title><rect x="867.9" y="1075.0" width="167.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="870.9" y="1086.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (167 samples, 14.20%)</title><rect x="867.9" y="1059.0" width="167.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="870.9" y="1070.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="875.9" y="1043.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="878.9" y="1054.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.17%)</title><rect x="876.9" y="1043.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="879.9" y="1054.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="878.9" y="1043.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="881.9" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="879.9" y="1043.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="882.9" y="1054.0"></text>
</g>
<g>
<title>Unsafe_Park (149 samples, 12.67%)</title><rect x="883.0" y="1043.0" width="149.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="886.0" y="1054.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="889.0" y="1027.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="892.0" y="1038.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 2.30%)</title><rect x="891.0" y="1027.0" width="27.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="894.0" y="1038.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.60%)</title><rect x="905.0" y="1011.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="908.0" y="1022.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.34%)</title><rect x="906.0" y="995.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="909.0" y="1006.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.17%)</title><rect x="908.0" y="979.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.0" y="990.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="910.1" y="995.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="913.1" y="1006.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="911.1" y="995.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="914.1" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.43%)</title><rect x="912.1" y="1011.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="915.1" y="1022.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="917.1" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="920.1" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="918.1" y="1027.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="921.1" y="1038.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.60%)</title><rect x="921.1" y="1027.0" width="7.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="924.1" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (25 samples, 2.13%)</title><rect x="928.1" y="1027.0" width="25.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="931.1" y="1038.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (61 samples, 5.19%)</title><rect x="953.2" y="1027.0" width="61.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="956.2" y="1038.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.34%)</title><rect x="1014.4" y="1027.0" width="4.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1017.4" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.09%)</title><rect x="1018.4" y="1027.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1021.4" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.51%)</title><rect x="1019.4" y="1027.0" width="6.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1022.4" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.26%)</title><rect x="1025.4" y="1027.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1028.4" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.26%)</title><rect x="1028.5" y="1027.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.5" y="1038.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="1031.5" y="1027.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1034.5" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.17%)</title><rect x="1032.5" y="1043.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1035.5" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1034.5" y="1043.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1037.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.17%)</title><rect x="1035.5" y="1091.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1038.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.17%)</title><rect x="1037.5" y="1091.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1040.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="1037.5" y="1075.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1040.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="1037.5" y="1059.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1040.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.17%)</title><rect x="1037.5" y="1043.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1040.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1039.5" y="1171.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1042.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1039.5" y="1155.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1042.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1039.5" y="1139.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1042.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.09%)</title><rect x="1039.5" y="1123.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1042.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.09%)</title><rect x="1039.5" y="1107.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1042.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.09%)</title><rect x="1039.5" y="1091.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1042.5" y="1102.0"></text>
</g>
<g>
<title>start_thread (149 samples, 12.67%)</title><rect x="1040.5" y="1171.0" width="149.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1043.5" y="1182.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (149 samples, 12.67%)</title><rect x="1040.5" y="1155.0" width="149.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1043.5" y="1166.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 1.87%)</title><rect x="1040.5" y="1139.0" width="22.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1043.5" y="1150.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (10 samples, 0.85%)</title><rect x="1040.5" y="1123.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1043.5" y="1134.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 0.85%)</title><rect x="1040.5" y="1107.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1043.5" y="1118.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.26%)</title><rect x="1040.5" y="1091.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1043.5" y="1102.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 0.60%)</title><rect x="1043.5" y="1091.0" width="7.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1046.5" y="1102.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 1.02%)</title><rect x="1050.5" y="1123.0" width="12.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1053.5" y="1134.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.09%)</title><rect x="1050.5" y="1107.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.5" y="1118.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1050.5" y="1091.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1053.5" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.60%)</title><rect x="1051.5" y="1107.0" width="7.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.5" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (6 samples, 0.51%)</title><rect x="1051.5" y="1091.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1054.5" y="1102.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (4 samples, 0.34%)</title><rect x="1051.5" y="1075.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1054.5" y="1086.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (4 samples, 0.34%)</title><rect x="1051.5" y="1059.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.5" y="1070.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (3 samples, 0.26%)</title><rect x="1051.5" y="1043.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.5" y="1054.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1054.5" y="1043.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.5" y="1054.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.17%)</title><rect x="1055.5" y="1075.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1058.5" y="1086.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1056.5" y="1059.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1059.5" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1057.6" y="1091.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.6" y="1102.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1057.6" y="1075.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1060.6" y="1086.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1057.6" y="1059.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.6" y="1070.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1057.6" y="1043.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.6" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.34%)</title><rect x="1058.6" y="1107.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.6" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.34%)</title><rect x="1058.6" y="1091.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.6" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.34%)</title><rect x="1058.6" y="1075.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.6" y="1086.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.34%)</title><rect x="1058.6" y="1059.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.6" y="1070.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.34%)</title><rect x="1058.6" y="1043.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.6" y="1054.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.34%)</title><rect x="1058.6" y="1027.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.6" y="1038.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.34%)</title><rect x="1058.6" y="1011.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.6" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1059.6" y="995.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.6" y="1006.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="1059.6" y="979.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1062.6" y="990.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.17%)</title><rect x="1060.6" y="995.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1063.6" y="1006.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (2 samples, 0.17%)</title><rect x="1060.6" y="979.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1063.6" y="990.0"></text>
</g>
<g>
<title>JavaThread::run() (125 samples, 10.63%)</title><rect x="1062.6" y="1139.0" width="125.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1065.6" y="1150.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (125 samples, 10.63%)</title><rect x="1062.6" y="1123.0" width="125.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1065.6" y="1134.0">JavaThread::thr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (125 samples, 10.63%)</title><rect x="1062.6" y="1107.0" width="125.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1065.6" y="1118.0">CompileBroker::..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (123 samples, 10.46%)</title><rect x="1062.6" y="1091.0" width="123.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1065.6" y="1102.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (122 samples, 10.37%)</title><rect x="1062.6" y="1075.0" width="122.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1065.6" y="1086.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (122 samples, 10.37%)</title><rect x="1062.6" y="1059.0" width="122.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.6" y="1070.0">Compile::Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (60 samples, 5.10%)</title><rect x="1062.6" y="1043.0" width="60.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1065.6" y="1054.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.34%)</title><rect x="1062.6" y="1027.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.6" y="1038.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.17%)</title><rect x="1062.6" y="1011.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.6" y="1022.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.17%)</title><rect x="1064.6" y="1011.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1067.6" y="1022.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.09%)</title><rect x="1064.6" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.6" y="1006.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.09%)</title><rect x="1064.6" y="979.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1067.6" y="990.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.09%)</title><rect x="1064.6" y="963.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1067.6" y="974.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="1064.6" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1067.6" y="958.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="1065.6" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1068.6" y="1006.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="1065.6" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1068.6" y="990.0"></text>
</g>
<g>
<title>membar_volatileNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1065.6" y="963.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1068.6" y="974.0"></text>
</g>
<g>
<title>Assembler::addl(Address, int) (1 samples, 0.09%)</title><rect x="1065.6" y="947.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1068.6" y="958.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1066.6" y="1027.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.6" y="1038.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1066.6" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.6" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1066.6" y="995.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.6" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1066.6" y="979.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.6" y="990.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.34%)</title><rect x="1067.6" y="1027.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1070.6" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.34%)</title><rect x="1067.6" y="1011.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.6" y="1022.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.17%)</title><rect x="1067.6" y="995.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.6" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1067.6" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.6" y="990.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1067.6" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1070.6" y="974.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1068.6" y="979.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1071.6" y="990.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.17%)</title><rect x="1069.6" y="995.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.6" y="1006.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.17%)</title><rect x="1069.6" y="979.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1072.6" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1069.6" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1072.6" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1069.6" y="947.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.6" y="958.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1069.6" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1072.6" y="942.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.09%)</title><rect x="1069.6" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.6" y="926.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1070.6" y="963.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.6" y="974.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1071.6" y="1027.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.6" y="1038.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.09%)</title><rect x="1071.6" y="1011.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1074.6" y="1022.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1071.6" y="995.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1074.6" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.26%)</title><rect x="1072.6" y="1027.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1075.6" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.26%)</title><rect x="1072.6" y="1011.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1075.6" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.17%)</title><rect x="1072.6" y="995.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1075.6" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.17%)</title><rect x="1072.6" y="979.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1075.6" y="990.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (1 samples, 0.09%)</title><rect x="1073.6" y="963.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1076.6" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1074.6" y="995.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (46 samples, 3.91%)</title><rect x="1075.6" y="1027.0" width="46.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.6" y="1038.0">Phas..</text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.09%)</title><rect x="1076.6" y="1011.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.6" y="1022.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.09%)</title><rect x="1077.6" y="1011.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1080.6" y="1022.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.17%)</title><rect x="1078.6" y="1011.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1081.6" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.17%)</title><rect x="1080.6" y="1011.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1083.6" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1080.6" y="995.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.09%)</title><rect x="1081.6" y="995.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.6" y="1006.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.09%)</title><rect x="1081.6" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1082.6" y="1011.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1082.6" y="995.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.6" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1082.6" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.51%)</title><rect x="1083.6" y="1011.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1086.6" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1087.7" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.7" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1087.7" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.7" y="990.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="1087.7" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.7" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1088.7" y="995.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.7" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 1.02%)</title><rect x="1089.7" y="1011.0" width="12.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.7" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.43%)</title><rect x="1093.7" y="995.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.7" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1097.7" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.7" y="990.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1098.7" y="995.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.7" y="1006.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.09%)</title><rect x="1099.7" y="995.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.7" y="1006.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1100.7" y="995.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1103.7" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1101.7" y="1011.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1104.7" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1101.7" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.7" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1101.7" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.43%)</title><rect x="1102.7" y="1011.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.7" y="1022.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.09%)</title><rect x="1105.7" y="995.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.7" y="1006.0"></text>
</g>
<g>
<title>rRegIOper::type() const (1 samples, 0.09%)</title><rect x="1106.7" y="995.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.7" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.51%)</title><rect x="1107.7" y="1011.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.7" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.17%)</title><rect x="1110.7" y="995.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.7" y="1006.0"></text>
</g>
<g>
<title>RegMask::num_registers(unsigned int) (1 samples, 0.09%)</title><rect x="1112.7" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.7" y="1006.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1113.7" y="1011.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.7" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1113.7" y="995.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.7" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1113.7" y="979.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.7" y="990.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1113.7" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.7" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1114.7" y="1011.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.17%)</title><rect x="1115.7" y="1011.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.7" y="1022.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1115.7" y="995.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.7" y="1006.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.09%)</title><rect x="1115.7" y="979.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.7" y="990.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1115.7" y="963.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.7" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1116.8" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.8" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.26%)</title><rect x="1117.8" y="1011.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.8" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1118.8" y="995.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.8" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1118.8" y="979.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.8" y="990.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.09%)</title><rect x="1120.8" y="1011.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.8" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1121.8" y="1027.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1124.8" y="1038.0"></text>
</g>
<g>
<title>Compile::Optimize() (51 samples, 4.34%)</title><rect x="1122.8" y="1043.0" width="51.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.8" y="1054.0">Compi..</text>
</g>
<g>
<title>AddLNode::Opcode() const (1 samples, 0.09%)</title><rect x="1122.8" y="1027.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.8" y="1038.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1123.8" y="1027.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.8" y="1038.0"></text>
</g>
<g>
<title>TypeNarrowOop::remove_speculative() const (1 samples, 0.09%)</title><rect x="1123.8" y="1011.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.8" y="1022.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1123.8" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.8" y="1006.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1123.8" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1124.8" y="1027.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1124.8" y="1011.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="963.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="947.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="915.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="899.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="867.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="835.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1124.8" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.8" y="798.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.09%)</title><rect x="1124.8" y="771.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.8" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.17%)</title><rect x="1125.8" y="1027.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.8" y="1038.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1126.8" y="1011.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.8" y="1022.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1126.8" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.8" y="1006.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1126.8" y="979.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.8" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1126.8" y="963.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (33 samples, 2.81%)</title><rect x="1127.8" y="1027.0" width="33.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.8" y="1038.0">Ph..</text>
</g>
<g>
<title>IfNode::pinned() const (1 samples, 0.09%)</title><rect x="1127.8" y="1011.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.17%)</title><rect x="1128.8" y="1011.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.26%)</title><rect x="1130.8" y="1011.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1132.8" y="995.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1132.8" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 1.79%)</title><rect x="1133.8" y="1011.0" width="21.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.8" y="1022.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (21 samples, 1.79%)</title><rect x="1133.8" y="995.0" width="21.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.8" y="1006.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1135.8" y="979.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (18 samples, 1.53%)</title><rect x="1136.8" y="979.0" width="18.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1152.9" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.9" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1153.9" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.9" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (4 samples, 0.34%)</title><rect x="1154.9" y="1011.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.09%)</title><rect x="1157.9" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1158.9" y="1011.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.09%)</title><rect x="1158.9" y="995.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1159.9" y="995.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.09%)</title><rect x="1159.9" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1160.9" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.85%)</title><rect x="1161.9" y="1027.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 0.85%)</title><rect x="1161.9" y="1011.0" width="10.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.9" y="1022.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1161.9" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.9" y="1006.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1161.9" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.9" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1161.9" y="963.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.9" y="974.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1161.9" y="947.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.9" y="958.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.26%)</title><rect x="1162.9" y="995.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.9" y="1006.0"></text>
</g>
<g>
<title>NodeHash::grow() (2 samples, 0.17%)</title><rect x="1163.9" y="979.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.17%)</title><rect x="1165.9" y="995.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.9" y="1006.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.17%)</title><rect x="1165.9" y="979.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.9" y="990.0"></text>
</g>
<g>
<title>NodeHash::grow() (2 samples, 0.17%)</title><rect x="1165.9" y="963.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.9" y="974.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.09%)</title><rect x="1167.9" y="995.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.9" y="1006.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.09%)</title><rect x="1167.9" y="979.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.9" y="990.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.09%)</title><rect x="1167.9" y="963.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.9" y="974.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.09%)</title><rect x="1167.9" y="947.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="958.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1168.9" y="995.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.17%)</title><rect x="1168.9" y="979.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="963.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="947.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.9" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="931.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.9" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="915.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.9" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="899.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="883.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="867.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="851.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.9" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="835.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.9" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="819.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="803.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.9" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="787.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="771.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.9" y="755.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.9" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.9" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.9" y="723.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.9" y="707.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.9" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1168.9" y="691.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.9" y="702.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1168.9" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.9" y="686.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1168.9" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.9" y="670.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1169.9" y="739.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.9" y="750.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1169.9" y="723.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.9" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_ptr_type(TypePtr::PTR) const (1 samples, 0.09%)</title><rect x="1170.9" y="995.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.9" y="1006.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1170.9" y="979.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.9" y="990.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1170.9" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.9" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.17%)</title><rect x="1171.9" y="1027.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1171.9" y="1011.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1171.9" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.9" y="1006.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1171.9" y="979.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.9" y="990.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1171.9" y="963.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.9" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_unlock_node(UnlockNode*) (1 samples, 0.09%)</title><rect x="1172.9" y="1011.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.9" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.77%)</title><rect x="1173.9" y="1043.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.77%)</title><rect x="1173.9" y="1027.0" width="9.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.77%)</title><rect x="1173.9" y="1011.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.77%)</title><rect x="1173.9" y="995.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.77%)</title><rect x="1173.9" y="979.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.77%)</title><rect x="1173.9" y="963.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.60%)</title><rect x="1173.9" y="947.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.60%)</title><rect x="1173.9" y="931.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.60%)</title><rect x="1173.9" y="915.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.60%)</title><rect x="1173.9" y="899.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.60%)</title><rect x="1173.9" y="883.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.60%)</title><rect x="1173.9" y="867.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="878.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1173.9" y="851.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.9" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1173.9" y="835.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.9" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1173.9" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.9" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1173.9" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1173.9" y="787.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1173.9" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1173.9" y="755.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1173.9" y="739.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.9" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1173.9" y="723.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.9" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1173.9" y="707.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.9" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1173.9" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.9" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1173.9" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.9" y="686.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1173.9" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.9" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1173.9" y="643.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="654.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1173.9" y="627.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="638.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1173.9" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.9" y="622.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1173.9" y="595.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1173.9" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="590.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.09%)</title><rect x="1173.9" y="563.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="574.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.09%)</title><rect x="1173.9" y="547.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.9" y="851.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1174.9" y="835.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1174.9" y="819.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1174.9" y="803.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1174.9" y="787.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1174.9" y="771.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.9" y="755.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.9" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1174.9" y="739.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1174.9" y="723.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1174.9" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1174.9" y="691.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1174.9" y="675.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.9" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.9" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1174.9" y="643.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1174.9" y="627.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1174.9" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1174.9" y="595.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1174.9" y="579.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.9" y="590.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.09%)</title><rect x="1174.9" y="563.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.9" y="574.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.09%)</title><rect x="1174.9" y="547.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.9" y="558.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.09%)</title><rect x="1174.9" y="531.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="542.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.09%)</title><rect x="1174.9" y="515.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.9" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.43%)</title><rect x="1176.0" y="851.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.43%)</title><rect x="1176.0" y="835.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.43%)</title><rect x="1176.0" y="819.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.43%)</title><rect x="1176.0" y="803.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.43%)</title><rect x="1176.0" y="787.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.43%)</title><rect x="1176.0" y="771.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.43%)</title><rect x="1176.0" y="755.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.43%)</title><rect x="1176.0" y="739.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.43%)</title><rect x="1176.0" y="723.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.43%)</title><rect x="1176.0" y="707.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.43%)</title><rect x="1176.0" y="691.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.43%)</title><rect x="1176.0" y="675.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.43%)</title><rect x="1176.0" y="659.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.0" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.0" y="643.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.0" y="654.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.09%)</title><rect x="1176.0" y="627.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="638.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="622.0"></text>
</g>
<g>
<title>ciMethodHandle::get_vmtarget() const (1 samples, 0.09%)</title><rect x="1176.0" y="595.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1177.0" y="643.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1177.0" y="627.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1177.0" y="611.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1177.0" y="595.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1177.0" y="579.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1177.0" y="563.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1177.0" y="547.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1177.0" y="531.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1177.0" y="515.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1177.0" y="499.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1177.0" y="483.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1177.0" y="467.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.0" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.0" y="435.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.0" y="419.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.0" y="403.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.0" y="387.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1177.0" y="371.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1177.0" y="355.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.0" y="366.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1177.0" y="339.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.0" y="350.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1177.0" y="323.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.0" y="334.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.09%)</title><rect x="1177.0" y="307.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.0" y="318.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.09%)</title><rect x="1177.0" y="291.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.0" y="302.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.09%)</title><rect x="1177.0" y="275.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.0" y="286.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1177.0" y="259.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="270.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1177.0" y="243.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1180.0" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.0" y="451.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.0" y="435.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.0" y="419.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.0" y="403.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.0" y="387.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.0" y="371.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.0" y="355.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.0" y="339.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.0" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1178.0" y="323.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.0" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1178.0" y="307.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.0" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1178.0" y="291.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.0" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1178.0" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.0" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1178.0" y="259.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1178.0" y="243.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1178.0" y="227.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.0" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1178.0" y="211.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.0" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1178.0" y="195.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1178.0" y="179.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.0" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.0" y="163.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.0" y="147.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.0" y="158.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1178.0" y="131.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="142.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1178.0" y="115.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.0" y="126.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.0" y="99.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="110.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1178.0" y="83.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.0" y="94.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.09%)</title><rect x="1178.0" y="67.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.0" y="78.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.09%)</title><rect x="1178.0" y="51.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="62.0"></text>
</g>
<g>
<title>Symbol::equals(char const*, int) const (1 samples, 0.09%)</title><rect x="1178.0" y="35.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1179.0" y="563.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1179.0" y="547.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="558.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1179.0" y="531.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.0" y="542.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1179.0" y="515.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="526.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1179.0" y="499.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="510.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1179.0" y="483.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.0" y="494.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1179.0" y="467.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="478.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.09%)</title><rect x="1179.0" y="451.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.0" y="462.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.09%)</title><rect x="1179.0" y="435.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.0" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.0" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.0" y="627.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.0" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.0" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1180.0" y="595.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.0" y="606.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1180.0" y="579.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="590.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.09%)</title><rect x="1180.0" y="563.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.0" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1181.0" y="947.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1181.0" y="931.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.0" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1181.0" y="915.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1181.0" y="899.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1181.0" y="883.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1181.0" y="867.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1181.0" y="851.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1181.0" y="835.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1181.0" y="819.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1181.0" y="803.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1181.0" y="787.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1181.0" y="771.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1181.0" y="755.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1181.0" y="739.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1181.0" y="723.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1181.0" y="707.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1181.0" y="691.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1181.0" y="675.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1181.0" y="659.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1181.0" y="643.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1181.0" y="627.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1181.0" y="611.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1181.0" y="595.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1181.0" y="579.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1181.0" y="563.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.0" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.0" y="547.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1181.0" y="531.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1181.0" y="515.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1181.0" y="499.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.0" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1181.0" y="483.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.0" y="467.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.0" y="451.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1181.0" y="435.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1181.0" y="419.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1181.0" y="403.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.0" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.0" y="387.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.0" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="382.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1181.0" y="355.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="366.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1181.0" y="339.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.0" y="350.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.0" y="323.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.0" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.0" y="531.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.0" y="515.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.0" y="499.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.0" y="483.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.0" y="467.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.0" y="451.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.0" y="435.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.0" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.0" y="403.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.0" y="387.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="398.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.09%)</title><rect x="1182.0" y="371.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.0" y="382.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.09%)</title><rect x="1182.0" y="355.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.0" y="366.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.17%)</title><rect x="1183.0" y="1043.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="1054.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1184.0" y="1027.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="1038.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 0.09%)</title><rect x="1185.0" y="1075.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.0" y="1086.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (1 samples, 0.09%)</title><rect x="1185.0" y="1059.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.0" y="1070.0"></text>
</g>
<g>
<title>__strchr_sse42 (1 samples, 0.09%)</title><rect x="1185.0" y="1043.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1188.0" y="1054.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.17%)</title><rect x="1186.0" y="1091.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="1102.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.17%)</title><rect x="1186.0" y="1075.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.0" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.17%)</title><rect x="1186.0" y="1059.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.0" y="1070.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.17%)</title><rect x="1186.0" y="1043.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="1054.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1187.0" y="1027.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.0" y="1038.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.09%)</title><rect x="1187.0" y="1011.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.0" y="1022.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1188.0" y="1139.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.0" y="1150.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1188.0" y="1123.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.0" y="1134.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.17%)</title><rect x="1188.0" y="1107.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.0" y="1118.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.17%)</title><rect x="1188.0" y="1091.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.0" y="1102.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.17%)</title><rect x="1188.0" y="1075.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.0" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.17%)</title><rect x="1188.0" y="1059.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.0" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_epilogue(bool) (1 samples, 0.09%)</title><rect x="1188.0" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="1054.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize_all_tlabs() (1 samples, 0.09%)</title><rect x="1188.0" y="1027.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.0" y="1038.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::resize() (1 samples, 0.09%)</title><rect x="1188.0" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.0" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.09%)</title><rect x="1189.0" y="1043.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.0" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::ensure_parsability(bool) (1 samples, 0.09%)</title><rect x="1189.0" y="1027.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="1038.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool) (1 samples, 0.09%)</title><rect x="1189.0" y="1011.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.0" y="1022.0"></text>
</g>
</g>
</svg>
