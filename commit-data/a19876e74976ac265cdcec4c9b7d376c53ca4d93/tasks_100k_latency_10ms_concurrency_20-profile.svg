<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1221"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1221"> </text>
<g id="frames">
<g>
<title>all (359 samples, 100.00%)</title><rect x="10.0" y="1187.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.28%)</title><rect x="10.0" y="1171.0" width="3.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap(JavaThread*, int) (1 samples, 0.28%)</title><rect x="10.0" y="1155.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::reprofile(ScopeDesc*, bool) (1 samples, 0.28%)</title><rect x="10.0" y="1139.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.28%)</title><rect x="13.3" y="1171.0" width="3.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="16.3" y="1182.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.28%)</title><rect x="13.3" y="1155.0" width="3.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="16.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (25 samples, 6.96%)</title><rect x="16.6" y="1171.0" width="82.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.6" y="1182.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (25 samples, 6.96%)</title><rect x="16.6" y="1155.0" width="82.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.6" y="1166.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.28%)</title><rect x="16.6" y="1139.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.28%)</title><rect x="16.6" y="1123.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.28%)</title><rect x="16.6" y="1107.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="16.6" y="1091.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.28%)</title><rect x="16.6" y="1075.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="16.6" y="1059.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.28%)</title><rect x="16.6" y="1043.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.28%)</title><rect x="16.6" y="1027.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.28%)</title><rect x="16.6" y="1011.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.6" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.28%)</title><rect x="16.6" y="995.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.28%)</title><rect x="16.6" y="979.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$267/2145213948.apply (1 samples, 0.28%)</title><rect x="16.6" y="963.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.topicPartition (1 samples, 0.28%)</title><rect x="16.6" y="947.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.6" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.28%)</title><rect x="16.6" y="931.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="19.6" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.28%)</title><rect x="16.6" y="915.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.6" y="926.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.28%)</title><rect x="16.6" y="899.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.6" y="910.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.28%)</title><rect x="16.6" y="883.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.28%)</title><rect x="19.9" y="1139.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.9" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="19.9" y="1123.0" width="3.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="22.9" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="19.9" y="1107.0" width="3.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="22.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (7 samples, 1.95%)</title><rect x="23.1" y="1139.0" width="23.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.1" y="1150.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$263/857133305.accept (5 samples, 1.39%)</title><rect x="23.1" y="1123.0" width="16.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 1.39%)</title><rect x="23.1" y="1107.0" width="16.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.56%)</title><rect x="23.1" y="1091.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.56%)</title><rect x="23.1" y="1075.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.56%)</title><rect x="23.1" y="1059.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.56%)</title><rect x="23.1" y="1043.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.56%)</title><rect x="23.1" y="1027.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.56%)</title><rect x="23.1" y="1011.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.28%)</title><rect x="23.1" y="995.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.28%)</title><rect x="23.1" y="979.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.28%)</title><rect x="23.1" y="963.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.28%)</title><rect x="26.4" y="995.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.28%)</title><rect x="26.4" y="979.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.28%)</title><rect x="26.4" y="963.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.28%)</title><rect x="26.4" y="947.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (3 samples, 0.84%)</title><rect x="29.7" y="1091.0" width="9.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.84%)</title><rect x="29.7" y="1075.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.7" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="36.3" y="1059.0" width="3.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="39.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.56%)</title><rect x="39.6" y="1123.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.56%)</title><rect x="39.6" y="1107.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.56%)</title><rect x="39.6" y="1091.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.56%)</title><rect x="39.6" y="1075.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.46%)</title><rect x="46.2" y="1139.0" width="52.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.2" y="1150.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.46%)</title><rect x="46.2" y="1123.0" width="52.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.2" y="1134.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 2.51%)</title><rect x="46.2" y="1107.0" width="29.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.2" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.28%)</title><rect x="46.2" y="1091.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.11%)</title><rect x="49.4" y="1091.0" width="13.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.11%)</title><rect x="49.4" y="1075.0" width="13.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.11%)</title><rect x="49.4" y="1059.0" width="13.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.28%)</title><rect x="49.4" y="1043.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.28%)</title><rect x="49.4" y="1027.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.28%)</title><rect x="49.4" y="1011.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.28%)</title><rect x="49.4" y="995.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.28%)</title><rect x="49.4" y="979.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.28%)</title><rect x="49.4" y="963.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.28%)</title><rect x="49.4" y="947.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (1 samples, 0.28%)</title><rect x="49.4" y="931.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="52.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (1 samples, 0.28%)</title><rect x="49.4" y="915.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.28%)</title><rect x="49.4" y="899.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="52.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.84%)</title><rect x="52.7" y="1043.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.28%)</title><rect x="52.7" y="1027.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.56%)</title><rect x="56.0" y="1027.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.56%)</title><rect x="56.0" y="1011.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.56%)</title><rect x="56.0" y="995.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="59.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.56%)</title><rect x="56.0" y="979.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.56%)</title><rect x="56.0" y="963.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.56%)</title><rect x="56.0" y="947.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="59.0" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.56%)</title><rect x="56.0" y="931.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.0" y="942.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="56.0" y="915.0" width="3.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="59.0" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="59.3" y="915.0" width="3.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="62.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.11%)</title><rect x="62.6" y="1091.0" width="13.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.84%)</title><rect x="62.6" y="1075.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.56%)</title><rect x="62.6" y="1059.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="65.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.56%)</title><rect x="62.6" y="1043.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.28%)</title><rect x="62.6" y="1027.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.28%)</title><rect x="62.6" y="1011.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.28%)</title><rect x="62.6" y="995.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="65.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.28%)</title><rect x="62.6" y="979.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="65.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.28%)</title><rect x="62.6" y="963.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.28%)</title><rect x="62.6" y="947.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.28%)</title><rect x="62.6" y="931.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.28%)</title><rect x="62.6" y="915.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.28%)</title><rect x="65.9" y="1027.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="68.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.28%)</title><rect x="65.9" y="1011.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.28%)</title><rect x="65.9" y="995.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.9" y="1006.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.28%)</title><rect x="65.9" y="979.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.28%)</title><rect x="69.2" y="1059.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.28%)</title><rect x="69.2" y="1043.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="69.2" y="1027.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="69.2" y="1011.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="69.2" y="995.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.28%)</title><rect x="69.2" y="979.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.28%)</title><rect x="72.5" y="1075.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.28%)</title><rect x="72.5" y="1059.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.28%)</title><rect x="72.5" y="1043.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.5" y="1054.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.28%)</title><rect x="72.5" y="1027.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.28%)</title><rect x="72.5" y="1011.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.56%)</title><rect x="75.7" y="1107.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.28%)</title><rect x="75.7" y="1091.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.28%)</title><rect x="75.7" y="1075.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="78.7" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.28%)</title><rect x="75.7" y="1059.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="75.7" y="1043.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="78.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.28%)</title><rect x="75.7" y="1027.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.28%)</title><rect x="75.7" y="1011.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="75.7" y="995.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.7" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.28%)</title><rect x="75.7" y="979.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.7" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.28%)</title><rect x="75.7" y="963.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.28%)</title><rect x="79.0" y="1091.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="82.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.28%)</title><rect x="79.0" y="1075.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="82.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.rejoinNeededOrPending (1 samples, 0.28%)</title><rect x="79.0" y="1059.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="82.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.56%)</title><rect x="82.3" y="1107.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.28%)</title><rect x="82.3" y="1091.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="85.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.28%)</title><rect x="82.3" y="1075.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="85.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.28%)</title><rect x="82.3" y="1059.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.28%)</title><rect x="82.3" y="1043.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.28%)</title><rect x="82.3" y="1027.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="85.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.28%)</title><rect x="82.3" y="1011.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="85.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.28%)</title><rect x="82.3" y="995.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.28%)</title><rect x="82.3" y="979.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="85.3" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.28%)</title><rect x="82.3" y="963.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.3" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.28%)</title><rect x="82.3" y="947.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="85.3" y="958.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.28%)</title><rect x="82.3" y="931.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.3" y="942.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.28%)</title><rect x="82.3" y="915.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.3" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.28%)</title><rect x="82.3" y="899.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="85.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.28%)</title><rect x="85.6" y="1091.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="88.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.28%)</title><rect x="85.6" y="1075.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="88.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.28%)</title><rect x="85.6" y="1059.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.28%)</title><rect x="85.6" y="1043.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="88.6" y="1054.0"></text>
</g>
<g>
<title>java/util/EnumMap.get (1 samples, 0.28%)</title><rect x="85.6" y="1027.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="88.6" y="1038.0"></text>
</g>
<g>
<title>java/util/EnumMap.isValidKey (1 samples, 0.28%)</title><rect x="85.6" y="1011.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="88.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.84%)</title><rect x="88.9" y="1107.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.84%)</title><rect x="88.9" y="1091.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="91.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.56%)</title><rect x="88.9" y="1075.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.9" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.28%)</title><rect x="88.9" y="1059.0" width="3.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="91.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$252/1530378516.accept (1 samples, 0.28%)</title><rect x="92.2" y="1059.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.28%)</title><rect x="92.2" y="1043.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="95.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.28%)</title><rect x="92.2" y="1027.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="95.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.28%)</title><rect x="92.2" y="1011.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="95.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.28%)</title><rect x="92.2" y="995.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.28%)</title><rect x="95.5" y="1075.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.28%)</title><rect x="95.5" y="1059.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.28%)</title><rect x="95.5" y="1043.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.28%)</title><rect x="95.5" y="1027.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.28%)</title><rect x="95.5" y="1011.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="98.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.28%)</title><rect x="95.5" y="995.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="98.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.28%)</title><rect x="95.5" y="979.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.5" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.28%)</title><rect x="95.5" y="963.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="98.5" y="974.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.28%)</title><rect x="95.5" y="947.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="98.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.28%)</title><rect x="95.5" y="931.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.5" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.28%)</title><rect x="95.5" y="915.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$254/372274781.test (1 samples, 0.28%)</title><rect x="95.5" y="899.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="98.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.28%)</title><rect x="95.5" y="883.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="98.5" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.run (229 samples, 63.79%)</title><rect x="98.7" y="1171.0" width="752.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.7" y="1182.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (229 samples, 63.79%)</title><rect x="98.7" y="1155.0" width="752.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="101.7" y="1166.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (229 samples, 63.79%)</title><rect x="98.7" y="1139.0" width="752.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.7" y="1150.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/376272448.run (215 samples, 59.89%)</title><rect x="98.7" y="1123.0" width="706.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="101.7" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/376272448.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (215 samples, 59.89%)</title><rect x="98.7" y="1107.0" width="706.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.7" y="1118.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (215 samples, 59.89%)</title><rect x="98.7" y="1091.0" width="706.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.7" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (212 samples, 59.05%)</title><rect x="98.7" y="1075.0" width="696.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.7" y="1086.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.56%)</title><rect x="115.2" y="1059.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="118.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (42 samples, 11.70%)</title><rect x="121.8" y="1059.0" width="138.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="124.8" y="1070.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (42 samples, 11.70%)</title><rect x="121.8" y="1043.0" width="138.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="124.8" y="1054.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (42 samples, 11.70%)</title><rect x="121.8" y="1027.0" width="138.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="124.8" y="1038.0">com/linecorp/deca..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="121.8" y="1011.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="124.8" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="121.8" y="995.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="124.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="121.8" y="979.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="124.8" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="121.8" y="963.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="124.8" y="974.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.28%)</title><rect x="121.8" y="947.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="124.8" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.28%)</title><rect x="121.8" y="931.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="124.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (41 samples, 11.42%)</title><rect x="125.0" y="1011.0" width="134.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.0" y="1022.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (41 samples, 11.42%)</title><rect x="125.0" y="995.0" width="134.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="128.0" y="1006.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (41 samples, 11.42%)</title><rect x="125.0" y="979.0" width="134.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="128.0" y="990.0">com/fasterxml/jac..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="125.0" y="963.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="128.0" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="125.0" y="947.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="128.0" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="125.0" y="931.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="128.0" y="942.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.28%)</title><rect x="125.0" y="915.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="128.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (17 samples, 4.74%)</title><rect x="128.3" y="963.0" width="55.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="131.3" y="974.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="138.2" y="947.0" width="3.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="141.2" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="138.2" y="931.0" width="3.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="141.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 1.95%)</title><rect x="141.5" y="947.0" width="23.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="144.5" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 1.67%)</title><rect x="141.5" y="931.0" width="19.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.28%)</title><rect x="148.1" y="915.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="151.1" y="926.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.28%)</title><rect x="148.1" y="899.0" width="3.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="151.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.84%)</title><rect x="151.3" y="915.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.3" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.84%)</title><rect x="151.3" y="899.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="154.3" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.84%)</title><rect x="151.3" y="883.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="154.3" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.84%)</title><rect x="151.3" y="867.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.3" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.84%)</title><rect x="151.3" y="851.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="154.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.28%)</title><rect x="161.2" y="931.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="164.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 1.67%)</title><rect x="164.5" y="947.0" width="19.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 1.67%)</title><rect x="164.5" y="931.0" width="19.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="167.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.28%)</title><rect x="174.3" y="915.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="177.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.28%)</title><rect x="174.3" y="899.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.28%)</title><rect x="177.6" y="915.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="180.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.28%)</title><rect x="177.6" y="899.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.28%)</title><rect x="177.6" y="883.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="180.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.28%)</title><rect x="180.9" y="915.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.9" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="180.9" y="899.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="183.9" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="180.9" y="883.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="183.9" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="180.9" y="867.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="183.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 5.29%)</title><rect x="184.2" y="963.0" width="62.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="187.2" y="974.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.28%)</title><rect x="184.2" y="947.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.56%)</title><rect x="187.5" y="947.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.56%)</title><rect x="187.5" y="931.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="190.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.28%)</title><rect x="190.8" y="915.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.28%)</title><rect x="190.8" y="899.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="193.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.56%)</title><rect x="194.1" y="947.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.56%)</title><rect x="194.1" y="931.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 3.90%)</title><rect x="200.6" y="947.0" width="46.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.6" y="958.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.56%)</title><rect x="200.6" y="931.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.28%)</title><rect x="203.9" y="915.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="206.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.28%)</title><rect x="203.9" y="899.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.28%)</title><rect x="207.2" y="931.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 3.06%)</title><rect x="210.5" y="931.0" width="36.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="213.5" y="942.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 3.06%)</title><rect x="210.5" y="915.0" width="36.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.5" y="926.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.28%)</title><rect x="213.8" y="899.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 2.51%)</title><rect x="217.1" y="899.0" width="29.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="220.1" y="910.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.84%)</title><rect x="217.1" y="883.0" width="9.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.28%)</title><rect x="220.4" y="867.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.28%)</title><rect x="220.4" y="851.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.28%)</title><rect x="220.4" y="835.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.28%)</title><rect x="223.6" y="867.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.28%)</title><rect x="226.9" y="883.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.28%)</title><rect x="226.9" y="867.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.28%)</title><rect x="226.9" y="851.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.28%)</title><rect x="226.9" y="835.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.9" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.28%)</title><rect x="226.9" y="819.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.28%)</title><rect x="230.2" y="883.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 1.11%)</title><rect x="233.5" y="883.0" width="13.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 1.11%)</title><rect x="233.5" y="867.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 1.11%)</title><rect x="233.5" y="851.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="236.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 1.11%)</title><rect x="233.5" y="835.0" width="13.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.5" y="846.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 1.11%)</title><rect x="233.5" y="819.0" width="13.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.5" y="830.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.56%)</title><rect x="240.1" y="803.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.1" y="814.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (2 samples, 0.56%)</title><rect x="240.1" y="787.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.11%)</title><rect x="246.7" y="963.0" width="13.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.28%)</title><rect x="246.7" y="947.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.84%)</title><rect x="249.9" y="947.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.84%)</title><rect x="249.9" y="931.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.84%)</title><rect x="249.9" y="915.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="252.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.84%)</title><rect x="249.9" y="899.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (148 samples, 41.23%)</title><rect x="259.8" y="1059.0" width="486.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.8" y="1070.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (26 samples, 7.24%)</title><rect x="259.8" y="1043.0" width="85.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.8" y="1054.0">com/lineco..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (22 samples, 6.13%)</title><rect x="273.0" y="1027.0" width="72.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="276.0" y="1038.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (16 samples, 4.46%)</title><rect x="292.7" y="1011.0" width="52.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="295.7" y="1022.0">ch/qo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (16 samples, 4.46%)</title><rect x="292.7" y="995.0" width="52.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.7" y="1006.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 3.34%)</title><rect x="305.8" y="979.0" width="39.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.8" y="990.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 1.67%)</title><rect x="319.0" y="963.0" width="19.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="322.0" y="974.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.56%)</title><rect x="338.7" y="963.0" width="6.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="341.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.84%)</title><rect x="345.3" y="1043.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (25 samples, 6.96%)</title><rect x="355.1" y="1043.0" width="82.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.1" y="1054.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (25 samples, 6.96%)</title><rect x="355.1" y="1027.0" width="82.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.1" y="1038.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (12 samples, 3.34%)</title><rect x="355.1" y="1011.0" width="39.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.1" y="1022.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (12 samples, 3.34%)</title><rect x="355.1" y="995.0" width="39.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.1" y="1006.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 1.95%)</title><rect x="361.7" y="979.0" width="23.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.7" y="990.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 1.95%)</title><rect x="361.7" y="963.0" width="23.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="364.7" y="974.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 1.95%)</title><rect x="361.7" y="947.0" width="23.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="364.7" y="958.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 1.95%)</title><rect x="361.7" y="931.0" width="23.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.7" y="942.0">j..</text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.28%)</title><rect x="371.6" y="915.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="374.6" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.56%)</title><rect x="374.8" y="915.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="377.8" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.28%)</title><rect x="374.8" y="899.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="377.8" y="910.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.28%)</title><rect x="374.8" y="883.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="377.8" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.28%)</title><rect x="378.1" y="899.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="381.1" y="910.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.28%)</title><rect x="381.4" y="915.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="384.4" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.84%)</title><rect x="384.7" y="979.0" width="9.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="387.7" y="990.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.56%)</title><rect x="394.6" y="1011.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.56%)</title><rect x="394.6" y="995.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="397.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.56%)</title><rect x="394.6" y="979.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="397.6" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 3.06%)</title><rect x="401.1" y="1011.0" width="36.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="404.1" y="1022.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 3.06%)</title><rect x="401.1" y="995.0" width="36.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="404.1" y="1006.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.28%)</title><rect x="401.1" y="979.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.1" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.28%)</title><rect x="401.1" y="963.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.28%)</title><rect x="401.1" y="947.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="404.1" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.28%)</title><rect x="401.1" y="931.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.1" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.28%)</title><rect x="404.4" y="979.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.28%)</title><rect x="404.4" y="963.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="407.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.28%)</title><rect x="404.4" y="947.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="407.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.28%)</title><rect x="404.4" y="931.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="407.4" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.28%)</title><rect x="404.4" y="915.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.4" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 2.51%)</title><rect x="407.7" y="979.0" width="29.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="410.7" y="990.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 2.51%)</title><rect x="407.7" y="963.0" width="29.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="410.7" y="974.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 2.23%)</title><rect x="411.0" y="947.0" width="26.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="414.0" y="958.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.56%)</title><rect x="417.6" y="931.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="420.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.84%)</title><rect x="424.2" y="931.0" width="9.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="427.2" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="430.7" y="915.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="433.7" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="430.7" y="899.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="433.7" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.28%)</title><rect x="430.7" y="883.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="433.7" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.28%)</title><rect x="430.7" y="867.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="433.7" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.28%)</title><rect x="430.7" y="851.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="433.7" y="862.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.28%)</title><rect x="434.0" y="931.0" width="3.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="437.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (85 samples, 23.68%)</title><rect x="437.3" y="1043.0" width="279.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="440.3" y="1054.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (85 samples, 23.68%)</title><rect x="437.3" y="1027.0" width="279.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="440.3" y="1038.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1800409160.process (74 samples, 20.61%)</title><rect x="453.7" y="1011.0" width="243.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="456.7" y="1022.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (73 samples, 20.33%)</title><rect x="453.7" y="995.0" width="240.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="456.7" y="1006.0">com/linecorp/decaton/benchmark/D..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (73 samples, 20.33%)</title><rect x="453.7" y="979.0" width="240.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="456.7" y="990.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.56%)</title><rect x="460.3" y="963.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="463.3" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.56%)</title><rect x="460.3" y="947.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.3" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.56%)</title><rect x="460.3" y="931.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.3" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.56%)</title><rect x="460.3" y="915.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="463.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.56%)</title><rect x="460.3" y="899.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="463.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.28%)</title><rect x="463.6" y="883.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="466.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (69 samples, 19.22%)</title><rect x="466.9" y="963.0" width="226.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="469.9" y="974.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>java/lang/Thread.sleep (69 samples, 19.22%)</title><rect x="466.9" y="947.0" width="226.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="469.9" y="958.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (61 samples, 16.99%)</title><rect x="483.3" y="931.0" width="200.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="486.3" y="942.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.39%)</title><rect x="499.7" y="915.0" width="16.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="502.7" y="926.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.28%)</title><rect x="516.2" y="915.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="519.2" y="926.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 1.39%)</title><rect x="519.5" y="915.0" width="16.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="522.5" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.28%)</title><rect x="535.9" y="915.0" width="3.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="538.9" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="535.9" y="899.0" width="3.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="538.9" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.56%)</title><rect x="539.2" y="915.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="542.2" y="926.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (42 samples, 11.70%)</title><rect x="545.8" y="915.0" width="138.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="548.8" y="926.0">os::sleep(Thread*..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.11%)</title><rect x="562.2" y="899.0" width="13.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="565.2" y="910.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.84%)</title><rect x="565.5" y="883.0" width="9.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="568.5" y="894.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.28%)</title><rect x="575.3" y="899.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="578.3" y="910.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.11%)</title><rect x="578.6" y="899.0" width="13.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="581.6" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.28%)</title><rect x="591.8" y="899.0" width="3.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="594.8" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (21 samples, 5.85%)</title><rect x="595.1" y="899.0" width="69.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="598.1" y="910.0">__pthre..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.11%)</title><rect x="664.1" y="899.0" width="13.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="667.1" y="910.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.28%)</title><rect x="677.2" y="899.0" width="3.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="680.2" y="910.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.28%)</title><rect x="680.5" y="899.0" width="3.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="683.5" y="910.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.56%)</title><rect x="683.8" y="931.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="686.8" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.28%)</title><rect x="690.4" y="931.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="693.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.28%)</title><rect x="693.7" y="995.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="696.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.28%)</title><rect x="697.0" y="1011.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="700.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.28%)</title><rect x="700.3" y="1011.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="703.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.28%)</title><rect x="700.3" y="995.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="703.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.56%)</title><rect x="703.5" y="1011.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="706.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.56%)</title><rect x="703.5" y="995.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="706.5" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.28%)</title><rect x="706.8" y="979.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="709.8" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.28%)</title><rect x="710.1" y="1011.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="713.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.28%)</title><rect x="713.4" y="1011.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="716.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 2.51%)</title><rect x="716.7" y="1043.0" width="29.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="719.7" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.56%)</title><rect x="736.4" y="1027.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="739.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.56%)</title><rect x="736.4" y="1011.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="739.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/1388365623.accept (2 samples, 0.56%)</title><rect x="736.4" y="995.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (2 samples, 0.56%)</title><rect x="736.4" y="979.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="739.4" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.56%)</title><rect x="736.4" y="963.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="739.4" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.56%)</title><rect x="736.4" y="947.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="739.4" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.28%)</title><rect x="743.0" y="1027.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="746.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.28%)</title><rect x="746.3" y="1059.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="749.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.28%)</title><rect x="746.3" y="1043.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="749.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/1132478365.get$Lambda (1 samples, 0.28%)</title><rect x="746.3" y="1027.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="749.3" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.28%)</title><rect x="746.3" y="1011.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="749.3" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.28%)</title><rect x="746.3" y="995.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="749.3" y="1006.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.28%)</title><rect x="746.3" y="979.0" width="3.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="749.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 3.90%)</title><rect x="749.6" y="1059.0" width="46.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="752.6" y="1070.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 3.90%)</title><rect x="749.6" y="1043.0" width="46.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="752.6" y="1054.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 3.62%)</title><rect x="752.8" y="1027.0" width="42.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="755.8" y="1038.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/1132478365.accept (13 samples, 3.62%)</title><rect x="752.8" y="1011.0" width="42.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="755.8" y="1022.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (13 samples, 3.62%)</title><rect x="752.8" y="995.0" width="42.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="755.8" y="1006.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1473914317.complete (13 samples, 3.62%)</title><rect x="752.8" y="979.0" width="42.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="755.8" y="990.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (13 samples, 3.62%)</title><rect x="752.8" y="963.0" width="42.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="755.8" y="974.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1538409357.complete (13 samples, 3.62%)</title><rect x="752.8" y="947.0" width="42.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="755.8" y="958.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (13 samples, 3.62%)</title><rect x="752.8" y="931.0" width="42.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="755.8" y="942.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (13 samples, 3.62%)</title><rect x="752.8" y="915.0" width="42.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="755.8" y="926.0">com/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 3.62%)</title><rect x="752.8" y="899.0" width="42.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.8" y="910.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 3.62%)</title><rect x="752.8" y="883.0" width="42.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="755.8" y="894.0">ch/q..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (3 samples, 0.84%)</title><rect x="795.6" y="1075.0" width="9.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="798.6" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.56%)</title><rect x="798.9" y="1059.0" width="6.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="801.9" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.28%)</title><rect x="802.1" y="1043.0" width="3.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="805.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.28%)</title><rect x="805.4" y="1123.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="808.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.28%)</title><rect x="805.4" y="1107.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="808.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.28%)</title><rect x="805.4" y="1091.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="808.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.28%)</title><rect x="805.4" y="1075.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="808.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 3.62%)</title><rect x="808.7" y="1123.0" width="42.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="811.7" y="1134.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (12 samples, 3.34%)</title><rect x="812.0" y="1107.0" width="39.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="815.0" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 1.11%)</title><rect x="812.0" y="1091.0" width="13.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="815.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 1.11%)</title><rect x="812.0" y="1075.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="815.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.11%)</title><rect x="812.0" y="1059.0" width="13.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="815.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.11%)</title><rect x="812.0" y="1043.0" width="13.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="815.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.11%)</title><rect x="812.0" y="1027.0" width="13.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="815.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.56%)</title><rect x="825.2" y="1091.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="828.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.56%)</title><rect x="825.2" y="1075.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="828.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.56%)</title><rect x="825.2" y="1059.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="828.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.28%)</title><rect x="828.4" y="1043.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="831.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 1.67%)</title><rect x="831.7" y="1091.0" width="19.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="834.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 1.67%)</title><rect x="831.7" y="1075.0" width="19.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="834.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 1.67%)</title><rect x="831.7" y="1059.0" width="19.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="834.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 1.67%)</title><rect x="831.7" y="1043.0" width="19.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="834.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.56%)</title><rect x="851.4" y="1171.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="854.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.56%)</title><rect x="851.4" y="1155.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="854.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.56%)</title><rect x="851.4" y="1139.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.28%)</title><rect x="851.4" y="1123.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="854.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.28%)</title><rect x="851.4" y="1107.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="854.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.28%)</title><rect x="851.4" y="1091.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="854.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.28%)</title><rect x="851.4" y="1075.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="854.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.28%)</title><rect x="851.4" y="1059.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="854.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.28%)</title><rect x="851.4" y="1043.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="854.4" y="1054.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.28%)</title><rect x="851.4" y="1027.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="854.4" y="1038.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.28%)</title><rect x="851.4" y="1011.0" width="3.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="854.4" y="1022.0"></text>
</g>
<g>
<title>_init (1 samples, 0.28%)</title><rect x="851.4" y="995.0" width="3.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="854.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.28%)</title><rect x="854.7" y="1123.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="857.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.28%)</title><rect x="854.7" y="1107.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="857.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.28%)</title><rect x="854.7" y="1091.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="857.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.28%)</title><rect x="854.7" y="1075.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="857.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="854.7" y="1059.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="857.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.28%)</title><rect x="854.7" y="1043.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="857.7" y="1054.0"></text>
</g>
<g>
<title>start_thread (101 samples, 28.13%)</title><rect x="858.0" y="1171.0" width="332.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="861.0" y="1182.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (101 samples, 28.13%)</title><rect x="858.0" y="1155.0" width="332.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="861.0" y="1166.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 3.90%)</title><rect x="858.0" y="1139.0" width="46.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="861.0" y="1150.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 3.90%)</title><rect x="858.0" y="1123.0" width="46.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="861.0" y="1134.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 3.06%)</title><rect x="858.0" y="1107.0" width="36.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="861.0" y="1118.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.28%)</title><rect x="858.0" y="1091.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="861.0" y="1102.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (10 samples, 2.79%)</title><rect x="861.3" y="1091.0" width="32.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="864.3" y="1102.0">G1..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.28%)</title><rect x="871.2" y="1075.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="874.2" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.39%)</title><rect x="874.5" y="1075.0" width="16.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="877.5" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 1.11%)</title><rect x="877.7" y="1059.0" width="13.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="880.7" y="1070.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.28%)</title><rect x="890.9" y="1075.0" width="3.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="893.9" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.56%)</title><rect x="894.2" y="1107.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="897.2" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.28%)</title><rect x="894.2" y="1091.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="897.2" y="1102.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.28%)</title><rect x="894.2" y="1075.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="897.2" y="1086.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.28%)</title><rect x="894.2" y="1059.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="897.2" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.28%)</title><rect x="897.5" y="1091.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="900.5" y="1102.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.28%)</title><rect x="897.5" y="1075.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="900.5" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.28%)</title><rect x="900.8" y="1107.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="903.8" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.28%)</title><rect x="900.8" y="1091.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="903.8" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.28%)</title><rect x="900.8" y="1075.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="903.8" y="1086.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.28%)</title><rect x="900.8" y="1059.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="903.8" y="1070.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.28%)</title><rect x="900.8" y="1043.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="903.8" y="1054.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.28%)</title><rect x="900.8" y="1027.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.8" y="1038.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.28%)</title><rect x="900.8" y="1011.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="903.8" y="1022.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.28%)</title><rect x="900.8" y="995.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="903.8" y="1006.0"></text>
</g>
<g>
<title>G1ParPushHeapRSClosure::do_oop(unsigned int*) (1 samples, 0.28%)</title><rect x="900.8" y="979.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.8" y="990.0"></text>
</g>
<g>
<title>JavaThread::run() (87 samples, 24.23%)</title><rect x="904.0" y="1139.0" width="286.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="907.0" y="1150.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (87 samples, 24.23%)</title><rect x="904.0" y="1123.0" width="286.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="907.0" y="1134.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (86 samples, 23.96%)</title><rect x="904.0" y="1107.0" width="282.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="907.0" y="1118.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (86 samples, 23.96%)</title><rect x="904.0" y="1091.0" width="282.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="907.0" y="1102.0">CompileBroker::invoke_compiler_on_meth..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (82 samples, 22.84%)</title><rect x="904.0" y="1075.0" width="269.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="907.0" y="1086.0">C2Compiler::compile_method(ciEnv*, c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (82 samples, 22.84%)</title><rect x="904.0" y="1059.0" width="269.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="907.0" y="1070.0">Compile::Compile(ciEnv*, C2Compiler*..</text>
</g>
<g>
<title>Compile::Code_Gen() (48 samples, 13.37%)</title><rect x="904.0" y="1043.0" width="157.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="907.0" y="1054.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.56%)</title><rect x="904.0" y="1027.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="907.0" y="1038.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.56%)</title><rect x="904.0" y="1011.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="907.0" y="1022.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.28%)</title><rect x="904.0" y="995.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="907.0" y="1006.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.28%)</title><rect x="904.0" y="979.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="907.0" y="990.0"></text>
</g>
<g>
<title>CodeBuffer::initialize_section_size(CodeSection*, int) (1 samples, 0.28%)</title><rect x="904.0" y="963.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="907.0" y="974.0"></text>
</g>
<g>
<title>MachNode::size(PhaseRegAlloc*) const (1 samples, 0.28%)</title><rect x="907.3" y="995.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="910.3" y="1006.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.84%)</title><rect x="910.6" y="1027.0" width="9.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="913.6" y="1038.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.28%)</title><rect x="910.6" y="1011.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="913.6" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.56%)</title><rect x="913.9" y="1011.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="916.9" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.56%)</title><rect x="913.9" y="995.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="916.9" y="1006.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.11%)</title><rect x="920.5" y="1027.0" width="13.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="923.5" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.11%)</title><rect x="920.5" y="1011.0" width="13.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="923.5" y="1022.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.56%)</title><rect x="923.8" y="995.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="926.8" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.28%)</title><rect x="930.3" y="995.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="933.3" y="1006.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.28%)</title><rect x="930.3" y="979.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="933.3" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.28%)</title><rect x="930.3" y="963.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="933.3" y="974.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.28%)</title><rect x="930.3" y="947.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="933.3" y="958.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.28%)</title><rect x="933.6" y="1027.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="936.6" y="1038.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.28%)</title><rect x="933.6" y="1011.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="936.6" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.84%)</title><rect x="936.9" y="1027.0" width="9.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="939.9" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.84%)</title><rect x="936.9" y="1011.0" width="9.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.9" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.28%)</title><rect x="936.9" y="995.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="939.9" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.56%)</title><rect x="940.2" y="995.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="943.2" y="1006.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.28%)</title><rect x="943.5" y="979.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="946.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 9.75%)</title><rect x="946.8" y="1027.0" width="115.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="949.8" y="1038.0">PhaseChaitin::..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.28%)</title><rect x="950.1" y="1011.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="953.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.28%)</title><rect x="953.3" y="1011.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.28%)</title><rect x="953.3" y="995.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.56%)</title><rect x="956.6" y="1011.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="959.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.56%)</title><rect x="956.6" y="995.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="959.6" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="959.9" y="979.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="962.9" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 1.67%)</title><rect x="963.2" y="1011.0" width="19.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="966.2" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.28%)</title><rect x="979.6" y="995.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="982.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 1.95%)</title><rect x="982.9" y="1011.0" width="23.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="985.9" y="1022.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.84%)</title><rect x="992.8" y="995.0" width="9.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="995.8" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.56%)</title><rect x="996.1" y="979.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="999.1" y="990.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.28%)</title><rect x="1002.6" y="995.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1005.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.56%)</title><rect x="1005.9" y="1011.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1008.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.56%)</title><rect x="1005.9" y="995.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1008.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.11%)</title><rect x="1012.5" y="1011.0" width="13.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1015.5" y="1022.0"></text>
</g>
<g>
<title>loadConI0Node::bottom_type() const (1 samples, 0.28%)</title><rect x="1022.4" y="995.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1025.4" y="1006.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.28%)</title><rect x="1022.4" y="979.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1025.4" y="990.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.28%)</title><rect x="1022.4" y="963.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1025.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.28%)</title><rect x="1025.7" y="1011.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1028.7" y="1022.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 1.39%)</title><rect x="1028.9" y="1011.0" width="16.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.9" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 1.39%)</title><rect x="1028.9" y="995.0" width="16.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.9" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (5 samples, 1.39%)</title><rect x="1028.9" y="979.0" width="16.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.9" y="990.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.28%)</title><rect x="1028.9" y="963.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.9" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.28%)</title><rect x="1032.2" y="963.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1035.2" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.84%)</title><rect x="1035.5" y="963.0" width="9.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.5" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.28%)</title><rect x="1045.4" y="1011.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.4" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.28%)</title><rect x="1045.4" y="995.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1048.4" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.84%)</title><rect x="1048.7" y="1011.0" width="9.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1051.7" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.56%)</title><rect x="1051.9" y="995.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1054.9" y="1006.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.28%)</title><rect x="1058.5" y="1011.0" width="3.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1061.5" y="1022.0"></text>
</g>
<g>
<title>Compile::Optimize() (27 samples, 7.52%)</title><rect x="1061.8" y="1043.0" width="88.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.8" y="1054.0">Compile::O..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.28%)</title><rect x="1061.8" y="1027.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.28%)</title><rect x="1061.8" y="1011.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1064.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.28%)</title><rect x="1061.8" y="995.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1064.8" y="1006.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.28%)</title><rect x="1061.8" y="979.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.8" y="990.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.28%)</title><rect x="1061.8" y="963.0" width="3.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1064.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.28%)</title><rect x="1065.1" y="1027.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.28%)</title><rect x="1065.1" y="1011.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1065.1" y="995.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1065.1" y="979.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.1" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.28%)</title><rect x="1068.4" y="1027.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.4" y="1038.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.28%)</title><rect x="1068.4" y="1011.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1071.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (19 samples, 5.29%)</title><rect x="1071.7" y="1027.0" width="62.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.7" y="1038.0">PhaseI..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1071.7" y="1011.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1074.7" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1071.7" y="995.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1074.7" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.28%)</title><rect x="1071.7" y="979.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.28%)</title><rect x="1071.7" y="963.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1074.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.28%)</title><rect x="1071.7" y="947.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.28%)</title><rect x="1071.7" y="931.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1074.7" y="942.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.28%)</title><rect x="1071.7" y="915.0" width="3.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1074.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.56%)</title><rect x="1075.0" y="1011.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 3.62%)</title><rect x="1081.5" y="1011.0" width="42.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1084.5" y="1022.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (11 samples, 3.06%)</title><rect x="1088.1" y="995.0" width="36.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.1" y="1006.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 3.06%)</title><rect x="1088.1" y="979.0" width="36.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.1" y="990.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.28%)</title><rect x="1114.4" y="963.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.56%)</title><rect x="1117.7" y="963.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.28%)</title><rect x="1124.3" y="1011.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.28%)</title><rect x="1127.5" y="1011.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.28%)</title><rect x="1127.5" y="995.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.28%)</title><rect x="1127.5" y="979.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.5" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.28%)</title><rect x="1130.8" y="1011.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.28%)</title><rect x="1130.8" y="995.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.28%)</title><rect x="1130.8" y="979.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.8" y="990.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.28%)</title><rect x="1130.8" y="963.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.8" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.56%)</title><rect x="1134.1" y="1027.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.56%)</title><rect x="1134.1" y="1011.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.1" y="1022.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.28%)</title><rect x="1134.1" y="995.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.1" y="1006.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.28%)</title><rect x="1134.1" y="979.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.1" y="990.0"></text>
</g>
<g>
<title>_init (1 samples, 0.28%)</title><rect x="1137.4" y="995.0" width="3.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1140.4" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.28%)</title><rect x="1140.7" y="1027.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.7" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.28%)</title><rect x="1140.7" y="1011.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.7" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.28%)</title><rect x="1140.7" y="995.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.7" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.28%)</title><rect x="1140.7" y="979.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.7" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.28%)</title><rect x="1140.7" y="963.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.7" y="974.0"></text>
</g>
<g>
<title>PhiNode::PhiNode(Node*, Type const*, TypePtr const*, int, int, int) (1 samples, 0.28%)</title><rect x="1140.7" y="947.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.7" y="958.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.28%)</title><rect x="1140.7" y="931.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.7" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_unlock_node(UnlockNode*) (1 samples, 0.28%)</title><rect x="1144.0" y="1027.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.0" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.28%)</title><rect x="1147.3" y="1027.0" width="3.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1150.3" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.67%)</title><rect x="1150.6" y="1043.0" width="19.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.6" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.67%)</title><rect x="1150.6" y="1027.0" width="19.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.67%)</title><rect x="1150.6" y="1011.0" width="19.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.67%)</title><rect x="1150.6" y="995.0" width="19.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.67%)</title><rect x="1150.6" y="979.0" width="19.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.67%)</title><rect x="1150.6" y="963.0" width="19.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.6" y="974.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1150.6" y="947.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.6" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1150.6" y="931.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.6" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1150.6" y="915.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.6" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.28%)</title><rect x="1150.6" y="899.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.6" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.28%)</title><rect x="1150.6" y="883.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.6" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.28%)</title><rect x="1150.6" y="867.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.6" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1150.6" y="851.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.6" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1150.6" y="835.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.6" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1150.6" y="819.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.6" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.28%)</title><rect x="1150.6" y="803.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.6" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.28%)</title><rect x="1150.6" y="787.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.6" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1150.6" y="771.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.6" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1150.6" y="755.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.6" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1150.6" y="739.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.6" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.28%)</title><rect x="1150.6" y="723.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.6" y="734.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.28%)</title><rect x="1150.6" y="707.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.6" y="718.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.28%)</title><rect x="1150.6" y="691.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.39%)</title><rect x="1153.8" y="947.0" width="16.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.8" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.39%)</title><rect x="1153.8" y="931.0" width="16.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.39%)</title><rect x="1153.8" y="915.0" width="16.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.39%)</title><rect x="1153.8" y="899.0" width="16.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.39%)</title><rect x="1153.8" y="883.0" width="16.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.39%)</title><rect x="1153.8" y="867.0" width="16.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.8" y="878.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.28%)</title><rect x="1153.8" y="851.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.8" y="862.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.28%)</title><rect x="1153.8" y="835.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.8" y="846.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.28%)</title><rect x="1153.8" y="819.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.8" y="830.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.28%)</title><rect x="1153.8" y="803.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.8" y="814.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.28%)</title><rect x="1153.8" y="787.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.8" y="798.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.28%)</title><rect x="1153.8" y="771.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.8" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.28%)</title><rect x="1153.8" y="755.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.8" y="766.0"></text>
</g>
<g>
<title>ciKlass::is_subtype_of(ciKlass*) (1 samples, 0.28%)</title><rect x="1153.8" y="739.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.8" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.56%)</title><rect x="1157.1" y="851.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.1" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.56%)</title><rect x="1157.1" y="835.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.56%)</title><rect x="1157.1" y="819.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.56%)</title><rect x="1157.1" y="803.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.56%)</title><rect x="1157.1" y="787.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.56%)</title><rect x="1157.1" y="771.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.56%)</title><rect x="1157.1" y="755.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.1" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.56%)</title><rect x="1157.1" y="739.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.56%)</title><rect x="1157.1" y="723.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.56%)</title><rect x="1157.1" y="707.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.56%)</title><rect x="1157.1" y="691.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.56%)</title><rect x="1157.1" y="675.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.56%)</title><rect x="1157.1" y="659.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.56%)</title><rect x="1157.1" y="643.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.56%)</title><rect x="1157.1" y="627.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.56%)</title><rect x="1157.1" y="611.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.56%)</title><rect x="1157.1" y="595.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.56%)</title><rect x="1157.1" y="579.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.56%)</title><rect x="1157.1" y="563.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.56%)</title><rect x="1157.1" y="547.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.56%)</title><rect x="1157.1" y="531.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.56%)</title><rect x="1157.1" y="515.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.56%)</title><rect x="1157.1" y="499.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.56%)</title><rect x="1157.1" y="483.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.56%)</title><rect x="1157.1" y="467.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.1" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.56%)</title><rect x="1157.1" y="451.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.56%)</title><rect x="1157.1" y="435.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.56%)</title><rect x="1157.1" y="419.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.56%)</title><rect x="1157.1" y="403.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.56%)</title><rect x="1157.1" y="387.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.1" y="398.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.28%)</title><rect x="1157.1" y="371.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.1" y="382.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.28%)</title><rect x="1157.1" y="355.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.1" y="366.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.28%)</title><rect x="1157.1" y="339.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.1" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.28%)</title><rect x="1157.1" y="323.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.1" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.28%)</title><rect x="1157.1" y="307.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.1" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1157.1" y="291.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.1" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.28%)</title><rect x="1157.1" y="275.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.1" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1157.1" y="259.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.1" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putfield(ciBytecodeStream*) (1 samples, 0.28%)</title><rect x="1157.1" y="243.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="254.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.28%)</title><rect x="1157.1" y="227.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.1" y="238.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, Bytecodes::Code, bool, bool, Thread*) (1 samples, 0.28%)</title><rect x="1157.1" y="211.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.1" y="222.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1160.4" y="371.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.4" y="382.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.28%)</title><rect x="1160.4" y="355.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="366.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.28%)</title><rect x="1160.4" y="339.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.4" y="350.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.28%)</title><rect x="1160.4" y="323.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="334.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.28%)</title><rect x="1160.4" y="307.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="318.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.28%)</title><rect x="1160.4" y="291.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.4" y="302.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.28%)</title><rect x="1160.4" y="275.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.4" y="286.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.28%)</title><rect x="1160.4" y="259.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.4" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.56%)</title><rect x="1163.7" y="851.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.7" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.56%)</title><rect x="1163.7" y="835.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.56%)</title><rect x="1163.7" y="819.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.56%)</title><rect x="1163.7" y="803.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.56%)</title><rect x="1163.7" y="787.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.56%)</title><rect x="1163.7" y="771.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.56%)</title><rect x="1163.7" y="755.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.56%)</title><rect x="1163.7" y="739.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.56%)</title><rect x="1163.7" y="723.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.56%)</title><rect x="1163.7" y="707.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.56%)</title><rect x="1163.7" y="691.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.56%)</title><rect x="1163.7" y="675.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.56%)</title><rect x="1163.7" y="659.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.56%)</title><rect x="1163.7" y="643.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.56%)</title><rect x="1163.7" y="627.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.56%)</title><rect x="1163.7" y="611.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.56%)</title><rect x="1163.7" y="595.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.56%)</title><rect x="1163.7" y="579.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.56%)</title><rect x="1163.7" y="563.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.7" y="547.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.7" y="531.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.7" y="515.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.7" y="499.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.7" y="483.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.7" y="467.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.7" y="451.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.7" y="435.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.7" y="419.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.7" y="403.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.7" y="387.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.7" y="371.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.7" y="355.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.7" y="339.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.7" y="323.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.7" y="307.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.7" y="291.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.7" y="275.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.7" y="259.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.7" y="243.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.7" y="227.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.7" y="211.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.7" y="195.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1163.7" y="179.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1163.7" y="163.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.7" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1163.7" y="147.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1163.7" y="131.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1163.7" y="115.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1163.7" y="99.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.7" y="110.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.28%)</title><rect x="1163.7" y="83.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.7" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.28%)</title><rect x="1163.7" y="67.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="78.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.28%)</title><rect x="1163.7" y="51.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.7" y="62.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.28%)</title><rect x="1163.7" y="35.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1167.0" y="547.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1167.0" y="531.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1167.0" y="515.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1167.0" y="499.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1167.0" y="483.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1167.0" y="467.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.28%)</title><rect x="1167.0" y="451.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.28%)</title><rect x="1167.0" y="435.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.28%)</title><rect x="1167.0" y="419.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.28%)</title><rect x="1167.0" y="403.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.28%)</title><rect x="1167.0" y="387.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.28%)</title><rect x="1167.0" y="371.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.28%)</title><rect x="1167.0" y="355.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.28%)</title><rect x="1167.0" y="339.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.0" y="350.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.28%)</title><rect x="1167.0" y="323.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.0" y="334.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.28%)</title><rect x="1167.0" y="307.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.0" y="318.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.28%)</title><rect x="1167.0" y="291.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.0" y="302.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.28%)</title><rect x="1167.0" y="275.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.0" y="286.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.28%)</title><rect x="1167.0" y="259.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.0" y="270.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.28%)</title><rect x="1167.0" y="243.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.0" y="254.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.28%)</title><rect x="1167.0" y="227.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.0" y="238.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.28%)</title><rect x="1167.0" y="211.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.0" y="222.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.28%)</title><rect x="1167.0" y="195.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.0" y="206.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.28%)</title><rect x="1167.0" y="179.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1170.0" y="190.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.28%)</title><rect x="1170.3" y="1043.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="1054.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.28%)</title><rect x="1170.3" y="1027.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.3" y="1038.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.28%)</title><rect x="1170.3" y="1011.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="1022.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.28%)</title><rect x="1170.3" y="995.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.3" y="1006.0"></text>
</g>
<g>
<title>CodeBlob::set_oop_maps(OopMapSet*) (1 samples, 0.28%)</title><rect x="1170.3" y="979.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.3" y="990.0"></text>
</g>
<g>
<title>OopMapSet::heap_size() const (1 samples, 0.28%)</title><rect x="1170.3" y="963.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.3" y="974.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.11%)</title><rect x="1173.6" y="1075.0" width="13.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.6" y="1086.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.11%)</title><rect x="1173.6" y="1059.0" width="13.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.84%)</title><rect x="1176.9" y="1043.0" width="9.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.9" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.84%)</title><rect x="1176.9" y="1027.0" width="9.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="1038.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.28%)</title><rect x="1176.9" y="1011.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="1022.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.28%)</title><rect x="1176.9" y="995.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="1006.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.28%)</title><rect x="1176.9" y="979.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.28%)</title><rect x="1176.9" y="963.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::state_at_entry() (1 samples, 0.28%)</title><rect x="1176.9" y="947.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.9" y="958.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.56%)</title><rect x="1180.1" y="1011.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.1" y="1022.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.56%)</title><rect x="1180.1" y="995.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="1006.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 0.56%)</title><rect x="1180.1" y="979.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="990.0"></text>
</g>
<g>
<title>LinearScan::add_def(LIR_OprDesc*, int, IntervalUseKind) (1 samples, 0.28%)</title><rect x="1180.1" y="963.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="974.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.28%)</title><rect x="1183.4" y="963.0" width="3.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1186.4" y="974.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.28%)</title><rect x="1186.7" y="1107.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.7" y="1118.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.28%)</title><rect x="1186.7" y="1091.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.7" y="1102.0"></text>
</g>
<g>
<title>Profiler::addJavaMethod(void const*, int, _jmethodID*) (1 samples, 0.28%)</title><rect x="1186.7" y="1075.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.7" y="1086.0"></text>
</g>
</g>
</svg>
