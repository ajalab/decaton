<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1221"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1221"> </text>
<g id="frames">
<g>
<title>all (1,195 samples, 100.00%)</title><rect x="10.0" y="1187.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="10.0" y="1171.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.08%)</title><rect x="10.0" y="1155.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.08%)</title><rect x="10.0" y="1139.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (287 samples, 24.02%)</title><rect x="11.0" y="1171.0" width="283.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="1182.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (285 samples, 23.85%)</title><rect x="13.0" y="1155.0" width="281.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.0" y="1166.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (7 samples, 0.59%)</title><rect x="13.0" y="1139.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (7 samples, 0.59%)</title><rect x="13.0" y="1123.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="13.0" y="1107.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="13.0" y="1091.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="13.0" y="1075.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (6 samples, 0.50%)</title><rect x="13.9" y="1107.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.9" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (6 samples, 0.50%)</title><rect x="13.9" y="1091.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.9" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (6 samples, 0.50%)</title><rect x="13.9" y="1075.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (5 samples, 0.42%)</title><rect x="13.9" y="1059.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (5 samples, 0.42%)</title><rect x="13.9" y="1043.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (3 samples, 0.25%)</title><rect x="13.9" y="1027.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="14.9" y="1011.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="15.9" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$261/949845150.test (1 samples, 0.08%)</title><rect x="15.9" y="979.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="16.9" y="1027.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="17.9" y="1027.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="17.9" y="1011.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="17.9" y="995.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.9" y="1006.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="17.9" y="979.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="20.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="18.9" y="1059.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.08%)</title><rect x="18.9" y="1043.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="18.9" y="1027.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.17%)</title><rect x="19.9" y="1139.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.17%)</title><rect x="19.9" y="1123.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.9" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="20.9" y="1107.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.9" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="20.9" y="1091.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.9" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="20.9" y="1075.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="20.9" y="1059.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="20.9" y="1043.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="20.9" y="1027.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="20.9" y="1011.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="20.9" y="995.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$264/1805918995.test (1 samples, 0.08%)</title><rect x="20.9" y="979.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.33%)</title><rect x="21.8" y="1139.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.33%)</title><rect x="21.8" y="1123.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.33%)</title><rect x="21.8" y="1107.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$260/1113949425.accept (4 samples, 0.33%)</title><rect x="21.8" y="1091.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.33%)</title><rect x="21.8" y="1075.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.33%)</title><rect x="21.8" y="1059.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.8" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.25%)</title><rect x="22.8" y="1043.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="25.8" y="1139.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.8" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="25.8" y="1123.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="28.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (209 samples, 17.49%)</title><rect x="26.8" y="1139.0" width="206.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.8" y="1150.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/1598685502.accept (199 samples, 16.65%)</title><rect x="27.8" y="1123.0" width="196.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.8" y="1134.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (197 samples, 16.49%)</title><rect x="29.7" y="1107.0" width="194.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.7" y="1118.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (148 samples, 12.38%)</title><rect x="32.7" y="1091.0" width="146.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.7" y="1102.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (148 samples, 12.38%)</title><rect x="32.7" y="1075.0" width="146.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.7" y="1086.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (148 samples, 12.38%)</title><rect x="32.7" y="1059.0" width="146.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.7" y="1070.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (148 samples, 12.38%)</title><rect x="32.7" y="1043.0" width="146.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.7" y="1054.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (148 samples, 12.38%)</title><rect x="32.7" y="1027.0" width="146.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.7" y="1038.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (148 samples, 12.38%)</title><rect x="32.7" y="1011.0" width="146.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.7" y="1022.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (100 samples, 8.37%)</title><rect x="76.2" y="995.0" width="98.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="79.2" y="1006.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 1.59%)</title><rect x="76.2" y="979.0" width="18.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 1.59%)</title><rect x="76.2" y="963.0" width="18.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.59%)</title><rect x="76.2" y="947.0" width="18.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.59%)</title><rect x="94.9" y="979.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (7 samples, 0.59%)</title><rect x="94.9" y="963.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.17%)</title><rect x="97.9" y="947.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.9" y="958.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.17%)</title><rect x="97.9" y="931.0" width="2.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="100.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.17%)</title><rect x="99.9" y="947.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (74 samples, 6.19%)</title><rect x="101.8" y="979.0" width="73.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="104.8" y="990.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (74 samples, 6.19%)</title><rect x="101.8" y="963.0" width="73.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.8" y="974.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (72 samples, 6.03%)</title><rect x="102.8" y="947.0" width="71.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.8" y="958.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (72 samples, 6.03%)</title><rect x="102.8" y="931.0" width="71.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.8" y="942.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (72 samples, 6.03%)</title><rect x="102.8" y="915.0" width="71.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.8" y="926.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (65 samples, 5.44%)</title><rect x="102.8" y="899.0" width="64.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="105.8" y="910.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.25%)</title><rect x="104.8" y="883.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="107.8" y="894.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="107.8" y="883.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="110.8" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="108.7" y="883.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="111.7" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_signal (44 samples, 3.68%)</title><rect x="110.7" y="883.0" width="43.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="113.7" y="894.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="154.2" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="157.2" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 1.00%)</title><rect x="155.2" y="883.0" width="11.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="158.2" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.33%)</title><rect x="167.0" y="899.0" width="4.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="170.0" y="910.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.25%)</title><rect x="171.0" y="899.0" width="2.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="174.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="173.9" y="947.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.25%)</title><rect x="174.9" y="995.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="177.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.25%)</title><rect x="174.9" y="979.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.25%)</title><rect x="174.9" y="963.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="177.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="175.9" y="947.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="178.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="176.9" y="947.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.9" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="177.9" y="995.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="180.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.17%)</title><rect x="178.9" y="1091.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.17%)</title><rect x="178.9" y="1075.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (6 samples, 0.50%)</title><rect x="180.8" y="1091.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.50%)</title><rect x="180.8" y="1075.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.50%)</title><rect x="180.8" y="1059.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (36 samples, 3.01%)</title><rect x="186.8" y="1091.0" width="35.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.8" y="1102.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 3.01%)</title><rect x="186.8" y="1075.0" width="35.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="189.8" y="1086.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.75%)</title><rect x="210.5" y="1059.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (6 samples, 0.50%)</title><rect x="210.5" y="1043.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="215.4" y="1027.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.25%)</title><rect x="216.4" y="1043.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.4" y="1054.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="219.3" y="1059.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="222.3" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="220.3" y="1059.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="223.3" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="222.3" y="1091.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="225.3" y="1102.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="224.3" y="1123.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="227.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (2 samples, 0.17%)</title><rect x="225.3" y="1123.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (2 samples, 0.17%)</title><rect x="225.3" y="1107.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (2 samples, 0.17%)</title><rect x="225.3" y="1091.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.3" y="1102.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="225.3" y="1075.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="228.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.42%)</title><rect x="227.2" y="1123.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.42%)</title><rect x="227.2" y="1107.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="230.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.42%)</title><rect x="227.2" y="1091.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="230.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.42%)</title><rect x="227.2" y="1075.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="232.2" y="1123.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="232.2" y="1107.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (62 samples, 5.19%)</title><rect x="233.2" y="1139.0" width="61.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.2" y="1150.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (62 samples, 5.19%)</title><rect x="233.2" y="1123.0" width="61.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.2" y="1134.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (33 samples, 2.76%)</title><rect x="234.2" y="1107.0" width="32.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.2" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 2.76%)</title><rect x="234.2" y="1091.0" width="32.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.2" y="1102.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (32 samples, 2.68%)</title><rect x="235.1" y="1075.0" width="31.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="238.1" y="1086.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (25 samples, 2.09%)</title><rect x="235.1" y="1059.0" width="24.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.1" y="1070.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (25 samples, 2.09%)</title><rect x="235.1" y="1043.0" width="24.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.1" y="1054.0">o..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="236.1" y="1027.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="239.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.84%)</title><rect x="237.1" y="1027.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.42%)</title><rect x="242.1" y="1011.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.42%)</title><rect x="242.1" y="995.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.42%)</title><rect x="242.1" y="979.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.42%)</title><rect x="242.1" y="963.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.42%)</title><rect x="242.1" y="947.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.42%)</title><rect x="242.1" y="931.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.42%)</title><rect x="242.1" y="915.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="245.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 1.09%)</title><rect x="247.0" y="1027.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="247.0" y="1011.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="250.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 1.00%)</title><rect x="248.0" y="1011.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.50%)</title><rect x="248.0" y="995.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.0" y="1006.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.50%)</title><rect x="248.0" y="979.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.0" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="249.9" y="963.0" width="4.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="252.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.50%)</title><rect x="253.9" y="995.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.9" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.50%)</title><rect x="253.9" y="979.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.17%)</title><rect x="259.8" y="1059.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.17%)</title><rect x="259.8" y="1043.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="262.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="259.8" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="259.8" y="1011.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="260.8" y="1027.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="260.8" y="1011.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="260.8" y="995.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="260.8" y="979.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.17%)</title><rect x="261.8" y="1059.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="264.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.17%)</title><rect x="261.8" y="1043.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="261.8" y="1027.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="264.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="261.8" y="1011.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="261.8" y="995.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="261.8" y="979.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="261.8" y="963.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.8" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="262.8" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="265.8" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="262.8" y="979.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="265.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.08%)</title><rect x="263.8" y="1059.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.08%)</title><rect x="264.8" y="1059.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="264.8" y="1043.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="264.8" y="1027.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.8" y="1038.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="264.8" y="1011.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="264.8" y="995.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.08%)</title><rect x="265.7" y="1059.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="265.7" y="1043.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (11 samples, 0.92%)</title><rect x="266.7" y="1107.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.84%)</title><rect x="266.7" y="1091.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.75%)</title><rect x="266.7" y="1075.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.17%)</title><rect x="266.7" y="1059.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/964374334.accept (2 samples, 0.17%)</title><rect x="266.7" y="1043.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.17%)</title><rect x="266.7" y="1027.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.17%)</title><rect x="266.7" y="1011.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="267.7" y="995.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="267.7" y="979.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="270.7" y="990.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="267.7" y="963.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.7" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="267.7" y="947.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.7" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="268.7" y="1059.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="271.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="268.7" y="1043.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="268.7" y="1027.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="268.7" y="1011.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="268.7" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="268.7" y="979.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.08%)</title><rect x="268.7" y="963.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.25%)</title><rect x="269.7" y="1059.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.25%)</title><rect x="269.7" y="1043.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.7" y="1054.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (3 samples, 0.25%)</title><rect x="269.7" y="1027.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (2 samples, 0.17%)</title><rect x="269.7" y="1011.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="271.7" y="1011.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="271.7" y="995.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.25%)</title><rect x="272.7" y="1059.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.17%)</title><rect x="273.6" y="1043.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="273.6" y="1027.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="273.6" y="1011.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.6" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="273.6" y="995.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="273.6" y="979.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="273.6" y="963.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.6" y="974.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="273.6" y="947.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.6" y="958.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="273.6" y="931.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="276.6" y="942.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.08%)</title><rect x="273.6" y="915.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="274.6" y="947.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="274.6" y="931.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="274.6" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="274.6" y="899.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.6" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="274.6" y="883.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="277.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="275.6" y="1075.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="275.6" y="1059.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="275.6" y="1043.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="275.6" y="1027.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="275.6" y="1011.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.6" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="275.6" y="995.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="275.6" y="979.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="275.6" y="963.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="275.6" y="947.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.6" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="275.6" y="931.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="278.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="276.6" y="1091.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.08%)</title><rect x="276.6" y="1075.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.08%)</title><rect x="276.6" y="1059.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.33%)</title><rect x="277.6" y="1107.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.33%)</title><rect x="277.6" y="1091.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.33%)</title><rect x="277.6" y="1075.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="280.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.33%)</title><rect x="277.6" y="1059.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="280.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="277.6" y="1043.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="277.6" y="1027.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.6" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="277.6" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="280.6" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="277.6" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="280.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.08%)</title><rect x="278.6" y="1043.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="278.6" y="1027.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="278.6" y="1011.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.6" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="278.6" y="995.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="281.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.17%)</title><rect x="279.6" y="1043.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.17%)</title><rect x="279.6" y="1027.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.17%)</title><rect x="279.6" y="1011.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.17%)</title><rect x="279.6" y="995.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.17%)</title><rect x="279.6" y="979.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.6" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.17%)</title><rect x="279.6" y="963.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="282.6" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="279.6" y="947.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="282.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (12 samples, 1.00%)</title><rect x="281.5" y="1107.0" width="11.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="284.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (9 samples, 0.75%)</title><rect x="283.5" y="1091.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="284.5" y="1075.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$251/285906784.accept (1 samples, 0.08%)</title><rect x="284.5" y="1059.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="287.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="284.5" y="1043.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="287.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="284.5" y="1027.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="284.5" y="1011.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="284.5" y="995.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="284.5" y="979.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.5" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1172131546.linkToTargetMethod (1 samples, 0.08%)</title><rect x="285.5" y="1075.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.08%)</title><rect x="285.5" y="1059.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$251/285906784.get$Lambda (1 samples, 0.08%)</title><rect x="285.5" y="1043.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.17%)</title><rect x="286.5" y="1075.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="286.5" y="1059.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="286.5" y="1043.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="286.5" y="1027.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.08%)</title><rect x="286.5" y="1011.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="289.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="287.5" y="1059.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="287.5" y="1043.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="287.5" y="1027.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="287.5" y="1011.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="287.5" y="995.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="287.5" y="979.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.5" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="287.5" y="963.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.5" y="974.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="287.5" y="947.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="287.5" y="931.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$231/1169676339.apply (1 samples, 0.08%)</title><rect x="287.5" y="915.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.08%)</title><rect x="287.5" y="899.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.08%)</title><rect x="288.5" y="1075.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="289.4" y="1075.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.17%)</title><rect x="290.4" y="1075.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.metadata (1 samples, 0.08%)</title><rect x="292.4" y="1091.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="293.4" y="1107.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="293.4" y="1091.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="293.4" y="1075.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="293.4" y="1059.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.4" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="293.4" y="1043.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.run (752 samples, 62.93%)</title><rect x="294.4" y="1171.0" width="742.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="297.4" y="1182.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (752 samples, 62.93%)</title><rect x="294.4" y="1155.0" width="742.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.4" y="1166.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (752 samples, 62.93%)</title><rect x="294.4" y="1139.0" width="742.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.4" y="1150.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="301.3" y="1123.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="304.3" y="1134.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="301.3" y="1107.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="304.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (1 samples, 0.08%)</title><rect x="305.2" y="1123.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/754986732.run (529 samples, 44.27%)</title><rect x="306.2" y="1123.0" width="522.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="309.2" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$27..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (529 samples, 44.27%)</title><rect x="306.2" y="1107.0" width="522.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="309.2" y="1118.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$put..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (529 samples, 44.27%)</title><rect x="306.2" y="1091.0" width="522.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="309.2" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="332.9" y="1075.0" width="3.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="335.9" y="1086.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="332.9" y="1059.0" width="3.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="335.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (495 samples, 41.42%)</title><rect x="336.8" y="1075.0" width="488.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.8" y="1086.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sch..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="344.7" y="1059.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="347.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (2 samples, 0.17%)</title><rect x="345.7" y="1059.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="348.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (1 samples, 0.08%)</title><rect x="347.7" y="1059.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="350.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.08%)</title><rect x="347.7" y="1043.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="350.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler$$Lambda$200/1473191845.get (1 samples, 0.08%)</title><rect x="347.7" y="1027.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="350.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.08%)</title><rect x="347.7" y="1011.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="350.7" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="347.7" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="350.7" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="347.7" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="350.7" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="347.7" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="350.7" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="347.7" y="947.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="350.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (150 samples, 12.55%)</title><rect x="348.7" y="1059.0" width="148.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.7" y="1070.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (150 samples, 12.55%)</title><rect x="348.7" y="1043.0" width="148.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="351.7" y="1054.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (150 samples, 12.55%)</title><rect x="348.7" y="1027.0" width="148.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="351.7" y="1038.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (150 samples, 12.55%)</title><rect x="348.7" y="1011.0" width="148.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="351.7" y="1022.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (150 samples, 12.55%)</title><rect x="348.7" y="995.0" width="148.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.7" y="1006.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (150 samples, 12.55%)</title><rect x="348.7" y="979.0" width="148.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="351.7" y="990.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (70 samples, 5.86%)</title><rect x="348.7" y="963.0" width="69.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="351.7" y="974.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (27 samples, 2.26%)</title><rect x="348.7" y="947.0" width="26.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="351.7" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (27 samples, 2.26%)</title><rect x="348.7" y="931.0" width="26.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="351.7" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (22 samples, 1.84%)</title><rect x="348.7" y="915.0" width="21.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="351.7" y="926.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.42%)</title><rect x="370.4" y="915.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.4" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.25%)</title><rect x="370.4" y="899.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.4" y="910.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.08%)</title><rect x="373.4" y="899.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="376.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="374.4" y="899.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="377.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (43 samples, 3.60%)</title><rect x="375.4" y="947.0" width="42.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.4" y="958.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="375.4" y="931.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="378.4" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="375.4" y="915.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="378.4" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="375.4" y="899.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="378.4" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="375.4" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="378.4" y="894.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="375.4" y="867.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="378.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (42 samples, 3.51%)</title><rect x="376.3" y="931.0" width="41.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="379.3" y="942.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.17%)</title><rect x="376.3" y="915.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.08%)</title><rect x="377.3" y="899.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="380.3" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (21 samples, 1.76%)</title><rect x="378.3" y="915.0" width="20.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.3" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="388.2" y="899.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="391.2" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="388.2" y="883.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="391.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.08%)</title><rect x="389.2" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="392.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (3 samples, 0.25%)</title><rect x="390.2" y="899.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.08%)</title><rect x="393.1" y="899.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (1 samples, 0.08%)</title><rect x="394.1" y="899.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.17%)</title><rect x="395.1" y="899.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="398.1" y="910.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (2 samples, 0.17%)</title><rect x="397.1" y="899.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="400.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 0.84%)</title><rect x="399.1" y="915.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="402.1" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="403.0" y="899.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="406.0" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="403.0" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="406.0" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="403.0" y="867.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="406.0" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="403.0" y="851.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="406.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.33%)</title><rect x="404.0" y="899.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.33%)</title><rect x="404.0" y="883.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="407.9" y="899.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (9 samples, 0.75%)</title><rect x="408.9" y="915.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (4 samples, 0.33%)</title><rect x="411.9" y="899.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="414.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="415.8" y="899.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (70 samples, 5.86%)</title><rect x="417.8" y="963.0" width="69.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.8" y="974.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.25%)</title><rect x="417.8" y="947.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="420.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 0.25%)</title><rect x="417.8" y="931.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="420.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.08%)</title><rect x="417.8" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.08%)</title><rect x="417.8" y="899.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (2 samples, 0.17%)</title><rect x="418.8" y="915.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="421.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.08%)</title><rect x="419.8" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.33%)</title><rect x="420.8" y="947.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="423.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.33%)</title><rect x="420.8" y="931.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="423.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.08%)</title><rect x="423.7" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="426.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.67%)</title><rect x="424.7" y="947.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="427.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.50%)</title><rect x="425.7" y="931.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.33%)</title><rect x="426.7" y="915.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="429.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.33%)</title><rect x="426.7" y="899.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="429.7" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="429.7" y="883.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="432.7" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="429.7" y="867.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="432.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="429.7" y="851.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="432.7" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="429.7" y="835.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="432.7" y="846.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="429.7" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="432.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="430.7" y="915.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="431.6" y="931.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (8 samples, 0.67%)</title><rect x="432.6" y="947.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="435.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="433.6" y="931.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="436.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.50%)</title><rect x="434.6" y="931.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="437.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="439.5" y="915.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="442.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="439.5" y="899.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="442.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="439.5" y="883.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="442.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="439.5" y="867.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="442.5" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="439.5" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="442.5" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="439.5" y="835.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="442.5" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="439.5" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="442.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (47 samples, 3.93%)</title><rect x="440.5" y="947.0" width="46.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.5" y="958.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.92%)</title><rect x="440.5" y="931.0" width="10.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="443.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.08%)</title><rect x="448.4" y="915.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="451.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.08%)</title><rect x="448.4" y="899.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="451.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.08%)</title><rect x="448.4" y="883.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="451.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.17%)</title><rect x="449.4" y="915.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="452.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (36 samples, 3.01%)</title><rect x="451.4" y="931.0" width="35.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="454.4" y="942.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (36 samples, 3.01%)</title><rect x="451.4" y="915.0" width="35.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="454.4" y="926.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (36 samples, 3.01%)</title><rect x="451.4" y="899.0" width="35.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="454.4" y="910.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.92%)</title><rect x="458.3" y="883.0" width="10.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="461.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.42%)</title><rect x="461.3" y="867.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.42%)</title><rect x="461.3" y="851.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="464.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.42%)</title><rect x="461.3" y="835.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="464.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.33%)</title><rect x="462.3" y="819.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="465.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="466.2" y="867.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="469.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="466.2" y="851.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="469.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="467.2" y="835.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="470.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="468.2" y="867.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.33%)</title><rect x="469.2" y="883.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="472.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.17%)</title><rect x="471.1" y="867.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="474.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.17%)</title><rect x="471.1" y="851.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="474.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.17%)</title><rect x="471.1" y="835.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="474.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.17%)</title><rect x="471.1" y="819.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="474.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.59%)</title><rect x="473.1" y="883.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="476.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.59%)</title><rect x="473.1" y="867.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="476.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.59%)</title><rect x="473.1" y="851.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="476.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.59%)</title><rect x="473.1" y="835.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="476.1" y="846.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.59%)</title><rect x="473.1" y="819.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="476.1" y="830.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.42%)</title><rect x="475.1" y="803.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="478.1" y="814.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.08%)</title><rect x="479.0" y="787.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="482.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.59%)</title><rect x="480.0" y="883.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="483.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.59%)</title><rect x="480.0" y="867.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="483.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.59%)</title><rect x="480.0" y="851.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="483.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (10 samples, 0.84%)</title><rect x="486.9" y="963.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="489.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 0.84%)</title><rect x="486.9" y="947.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="489.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 0.84%)</title><rect x="486.9" y="931.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="489.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 0.84%)</title><rect x="486.9" y="915.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="489.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.08%)</title><rect x="490.9" y="899.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.42%)</title><rect x="491.9" y="899.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="494.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (299 samples, 25.02%)</title><rect x="496.8" y="1059.0" width="295.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="499.8" y="1070.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="498.8" y="1043.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="501.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (47 samples, 3.93%)</title><rect x="499.8" y="1043.0" width="46.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.8" y="1054.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (47 samples, 3.93%)</title><rect x="499.8" y="1027.0" width="46.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="502.8" y="1038.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (47 samples, 3.93%)</title><rect x="499.8" y="1011.0" width="46.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.8" y="1022.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.42%)</title><rect x="499.8" y="995.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="502.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.42%)</title><rect x="499.8" y="979.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="502.8" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.42%)</title><rect x="499.8" y="963.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="502.8" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.42%)</title><rect x="499.8" y="947.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="502.8" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.42%)</title><rect x="504.7" y="995.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="507.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.42%)</title><rect x="504.7" y="979.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="507.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.42%)</title><rect x="504.7" y="963.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="507.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.42%)</title><rect x="504.7" y="947.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="507.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 0.25%)</title><rect x="506.7" y="931.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="509.7" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (37 samples, 3.10%)</title><rect x="509.6" y="995.0" width="36.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="512.6" y="1006.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 1.00%)</title><rect x="534.3" y="979.0" width="11.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="537.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.17%)</title><rect x="539.3" y="963.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="542.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.17%)</title><rect x="539.3" y="947.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="542.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.42%)</title><rect x="541.2" y="963.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="544.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.taskData (1 samples, 0.08%)</title><rect x="546.2" y="1043.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="549.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="546.2" y="1027.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="549.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (10 samples, 0.84%)</title><rect x="547.2" y="1043.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="550.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (10 samples, 0.84%)</title><rect x="547.2" y="1027.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="550.2" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="547.2" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="550.2" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="547.2" y="995.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="550.2" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="547.2" y="979.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="550.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="547.2" y="963.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="550.2" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="547.2" y="947.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="550.2" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="547.2" y="931.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="550.2" y="942.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="547.2" y="915.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="550.2" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="547.2" y="899.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="550.2" y="910.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="547.2" y="883.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="550.2" y="894.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.08%)</title><rect x="547.2" y="867.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="550.2" y="878.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (9 samples, 0.75%)</title><rect x="548.2" y="1011.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="551.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (157 samples, 13.14%)</title><rect x="557.0" y="1043.0" width="155.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="560.0" y="1054.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (156 samples, 13.05%)</title><rect x="558.0" y="1027.0" width="154.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="561.0" y="1038.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (47 samples, 3.93%)</title><rect x="570.9" y="1011.0" width="46.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="573.9" y="1022.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="570.9" y="995.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="573.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="570.9" y="979.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="573.9" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="570.9" y="963.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="573.9" y="974.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (46 samples, 3.85%)</title><rect x="571.9" y="995.0" width="45.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="574.9" y="1006.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (46 samples, 3.85%)</title><rect x="571.9" y="979.0" width="45.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="574.9" y="990.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (25 samples, 2.09%)</title><rect x="571.9" y="963.0" width="24.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="574.9" y="974.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (25 samples, 2.09%)</title><rect x="571.9" y="947.0" width="24.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="574.9" y="958.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (25 samples, 2.09%)</title><rect x="571.9" y="931.0" width="24.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="574.9" y="942.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (17 samples, 1.42%)</title><rect x="575.8" y="915.0" width="16.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="578.8" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="578.8" y="899.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="581.8" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="578.8" y="883.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="581.8" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.50%)</title><rect x="579.8" y="899.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="582.8" y="910.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.08%)</title><rect x="579.8" y="883.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="582.8" y="894.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="580.7" y="883.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="583.7" y="894.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="581.7" y="883.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="584.7" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.25%)</title><rect x="582.7" y="883.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="585.7" y="894.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.25%)</title><rect x="582.7" y="867.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="585.7" y="878.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="582.7" y="851.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="585.7" y="862.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.08%)</title><rect x="583.7" y="851.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="586.7" y="862.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="584.7" y="851.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="587.7" y="862.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="585.7" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="588.7" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.50%)</title><rect x="586.7" y="899.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="589.7" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.42%)</title><rect x="587.7" y="883.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="590.7" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="587.7" y="867.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="590.7" y="878.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="588.6" y="867.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="591.6" y="878.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="589.6" y="867.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="592.6" y="878.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.08%)</title><rect x="590.6" y="867.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="593.6" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="591.6" y="867.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="594.6" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="592.6" y="915.0" width="3.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="595.6" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (21 samples, 1.76%)</title><rect x="596.5" y="963.0" width="20.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="599.5" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (12 samples, 1.00%)</title><rect x="605.4" y="947.0" width="11.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="608.4" y="958.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (15 samples, 1.26%)</title><rect x="617.3" y="1011.0" width="14.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="620.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (8 samples, 0.67%)</title><rect x="617.3" y="995.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="620.3" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="617.3" y="979.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="620.3" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="617.3" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="620.3" y="974.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.08%)</title><rect x="617.3" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="620.3" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (7 samples, 0.59%)</title><rect x="618.3" y="979.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="621.3" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.08%)</title><rect x="624.2" y="963.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="627.2" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.59%)</title><rect x="625.2" y="995.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.2" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="625.2" y="979.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="628.2" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="625.2" y="963.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="628.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="625.2" y="947.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="628.2" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="625.2" y="931.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="628.2" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="625.2" y="915.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="628.2" y="926.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="625.2" y="899.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="628.2" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="625.2" y="883.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="628.2" y="894.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.08%)</title><rect x="625.2" y="867.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="628.2" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="626.2" y="979.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="629.2" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="627.2" y="963.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="630.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="627.2" y="947.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="630.2" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="627.2" y="931.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="630.2" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="627.2" y="915.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="630.2" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="627.2" y="899.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="630.2" y="910.0"></text>
</g>
<g>
<title>Thread::is_VM_thread() const (1 samples, 0.08%)</title><rect x="627.2" y="883.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="630.2" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.33%)</title><rect x="628.1" y="979.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="631.1" y="990.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="632.1" y="1011.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="635.1" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="633.1" y="1011.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="636.1" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (79 samples, 6.61%)</title><rect x="634.1" y="1011.0" width="78.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.1" y="1022.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (77 samples, 6.44%)</title><rect x="636.0" y="995.0" width="76.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="639.0" y="1006.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.75%)</title><rect x="636.0" y="979.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="639.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.75%)</title><rect x="636.0" y="963.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="639.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.75%)</title><rect x="636.0" y="947.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="639.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.75%)</title><rect x="636.0" y="931.0" width="8.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="639.0" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.33%)</title><rect x="644.9" y="979.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="647.9" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.33%)</title><rect x="644.9" y="963.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="647.9" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.33%)</title><rect x="644.9" y="947.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="647.9" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.33%)</title><rect x="644.9" y="931.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="647.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.25%)</title><rect x="645.9" y="915.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.9" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (64 samples, 5.36%)</title><rect x="648.9" y="979.0" width="63.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="651.9" y="990.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (59 samples, 4.94%)</title><rect x="653.8" y="963.0" width="58.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="656.8" y="974.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (27 samples, 2.26%)</title><rect x="685.4" y="947.0" width="26.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="688.4" y="958.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.25%)</title><rect x="701.2" y="931.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="704.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.50%)</title><rect x="704.2" y="931.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="707.2" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="709.1" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="712.1" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="709.1" y="899.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="712.1" y="910.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.17%)</title><rect x="710.1" y="931.0" width="2.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="713.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (60 samples, 5.02%)</title><rect x="712.1" y="1043.0" width="59.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="715.1" y="1054.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (60 samples, 5.02%)</title><rect x="712.1" y="1027.0" width="59.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="715.1" y="1038.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1898326843.process (29 samples, 2.43%)</title><rect x="717.0" y="1011.0" width="28.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="720.0" y="1022.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (29 samples, 2.43%)</title><rect x="717.0" y="995.0" width="28.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="720.0" y="1006.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (24 samples, 2.01%)</title><rect x="719.0" y="979.0" width="23.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="722.0" y="990.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.25%)</title><rect x="732.8" y="963.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="735.8" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.25%)</title><rect x="732.8" y="947.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="735.8" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.25%)</title><rect x="732.8" y="931.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="735.8" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.25%)</title><rect x="732.8" y="915.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="735.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.17%)</title><rect x="733.8" y="899.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="736.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.50%)</title><rect x="735.8" y="963.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="738.8" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.33%)</title><rect x="737.7" y="947.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="740.7" y="958.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="737.7" y="931.0" width="4.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="740.7" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="741.7" y="963.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="744.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="741.7" y="947.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="744.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="741.7" y="931.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="744.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.25%)</title><rect x="742.7" y="979.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="745.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.25%)</title><rect x="742.7" y="963.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="745.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.25%)</title><rect x="742.7" y="947.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="745.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.25%)</title><rect x="742.7" y="931.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="745.7" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.25%)</title><rect x="742.7" y="915.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="745.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (9 samples, 0.75%)</title><rect x="745.6" y="1011.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="748.6" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="749.6" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="752.6" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="749.6" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="752.6" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="749.6" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="752.6" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="750.6" y="995.0" width="3.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="753.6" y="1006.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="750.6" y="979.0" width="3.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="753.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.42%)</title><rect x="754.5" y="1011.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.42%)</title><rect x="754.5" y="995.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="757.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.08%)</title><rect x="759.5" y="1011.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="762.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="759.5" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="762.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$285/1542106136.get$Lambda (1 samples, 0.08%)</title><rect x="759.5" y="979.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="762.5" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.67%)</title><rect x="760.5" y="1011.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="763.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.67%)</title><rect x="760.5" y="995.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="763.5" y="1006.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.25%)</title><rect x="760.5" y="979.0" width="2.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="763.5" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (5 samples, 0.42%)</title><rect x="763.4" y="979.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="766.4" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="768.4" y="1011.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="771.4" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="768.4" y="995.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="771.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.17%)</title><rect x="769.3" y="1011.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="772.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="770.3" y="995.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="773.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (8 samples, 0.67%)</title><rect x="771.3" y="1043.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="774.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (6 samples, 0.50%)</title><rect x="771.3" y="1027.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="774.3" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.42%)</title><rect x="771.3" y="1011.0" width="5.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="774.3" y="1022.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="772.3" y="995.0" width="4.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="775.3" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="776.3" y="1011.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="779.3" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.17%)</title><rect x="777.2" y="1027.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="780.2" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.17%)</title><rect x="777.2" y="1011.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="780.2" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="777.2" y="995.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="780.2" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="778.2" y="979.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="781.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="778.2" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="781.2" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (1 samples, 0.08%)</title><rect x="779.2" y="1043.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="782.2" y="1054.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (1 samples, 0.08%)</title><rect x="779.2" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="782.2" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.08%)</title><rect x="779.2" y="1011.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="782.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/369463167.linkToTargetMethod (1 samples, 0.08%)</title><rect x="780.2" y="1043.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="783.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.08%)</title><rect x="780.2" y="1027.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="783.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$286/1618026945.get$Lambda (1 samples, 0.08%)</title><rect x="780.2" y="1011.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="783.2" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="780.2" y="995.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="783.2" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="780.2" y="979.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="783.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="780.2" y="963.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="783.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="780.2" y="947.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="783.2" y="958.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="780.2" y="931.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="783.2" y="942.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="780.2" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="783.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.92%)</title><rect x="781.2" y="1043.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="784.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.92%)</title><rect x="781.2" y="1027.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="784.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.75%)</title><rect x="783.2" y="1011.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="786.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$286/1618026945.accept (9 samples, 0.75%)</title><rect x="783.2" y="995.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="786.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (9 samples, 0.75%)</title><rect x="783.2" y="979.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="786.2" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (9 samples, 0.75%)</title><rect x="783.2" y="963.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="786.2" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (9 samples, 0.75%)</title><rect x="783.2" y="947.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="786.2" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="789.1" y="931.0" width="3.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="792.1" y="942.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="789.1" y="915.0" width="3.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="792.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 2.09%)</title><rect x="792.1" y="1059.0" width="24.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="795.1" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (25 samples, 2.09%)</title><rect x="792.1" y="1043.0" width="24.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="795.1" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (23 samples, 1.92%)</title><rect x="794.0" y="1027.0" width="22.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="797.0" y="1038.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$286/1618026945.accept (5 samples, 0.42%)</title><rect x="794.0" y="1011.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="797.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (5 samples, 0.42%)</title><rect x="794.0" y="995.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="797.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (5 samples, 0.42%)</title><rect x="794.0" y="979.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="797.0" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.42%)</title><rect x="794.0" y="963.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="797.0" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.42%)</title><rect x="794.0" y="947.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="797.0" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="798.0" y="931.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="801.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/304680388.accept (18 samples, 1.51%)</title><rect x="799.0" y="1011.0" width="17.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="802.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (18 samples, 1.51%)</title><rect x="799.0" y="995.0" width="17.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="802.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1327096501.complete (18 samples, 1.51%)</title><rect x="799.0" y="979.0" width="17.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="802.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (18 samples, 1.51%)</title><rect x="799.0" y="963.0" width="17.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="802.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1677839609.complete (18 samples, 1.51%)</title><rect x="799.0" y="947.0" width="17.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="802.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (18 samples, 1.51%)</title><rect x="799.0" y="931.0" width="17.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="802.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (18 samples, 1.51%)</title><rect x="799.0" y="915.0" width="17.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="802.0" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (18 samples, 1.51%)</title><rect x="799.0" y="899.0" width="17.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="802.0" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (18 samples, 1.51%)</title><rect x="799.0" y="883.0" width="17.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="802.0" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (18 samples, 1.51%)</title><rect x="799.0" y="867.0" width="17.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="802.0" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.75%)</title><rect x="816.7" y="1059.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="819.7" y="1070.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.75%)</title><rect x="816.7" y="1043.0" width="8.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="819.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="825.6" y="1075.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="828.6" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="825.6" y="1059.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="828.6" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="825.6" y="1043.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="828.6" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="825.6" y="1027.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="828.6" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="825.6" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="828.6" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="825.6" y="995.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="828.6" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="825.6" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="828.6" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="825.6" y="963.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="828.6" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="825.6" y="947.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="828.6" y="958.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="825.6" y="931.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="828.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.08%)</title><rect x="826.6" y="1075.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="829.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="826.6" y="1059.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="829.6" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="827.6" y="1075.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="830.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.17%)</title><rect x="828.6" y="1123.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="831.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="828.6" y="1107.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="831.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="828.6" y="1091.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="831.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.17%)</title><rect x="828.6" y="1075.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="831.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (209 samples, 17.49%)</title><rect x="830.6" y="1123.0" width="206.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="833.6" y="1134.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (209 samples, 17.49%)</title><rect x="830.6" y="1107.0" width="206.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="833.6" y="1118.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (208 samples, 17.41%)</title><rect x="831.6" y="1091.0" width="205.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="834.6" y="1102.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (7 samples, 0.59%)</title><rect x="846.4" y="1075.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="849.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.08%)</title><rect x="853.3" y="1075.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="856.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.08%)</title><rect x="854.3" y="1075.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="857.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.08%)</title><rect x="854.3" y="1059.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="857.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (16 samples, 1.34%)</title><rect x="855.3" y="1075.0" width="15.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="858.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.08%)</title><rect x="871.1" y="1075.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="874.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="871.1" y="1059.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="874.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="871.1" y="1043.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="874.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="871.1" y="1027.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="874.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="871.1" y="1011.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="874.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (4 samples, 0.33%)</title><rect x="872.0" y="1075.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="875.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (3 samples, 0.25%)</title><rect x="873.0" y="1059.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="876.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (163 samples, 13.64%)</title><rect x="876.0" y="1075.0" width="160.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="879.0" y="1086.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (163 samples, 13.64%)</title><rect x="876.0" y="1059.0" width="160.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="879.0" y="1070.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.17%)</title><rect x="884.9" y="1043.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="887.9" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="886.9" y="1043.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="889.9" y="1054.0"></text>
</g>
<g>
<title>Unsafe_Park (147 samples, 12.30%)</title><rect x="887.8" y="1043.0" width="145.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="890.8" y="1054.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="891.8" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="894.8" y="1038.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="892.8" y="1027.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="895.8" y="1038.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 1.42%)</title><rect x="893.8" y="1027.0" width="16.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="896.8" y="1038.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.33%)</title><rect x="901.7" y="1011.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="904.7" y="1022.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="901.7" y="995.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="904.7" y="1006.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.17%)</title><rect x="902.7" y="995.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="905.7" y="1006.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="904.6" y="995.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="907.6" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.17%)</title><rect x="905.6" y="1011.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="908.6" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.17%)</title><rect x="907.6" y="1011.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="910.6" y="1022.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="909.6" y="1011.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="912.6" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="910.6" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="913.6" y="1038.0"></text>
</g>
<g>
<title>__lll_lock_wait (4 samples, 0.33%)</title><rect x="911.5" y="1027.0" width="4.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="914.5" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (36 samples, 3.01%)</title><rect x="915.5" y="1027.0" width="35.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="918.5" y="1038.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (55 samples, 4.60%)</title><rect x="951.0" y="1027.0" width="54.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="954.0" y="1038.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.17%)</title><rect x="1005.3" y="1027.0" width="2.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1008.3" y="1038.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.25%)</title><rect x="1007.3" y="1027.0" width="3.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1010.3" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.33%)</title><rect x="1010.3" y="1027.0" width="3.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1013.3" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="1014.2" y="1027.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1017.2" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.42%)</title><rect x="1015.2" y="1027.0" width="5.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1018.2" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.17%)</title><rect x="1020.2" y="1027.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1023.2" y="1038.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="1022.1" y="1027.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1025.1" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1023.1" y="1027.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.1" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (6 samples, 0.50%)</title><rect x="1024.1" y="1027.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1027.1" y="1038.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.25%)</title><rect x="1030.0" y="1027.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1033.0" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="1033.0" y="1043.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1036.0" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1035.0" y="1043.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1038.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1036.9" y="1171.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1039.9" y="1182.0"></text>
</g>
<g>
<title>start_thread (154 samples, 12.89%)</title><rect x="1037.9" y="1171.0" width="152.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1040.9" y="1182.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (154 samples, 12.89%)</title><rect x="1037.9" y="1155.0" width="152.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1040.9" y="1166.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 1.67%)</title><rect x="1037.9" y="1139.0" width="19.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1040.9" y="1150.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.25%)</title><rect x="1037.9" y="1123.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1040.9" y="1134.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.25%)</title><rect x="1037.9" y="1107.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.9" y="1118.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1037.9" y="1091.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1040.9" y="1102.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="1038.9" y="1091.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1041.9" y="1102.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.42%)</title><rect x="1040.9" y="1123.0" width="16.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1043.9" y="1134.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.33%)</title><rect x="1040.9" y="1107.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1043.9" y="1118.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.08%)</title><rect x="1040.9" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1043.9" y="1102.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1041.9" y="1091.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1044.9" y="1102.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="1042.9" y="1091.0" width="1.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1045.9" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.50%)</title><rect x="1044.8" y="1107.0" width="6.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1047.8" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="1044.8" y="1091.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.8" y="1102.0"></text>
</g>
<g>
<title>G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker() (1 samples, 0.08%)</title><rect x="1044.8" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.8" y="1086.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1045.8" y="1075.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.8" y="1086.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1045.8" y="1059.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.8" y="1070.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.08%)</title><rect x="1045.8" y="1043.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.8" y="1054.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.08%)</title><rect x="1045.8" y="1027.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1048.8" y="1038.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.08%)</title><rect x="1045.8" y="1011.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1048.8" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.33%)</title><rect x="1046.8" y="1091.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1049.8" y="1102.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.33%)</title><rect x="1046.8" y="1075.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1049.8" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.50%)</title><rect x="1050.8" y="1107.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1053.8" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.50%)</title><rect x="1050.8" y="1091.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1053.8" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.42%)</title><rect x="1050.8" y="1075.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.8" y="1086.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.42%)</title><rect x="1050.8" y="1059.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1053.8" y="1070.0"></text>
</g>
<g>
<title>PtrQueueSet::deallocate_buffer(void**) (1 samples, 0.08%)</title><rect x="1051.8" y="1043.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1054.8" y="1054.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="1051.8" y="1027.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1054.8" y="1038.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="1051.8" y="1011.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1054.8" y="1022.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.25%)</title><rect x="1052.7" y="1043.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1055.7" y="1054.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.25%)</title><rect x="1052.7" y="1027.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1055.7" y="1038.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.17%)</title><rect x="1053.7" y="1011.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.7" y="1022.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="1053.7" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1056.7" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1054.7" y="995.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1057.7" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="1055.7" y="1075.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1058.7" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="1055.7" y="1059.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1058.7" y="1070.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1055.7" y="1043.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1058.7" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="1055.7" y="1027.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1058.7" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="1055.7" y="1011.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1058.7" y="1022.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="1056.7" y="1107.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1059.7" y="1118.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="1056.7" y="1091.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1059.7" y="1102.0"></text>
</g>
<g>
<title>JavaThread::run() (132 samples, 11.05%)</title><rect x="1057.7" y="1139.0" width="130.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1060.7" y="1150.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (132 samples, 11.05%)</title><rect x="1057.7" y="1123.0" width="130.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1060.7" y="1134.0">JavaThread::thre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (131 samples, 10.96%)</title><rect x="1057.7" y="1107.0" width="129.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.7" y="1118.0">CompileBroker::c..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (129 samples, 10.79%)</title><rect x="1057.7" y="1091.0" width="127.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.7" y="1102.0">CompileBroker::i..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (127 samples, 10.63%)</title><rect x="1057.7" y="1075.0" width="125.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1060.7" y="1086.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (127 samples, 10.63%)</title><rect x="1057.7" y="1059.0" width="125.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.7" y="1070.0">Compile::Compil..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.08%)</title><rect x="1057.7" y="1043.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.7" y="1054.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.08%)</title><rect x="1057.7" y="1027.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.7" y="1038.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1057.7" y="1011.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.7" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1057.7" y="995.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1060.7" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1057.7" y="979.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1060.7" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1057.7" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.7" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1057.7" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1060.7" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1057.7" y="931.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.7" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1057.7" y="915.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1060.7" y="926.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1057.7" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.7" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1057.7" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.7" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1057.7" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.7" y="878.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1057.7" y="851.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1060.7" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1057.7" y="835.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1060.7" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1057.7" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1060.7" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.08%)</title><rect x="1057.7" y="803.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1060.7" y="814.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.08%)</title><rect x="1057.7" y="787.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.7" y="798.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (64 samples, 5.36%)</title><rect x="1058.7" y="1043.0" width="63.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.7" y="1054.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.17%)</title><rect x="1058.7" y="1027.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.7" y="1038.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.17%)</title><rect x="1058.7" y="1011.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.7" y="1022.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.33%)</title><rect x="1060.6" y="1027.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1063.6" y="1038.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.08%)</title><rect x="1061.6" y="1011.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.6" y="1022.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.08%)</title><rect x="1062.6" y="1011.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.6" y="1022.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.08%)</title><rect x="1063.6" y="1011.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.6" y="1022.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.08%)</title><rect x="1064.6" y="1027.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1067.6" y="1038.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.42%)</title><rect x="1065.6" y="1027.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.6" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.42%)</title><rect x="1065.6" y="1011.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1068.6" y="1022.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1067.6" y="995.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.6" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.17%)</title><rect x="1068.5" y="995.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1071.5" y="1006.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1069.5" y="979.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1072.5" y="990.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1069.5" y="963.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.5" y="974.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="1070.5" y="1027.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.5" y="1038.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.08%)</title><rect x="1070.5" y="1011.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.5" y="1022.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="1070.5" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.5" y="1006.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1070.5" y="979.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.5" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.33%)</title><rect x="1071.5" y="1027.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1074.5" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.08%)</title><rect x="1071.5" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1074.5" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.25%)</title><rect x="1072.5" y="1011.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1075.5" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1072.5" y="995.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1075.5" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1073.5" y="995.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1076.5" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="1073.5" y="979.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.5" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1074.5" y="995.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (47 samples, 3.93%)</title><rect x="1075.5" y="1027.0" width="46.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.5" y="1038.0">Phas..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1075.5" y="1011.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1078.5" y="1022.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1076.4" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.4" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.08%)</title><rect x="1077.4" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.08%)</title><rect x="1077.4" y="995.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1080.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.08%)</title><rect x="1078.4" y="1011.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.08%)</title><rect x="1078.4" y="995.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.4" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1078.4" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.59%)</title><rect x="1079.4" y="1011.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1082.4" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.67%)</title><rect x="1086.3" y="1011.0" width="7.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.3" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1089.3" y="995.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1092.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.17%)</title><rect x="1090.3" y="995.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.3" y="1006.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.08%)</title><rect x="1092.2" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.2" y="1006.0"></text>
</g>
<g>
<title>loadConI0Node::rule() const (1 samples, 0.08%)</title><rect x="1093.2" y="995.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1096.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (9 samples, 0.75%)</title><rect x="1094.2" y="1011.0" width="8.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.2" y="1022.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1099.2" y="995.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1102.2" y="1006.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1100.1" y="995.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.1" y="1006.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="1101.1" y="995.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1104.1" y="1006.0"></text>
</g>
<g>
<title>rRegNOper::type() const (1 samples, 0.08%)</title><rect x="1102.1" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.33%)</title><rect x="1103.1" y="1011.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.17%)</title><rect x="1105.1" y="995.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.1" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1106.1" y="979.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.1" y="990.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1106.1" y="963.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.1" y="974.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.25%)</title><rect x="1107.1" y="1011.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.1" y="1022.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.25%)</title><rect x="1107.1" y="995.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.1" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.08%)</title><rect x="1107.1" y="979.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.1" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.17%)</title><rect x="1108.0" y="979.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.0" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.08%)</title><rect x="1109.0" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.0" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.25%)</title><rect x="1110.0" y="1011.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.0" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.25%)</title><rect x="1110.0" y="995.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.0" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.59%)</title><rect x="1113.0" y="1011.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.0" y="1022.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1116.9" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.9" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="1117.9" y="995.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.9" y="1006.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="1118.9" y="979.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.9" y="990.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1119.9" y="1011.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1122.9" y="1022.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.08%)</title><rect x="1120.9" y="1011.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1123.9" y="1022.0"></text>
</g>
<g>
<title>Compile::Optimize() (49 samples, 4.10%)</title><rect x="1121.9" y="1043.0" width="48.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.9" y="1054.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.17%)</title><rect x="1121.9" y="1027.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.9" y="1038.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.17%)</title><rect x="1121.9" y="1011.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.9" y="1022.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1123.8" y="1027.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.33%)</title><rect x="1124.8" y="1027.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.33%)</title><rect x="1124.8" y="1011.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1124.8" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::address_offset(Node*, PhaseTransform*) (1 samples, 0.08%)</title><rect x="1124.8" y="979.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.25%)</title><rect x="1125.8" y="995.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="979.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="931.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="915.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="899.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="867.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="851.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="835.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="803.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="787.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1127.8" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.8" y="766.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.25%)</title><rect x="1128.8" y="1027.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.8" y="1038.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1131.7" y="1027.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.7" y="1038.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1131.7" y="1011.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (31 samples, 2.59%)</title><rect x="1132.7" y="1027.0" width="30.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.7" y="1038.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.17%)</title><rect x="1132.7" y="1011.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.7" y="1022.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1133.7" y="995.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1134.7" y="1011.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 1.76%)</title><rect x="1136.7" y="1011.0" width="20.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (19 samples, 1.59%)</title><rect x="1138.7" y="995.0" width="18.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1138.7" y="979.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (18 samples, 1.51%)</title><rect x="1139.6" y="979.0" width="17.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.25%)</title><rect x="1153.5" y="963.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1156.4" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1157.4" y="1011.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.33%)</title><rect x="1158.4" y="1011.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.08%)</title><rect x="1160.4" y="995.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.08%)</title><rect x="1160.4" y="979.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1161.4" y="995.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1161.4" y="979.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1161.4" y="963.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.4" y="974.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1162.4" y="1011.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.59%)</title><rect x="1163.3" y="1027.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.59%)</title><rect x="1163.3" y="1011.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="1022.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1163.3" y="995.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="1006.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1163.3" y="979.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.3" y="990.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1163.3" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.3" y="974.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1163.3" y="947.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.3" y="958.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1164.3" y="995.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1165.3" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.3" y="1006.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1166.3" y="995.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.3" y="1006.0"></text>
</g>
<g>
<title>Node::set_req_X(unsigned int, Node*, PhaseIterGVN*) (1 samples, 0.08%)</title><rect x="1166.3" y="979.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.3" y="990.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1167.3" y="979.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.3" y="990.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1168.3" y="995.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.3" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.17%)</title><rect x="1168.3" y="979.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.3" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.3" y="963.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.3" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.3" y="947.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.3" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.3" y="931.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.3" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.3" y="915.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.3" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1168.3" y="899.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.3" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1168.3" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.3" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1168.3" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.3" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1168.3" y="851.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1168.3" y="835.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.3" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1168.3" y="819.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.3" y="830.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1168.3" y="803.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.3" y="814.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1168.3" y="787.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.3" y="798.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1169.3" y="883.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.3" y="894.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1169.3" y="867.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.84%)</title><rect x="1170.3" y="1043.0" width="9.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.3" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.84%)</title><rect x="1170.3" y="1027.0" width="9.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.84%)</title><rect x="1170.3" y="1011.0" width="9.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.84%)</title><rect x="1170.3" y="995.0" width="9.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.84%)</title><rect x="1170.3" y="979.0" width="9.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.84%)</title><rect x="1170.3" y="963.0" width="9.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.67%)</title><rect x="1170.3" y="947.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.67%)</title><rect x="1170.3" y="931.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.67%)</title><rect x="1170.3" y="915.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.67%)</title><rect x="1170.3" y="899.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.67%)</title><rect x="1170.3" y="883.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.67%)</title><rect x="1170.3" y="867.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="878.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1170.3" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.3" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1170.3" y="835.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.3" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1170.3" y="819.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.3" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1170.3" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.3" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1170.3" y="787.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.3" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1170.3" y="771.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="782.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.08%)</title><rect x="1171.2" y="851.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.2" y="862.0"></text>
</g>
<g>
<title>TypeKlassPtr::as_instance_type() const (1 samples, 0.08%)</title><rect x="1171.2" y="835.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_ptr_type(TypePtr::PTR) const (1 samples, 0.08%)</title><rect x="1171.2" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.2" y="830.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1171.2" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.2" y="814.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.08%)</title><rect x="1171.2" y="787.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.42%)</title><rect x="1172.2" y="851.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.2" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.42%)</title><rect x="1172.2" y="835.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.42%)</title><rect x="1172.2" y="819.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.42%)</title><rect x="1172.2" y="803.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.42%)</title><rect x="1172.2" y="787.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.42%)</title><rect x="1172.2" y="771.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.2" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.42%)</title><rect x="1172.2" y="755.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.2" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.42%)</title><rect x="1172.2" y="739.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.42%)</title><rect x="1172.2" y="723.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.42%)</title><rect x="1172.2" y="707.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.42%)</title><rect x="1172.2" y="691.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.42%)</title><rect x="1172.2" y="675.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.42%)</title><rect x="1172.2" y="659.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.42%)</title><rect x="1172.2" y="643.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.42%)</title><rect x="1172.2" y="627.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.42%)</title><rect x="1172.2" y="611.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.42%)</title><rect x="1172.2" y="595.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.42%)</title><rect x="1172.2" y="579.0" width="5.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.42%)</title><rect x="1172.2" y="563.0" width="5.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.42%)</title><rect x="1172.2" y="547.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.42%)</title><rect x="1172.2" y="531.0" width="5.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.42%)</title><rect x="1172.2" y="515.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.42%)</title><rect x="1172.2" y="499.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.2" y="510.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.08%)</title><rect x="1172.2" y="483.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.2" y="494.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.08%)</title><rect x="1172.2" y="467.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.2" y="478.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*) (1 samples, 0.08%)</title><rect x="1172.2" y="451.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.2" y="462.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1172.2" y="435.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1175.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1173.2" y="483.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1173.2" y="467.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1173.2" y="451.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1173.2" y="435.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1173.2" y="419.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1173.2" y="403.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.2" y="414.0"></text>
</g>
<g>
<title>Parse::add_safepoint() (1 samples, 0.08%)</title><rect x="1173.2" y="387.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.2" y="398.0"></text>
</g>
<g>
<title>SafePointNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1173.2" y="371.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1174.2" y="387.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.2" y="398.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1174.2" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.2" y="382.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.08%)</title><rect x="1174.2" y="355.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.2" y="366.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.08%)</title><rect x="1174.2" y="339.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.2" y="350.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.08%)</title><rect x="1174.2" y="323.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.2" y="334.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.08%)</title><rect x="1174.2" y="307.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.2" y="318.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.08%)</title><rect x="1174.2" y="291.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.2" y="302.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.08%)</title><rect x="1174.2" y="275.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.2" y="286.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1174.2" y="259.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1177.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1175.2" y="371.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.2" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1175.2" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1175.2" y="339.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1175.2" y="323.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1175.2" y="307.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1175.2" y="291.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1175.2" y="275.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.2" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1175.2" y="259.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1175.2" y="243.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1175.2" y="227.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1175.2" y="211.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1175.2" y="195.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.2" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1175.2" y="179.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1175.2" y="163.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1175.2" y="147.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1175.2" y="131.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1175.2" y="115.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.2" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1175.2" y="99.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="110.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1175.2" y="83.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="94.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.08%)</title><rect x="1175.2" y="67.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.2" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1175.2" y="51.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.2" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1175.2" y="35.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1176.2" y="387.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.2" y="398.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1176.2" y="371.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.2" y="382.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1176.2" y="355.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.2" y="366.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1176.2" y="339.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.2" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.2" y="851.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.2" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.2" y="835.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.2" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.2" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.2" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.2" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.2" y="771.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.2" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.2" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.2" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.2" y="723.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.2" y="707.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.2" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.2" y="675.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.2" y="659.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.2" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.2" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.2" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.2" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.2" y="595.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.2" y="579.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.2" y="563.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.2" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.2" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.2" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.2" y="531.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.2" y="515.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.2" y="499.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.2" y="483.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.2" y="467.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.2" y="451.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.2" y="435.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.2" y="419.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.2" y="403.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.2" y="387.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.2" y="371.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.2" y="355.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.2" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.2" y="339.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.2" y="323.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.2" y="307.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.2" y="291.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.2" y="275.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.2" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.2" y="259.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.2" y="243.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.2" y="227.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.2" y="211.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.2" y="195.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.2" y="179.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.2" y="190.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1177.2" y="163.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.2" y="147.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.2" y="131.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.2" y="115.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.2" y="126.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1177.2" y="99.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.2" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1178.2" y="947.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="958.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1178.2" y="931.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="942.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.08%)</title><rect x="1178.2" y="915.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="926.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1178.2" y="899.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.1" y="931.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.1" y="915.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.1" y="899.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.1" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.1" y="867.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.1" y="851.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.1" y="835.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.1" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1179.1" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1179.1" y="803.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1179.1" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1179.1" y="771.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1179.1" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.1" y="766.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1179.1" y="739.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="750.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1179.1" y="723.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="734.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1179.1" y="707.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="718.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1179.1" y="691.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="702.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.08%)</title><rect x="1179.1" y="675.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.1" y="686.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (3 samples, 0.25%)</title><rect x="1180.1" y="1043.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.1" y="1054.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.17%)</title><rect x="1181.1" y="1027.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="1038.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.17%)</title><rect x="1183.1" y="1075.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="1086.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.17%)</title><rect x="1183.1" y="1059.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.1" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.17%)</title><rect x="1183.1" y="1043.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.17%)</title><rect x="1183.1" y="1027.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="1038.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.17%)</title><rect x="1183.1" y="1011.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="1022.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.17%)</title><rect x="1183.1" y="995.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="1006.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.17%)</title><rect x="1183.1" y="979.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.1" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.17%)</title><rect x="1183.1" y="963.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.17%)</title><rect x="1183.1" y="947.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.17%)</title><rect x="1183.1" y="931.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.17%)</title><rect x="1183.1" y="915.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.17%)</title><rect x="1183.1" y="899.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.1" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.17%)</title><rect x="1183.1" y="883.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.17%)</title><rect x="1183.1" y="867.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.17%)</title><rect x="1183.1" y="851.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.1" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.17%)</title><rect x="1183.1" y="835.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.1" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1183.1" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1183.1" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1183.1" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.1" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1183.1" y="771.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1183.1" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1183.1" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1183.1" y="723.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1183.1" y="707.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1183.1" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1183.1" y="675.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="686.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1183.1" y="659.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="670.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.08%)</title><rect x="1183.1" y="643.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="654.0"></text>
</g>
<g>
<title>ciSymbol::ciSymbol(Symbol*, vmSymbols::SID) (1 samples, 0.08%)</title><rect x="1183.1" y="627.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.08%)</title><rect x="1184.1" y="819.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.1" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1184.1" y="803.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.1" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1184.1" y="787.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.08%)</title><rect x="1184.1" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="782.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.17%)</title><rect x="1185.1" y="1091.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.1" y="1102.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.17%)</title><rect x="1185.1" y="1075.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.1" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.17%)</title><rect x="1185.1" y="1059.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.1" y="1070.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (2 samples, 0.17%)</title><rect x="1185.1" y="1043.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.1" y="1054.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.08%)</title><rect x="1185.1" y="1027.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.1" y="1038.0"></text>
</g>
<g>
<title>nmethod::make_not_entrant_or_zombie(unsigned int) (1 samples, 0.08%)</title><rect x="1186.1" y="1027.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.1" y="1038.0"></text>
</g>
<g>
<title>nmethod::flush_dependencies(BoolObjectClosure*) (1 samples, 0.08%)</title><rect x="1186.1" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::remove_dependent_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1186.1" y="995.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="1006.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1187.0" y="1107.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.0" y="1118.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1187.0" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="1102.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1187.0" y="1075.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.0" y="1086.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.08%)</title><rect x="1187.0" y="1059.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.0" y="1070.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.08%)</title><rect x="1187.0" y="1043.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="1054.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.08%)</title><rect x="1187.0" y="1027.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="1038.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1187.0" y="1011.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.0" y="1022.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.17%)</title><rect x="1188.0" y="1139.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.0" y="1150.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.17%)</title><rect x="1188.0" y="1123.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.0" y="1134.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.17%)</title><rect x="1188.0" y="1107.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.0" y="1118.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.17%)</title><rect x="1188.0" y="1091.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="1102.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.17%)</title><rect x="1188.0" y="1075.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.17%)</title><rect x="1188.0" y="1059.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.0" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1188.0" y="1043.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.0" y="1054.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.08%)</title><rect x="1188.0" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.0" y="1038.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.08%)</title><rect x="1188.0" y="1011.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.0" y="1022.0"></text>
</g>
<g>
<title>__ceil_sse41 (1 samples, 0.08%)</title><rect x="1189.0" y="1043.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1192.0" y="1054.0"></text>
</g>
</g>
</svg>
