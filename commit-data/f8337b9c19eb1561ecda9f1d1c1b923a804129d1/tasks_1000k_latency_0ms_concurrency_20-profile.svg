<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,515 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (313 samples, 20.66%)</title><rect x="10.8" y="2035.0" width="243.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.8" y="2046.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="10.8" y="2019.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.8" y="2030.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="10.8" y="2003.0" width="0.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="13.8" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (312 samples, 20.59%)</title><rect x="11.6" y="2019.0" width="243.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.6" y="2030.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.07%)</title><rect x="11.6" y="2003.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.6" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.07%)</title><rect x="11.6" y="1987.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.6" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="11.6" y="1971.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.6" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="11.6" y="1955.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.6" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="11.6" y="1939.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.6" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="11.6" y="1923.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.6" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="11.6" y="1907.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="11.6" y="1891.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="11.6" y="1875.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.07%)</title><rect x="12.3" y="2003.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.3" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="12.3" y="1987.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.3" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="12.3" y="1971.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.3" y="1982.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="12.3" y="1955.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.3" y="1966.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="12.3" y="1939.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.3" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="12.3" y="1923.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="12.3" y="1907.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.3" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.33%)</title><rect x="13.1" y="2003.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.1" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.33%)</title><rect x="13.1" y="1987.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.1" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.33%)</title><rect x="13.1" y="1971.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.1" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$260/1035076264.accept (5 samples, 0.33%)</title><rect x="13.1" y="1955.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.1" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.33%)</title><rect x="13.1" y="1939.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.1" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.33%)</title><rect x="13.1" y="1923.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.1" y="1934.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.33%)</title><rect x="13.1" y="1907.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.1" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.13%)</title><rect x="17.0" y="2003.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.07%)</title><rect x="17.0" y="1987.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.0" y="1998.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="17.8" y="1987.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.8" y="1998.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="17.8" y="1971.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.8" y="1982.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (231 samples, 15.25%)</title><rect x="18.6" y="2003.0" width="179.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="21.6" y="2014.0">java/lang/Iterable.forE..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/1919132017.accept (227 samples, 14.98%)</title><rect x="18.6" y="1987.0" width="176.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.6" y="1998.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (226 samples, 14.92%)</title><rect x="19.3" y="1971.0" width="176.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.3" y="1982.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (174 samples, 11.49%)</title><rect x="22.5" y="1955.0" width="135.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.5" y="1966.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (174 samples, 11.49%)</title><rect x="22.5" y="1939.0" width="135.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.5" y="1950.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (174 samples, 11.49%)</title><rect x="22.5" y="1923.0" width="135.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.5" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (174 samples, 11.49%)</title><rect x="22.5" y="1907.0" width="135.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.5" y="1918.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (174 samples, 11.49%)</title><rect x="22.5" y="1891.0" width="135.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.5" y="1902.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (174 samples, 11.49%)</title><rect x="22.5" y="1875.0" width="135.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.5" y="1886.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (127 samples, 8.38%)</title><rect x="56.0" y="1859.0" width="98.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="59.0" y="1870.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 1.72%)</title><rect x="57.5" y="1843.0" width="20.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 1.72%)</title><rect x="57.5" y="1827.0" width="20.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (26 samples, 1.72%)</title><rect x="57.5" y="1811.0" width="20.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.73%)</title><rect x="77.8" y="1843.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="80.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (11 samples, 0.73%)</title><rect x="77.8" y="1827.0" width="8.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (5 samples, 0.33%)</title><rect x="80.1" y="1811.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.1" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.20%)</title><rect x="81.7" y="1795.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="84.7" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.20%)</title><rect x="84.0" y="1811.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (88 samples, 5.81%)</title><rect x="86.3" y="1843.0" width="68.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.3" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (88 samples, 5.81%)</title><rect x="86.3" y="1827.0" width="68.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.3" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (86 samples, 5.68%)</title><rect x="86.3" y="1811.0" width="67.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.3" y="1822.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (86 samples, 5.68%)</title><rect x="86.3" y="1795.0" width="67.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="89.3" y="1806.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (86 samples, 5.68%)</title><rect x="86.3" y="1779.0" width="67.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.3" y="1790.0">sun/mis..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="86.3" y="1763.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="89.3" y="1774.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.13%)</title><rect x="87.1" y="1763.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="90.1" y="1774.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="88.7" y="1763.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="91.7" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (71 samples, 4.69%)</title><rect x="89.4" y="1763.0" width="55.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="92.4" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.20%)</title><rect x="89.4" y="1747.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="92.4" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="91.8" y="1747.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="94.8" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.13%)</title><rect x="92.6" y="1747.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="95.6" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (47 samples, 3.10%)</title><rect x="94.1" y="1747.0" width="36.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="97.1" y="1758.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.26%)</title><rect x="130.7" y="1747.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="133.7" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 0.92%)</title><rect x="133.8" y="1747.0" width="10.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="136.8" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.26%)</title><rect x="144.7" y="1763.0" width="3.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="147.7" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.33%)</title><rect x="147.9" y="1763.0" width="3.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="150.9" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.13%)</title><rect x="151.8" y="1763.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="154.8" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.13%)</title><rect x="153.3" y="1811.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.13%)</title><rect x="154.9" y="1859.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="157.9" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.13%)</title><rect x="154.9" y="1843.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="157.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.13%)</title><rect x="154.9" y="1827.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.9" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="156.4" y="1859.0" width="1.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="159.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (3 samples, 0.20%)</title><rect x="158.0" y="1955.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="161.0" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.20%)</title><rect x="158.0" y="1939.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.0" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (11 samples, 0.73%)</title><rect x="160.3" y="1955.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.3" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.73%)</title><rect x="160.3" y="1939.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.3" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.73%)</title><rect x="160.3" y="1923.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.3" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (32 samples, 2.11%)</title><rect x="168.9" y="1955.0" width="24.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="171.9" y="1966.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (30 samples, 1.98%)</title><rect x="169.7" y="1939.0" width="23.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="172.7" y="1950.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.59%)</title><rect x="186.0" y="1923.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.0" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.20%)</title><rect x="186.0" y="1907.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="189.0" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.20%)</title><rect x="186.0" y="1891.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="189.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.20%)</title><rect x="186.0" y="1875.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.0" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="187.6" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="190.6" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.07%)</title><rect x="187.6" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="190.6" y="1854.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="187.6" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="190.6" y="1838.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="187.6" y="1811.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="190.6" y="1822.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="187.6" y="1795.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="190.6" y="1806.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.13%)</title><rect x="188.4" y="1907.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.4" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.26%)</title><rect x="189.9" y="1907.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="192.9" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="193.0" y="1939.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="196.0" y="1950.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="193.8" y="1955.0" width="1.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="196.8" y="1966.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="195.4" y="1987.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="198.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="196.2" y="1987.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.2" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.07%)</title><rect x="196.2" y="1971.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="196.2" y="1955.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.13%)</title><rect x="196.9" y="1987.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.9" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.13%)</title><rect x="196.9" y="1971.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="199.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.13%)</title><rect x="196.9" y="1955.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="199.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.13%)</title><rect x="196.9" y="1939.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="199.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (72 samples, 4.75%)</title><rect x="198.5" y="2003.0" width="56.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="201.5" y="2014.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (72 samples, 4.75%)</title><rect x="198.5" y="1987.0" width="56.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="201.5" y="1998.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (40 samples, 2.64%)</title><rect x="200.0" y="1971.0" width="31.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.0" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.13%)</title><rect x="200.0" y="1955.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.13%)</title><rect x="200.0" y="1939.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (2 samples, 0.13%)</title><rect x="200.0" y="1923.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.update (1 samples, 0.07%)</title><rect x="200.8" y="1907.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="203.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="201.6" y="1955.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="201.6" y="1939.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="204.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$255/237258746.shouldBlock (1 samples, 0.07%)</title><rect x="201.6" y="1923.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="204.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.07%)</title><rect x="201.6" y="1907.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.07%)</title><rect x="201.6" y="1891.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.07%)</title><rect x="201.6" y="1875.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="204.6" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="201.6" y="1859.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.6" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="201.6" y="1843.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.6" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="201.6" y="1827.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.6" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="201.6" y="1811.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.6" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="201.6" y="1795.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.6" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="201.6" y="1779.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.6" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.07%)</title><rect x="201.6" y="1763.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.6" y="1774.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method_ic_miss(JavaThread*) (1 samples, 0.07%)</title><rect x="201.6" y="1747.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="204.6" y="1758.0"></text>
</g>
<g>
<title>SharedRuntime::handle_ic_miss_helper(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="201.6" y="1731.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="204.6" y="1742.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.07%)</title><rect x="201.6" y="1715.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="204.6" y="1726.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.07%)</title><rect x="201.6" y="1699.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="204.6" y="1710.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokeinterface(CallInfo&amp;, Handle, constantPoolHandle, int, Thread*) (1 samples, 0.07%)</title><rect x="201.6" y="1683.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="204.6" y="1694.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="201.6" y="1667.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="204.6" y="1678.0"></text>
</g>
<g>
<title>LinkResolver::lookup_instance_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, Thread*) (1 samples, 0.07%)</title><rect x="201.6" y="1651.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="204.6" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (37 samples, 2.44%)</title><rect x="202.4" y="1955.0" width="28.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="205.4" y="1966.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (37 samples, 2.44%)</title><rect x="202.4" y="1939.0" width="28.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="205.4" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (32 samples, 2.11%)</title><rect x="202.4" y="1923.0" width="24.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="205.4" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (32 samples, 2.11%)</title><rect x="202.4" y="1907.0" width="24.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.4" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (21 samples, 1.39%)</title><rect x="204.7" y="1891.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (10 samples, 0.66%)</title><rect x="213.3" y="1875.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (10 samples, 0.66%)</title><rect x="213.3" y="1859.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (10 samples, 0.66%)</title><rect x="213.3" y="1843.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (10 samples, 0.66%)</title><rect x="213.3" y="1827.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (10 samples, 0.66%)</title><rect x="213.3" y="1811.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (10 samples, 0.66%)</title><rect x="213.3" y="1795.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (10 samples, 0.66%)</title><rect x="213.3" y="1779.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (7 samples, 0.46%)</title><rect x="221.1" y="1891.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.46%)</title><rect x="221.1" y="1875.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.46%)</title><rect x="221.1" y="1859.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.1" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.46%)</title><rect x="221.1" y="1843.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.07%)</title><rect x="226.5" y="1891.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.20%)</title><rect x="227.3" y="1923.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.20%)</title><rect x="227.3" y="1907.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.07%)</title><rect x="227.3" y="1891.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.3" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="227.3" y="1875.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="227.3" y="1859.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.13%)</title><rect x="228.1" y="1891.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.13%)</title><rect x="228.1" y="1875.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.13%)</title><rect x="228.1" y="1859.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="228.9" y="1843.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.9" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="228.9" y="1827.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="231.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="229.6" y="1923.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="232.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="229.6" y="1907.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="229.6" y="1891.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.6" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="229.6" y="1875.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.6" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="229.6" y="1859.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="232.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="230.4" y="1923.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (19 samples, 1.25%)</title><rect x="231.2" y="1971.0" width="14.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (18 samples, 1.19%)</title><rect x="231.2" y="1955.0" width="14.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (17 samples, 1.12%)</title><rect x="231.2" y="1939.0" width="13.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.2" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 0.26%)</title><rect x="231.2" y="1923.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.2" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="232.0" y="1907.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/1995810799.accept (2 samples, 0.13%)</title><rect x="232.8" y="1907.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="235.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.13%)</title><rect x="232.8" y="1891.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="232.8" y="1875.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="232.8" y="1859.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.8" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="232.8" y="1843.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="235.8" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="232.8" y="1827.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="233.5" y="1875.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="233.5" y="1859.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.5" y="1870.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="234.3" y="1923.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="234.3" y="1907.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="234.3" y="1891.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.13%)</title><rect x="235.1" y="1923.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.13%)</title><rect x="235.1" y="1907.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.1" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.13%)</title><rect x="235.1" y="1891.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.13%)</title><rect x="235.1" y="1875.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.13%)</title><rect x="235.1" y="1859.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="238.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="235.1" y="1843.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.1" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="235.9" y="1843.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.13%)</title><rect x="236.7" y="1923.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.13%)</title><rect x="236.7" y="1907.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="239.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.07%)</title><rect x="236.7" y="1891.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.7" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.07%)</title><rect x="236.7" y="1875.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="237.4" y="1891.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="237.4" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="237.4" y="1859.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="237.4" y="1843.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.4" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="237.4" y="1827.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.4" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="237.4" y="1811.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.4" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.07%)</title><rect x="237.4" y="1795.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.4" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.20%)</title><rect x="238.2" y="1923.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.2" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="239.8" y="1907.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="242.8" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="239.8" y="1891.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.07%)</title><rect x="239.8" y="1875.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.8" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.07%)</title><rect x="239.8" y="1859.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="242.8" y="1870.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.07%)</title><rect x="239.8" y="1843.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (5 samples, 0.33%)</title><rect x="240.5" y="1923.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (5 samples, 0.33%)</title><rect x="240.5" y="1907.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.5" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.20%)</title><rect x="240.5" y="1891.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.20%)</title><rect x="240.5" y="1875.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.20%)</title><rect x="240.5" y="1859.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.20%)</title><rect x="240.5" y="1843.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="243.5" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.20%)</title><rect x="240.5" y="1827.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.5" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="240.5" y="1811.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.5" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="240.5" y="1795.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.5" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="240.5" y="1779.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.5" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="240.5" y="1763.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.5" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="240.5" y="1747.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.5" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$232/1197442073.test (1 samples, 0.07%)</title><rect x="240.5" y="1731.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.5" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="241.3" y="1811.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.3" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="241.3" y="1795.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.3" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="241.3" y="1779.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="244.3" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="241.3" y="1763.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.3" y="1774.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="241.3" y="1747.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="244.3" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="242.1" y="1811.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.1" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="242.1" y="1795.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.1" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="242.1" y="1779.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.1" y="1790.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="242.1" y="1763.0" width="0.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="245.1" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (2 samples, 0.13%)</title><rect x="242.9" y="1891.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.9" y="1902.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.13%)</title><rect x="242.9" y="1875.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.13%)</title><rect x="242.9" y="1859.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.9" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (2 samples, 0.13%)</title><rect x="242.9" y="1843.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="244.4" y="1939.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.4" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="244.4" y="1923.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.4" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="244.4" y="1907.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="245.2" y="1955.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.07%)</title><rect x="245.2" y="1939.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.07%)</title><rect x="245.2" y="1923.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.07%)</title><rect x="246.0" y="1971.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.0" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="246.0" y="1955.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.0" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="246.0" y="1939.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="249.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="246.0" y="1923.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.07%)</title><rect x="246.0" y="1907.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="249.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.20%)</title><rect x="246.8" y="1971.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="246.8" y="1955.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="246.8" y="1939.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="246.8" y="1923.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.8" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="246.8" y="1907.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.8" y="1918.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="246.8" y="1891.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.8" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="246.8" y="1875.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.8" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (1 samples, 0.07%)</title><rect x="246.8" y="1859.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.8" y="1870.0"></text>
</g>
<g>
<title>__read (1 samples, 0.07%)</title><rect x="246.8" y="1843.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="249.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.13%)</title><rect x="247.6" y="1955.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="250.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.13%)</title><rect x="247.6" y="1939.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.13%)</title><rect x="247.6" y="1923.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.13%)</title><rect x="247.6" y="1907.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.13%)</title><rect x="247.6" y="1891.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.13%)</title><rect x="247.6" y="1875.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="250.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.07%)</title><rect x="247.6" y="1859.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.07%)</title><rect x="247.6" y="1843.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.instance (1 samples, 0.07%)</title><rect x="247.6" y="1827.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="247.6" y="1811.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.6" y="1822.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="247.6" y="1795.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.6" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.07%)</title><rect x="248.3" y="1859.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.07%)</title><rect x="248.3" y="1843.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="248.3" y="1827.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="251.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.07%)</title><rect x="248.3" y="1811.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="248.3" y="1795.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.07%)</title><rect x="248.3" y="1779.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="251.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="248.3" y="1763.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.3" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$6.write (1 samples, 0.07%)</title><rect x="248.3" y="1747.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.3" y="1758.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putLong (1 samples, 0.07%)</title><rect x="248.3" y="1731.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.3" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.33%)</title><rect x="249.1" y="1971.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.33%)</title><rect x="249.1" y="1955.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.26%)</title><rect x="249.1" y="1939.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.20%)</title><rect x="249.9" y="1923.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.9" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.13%)</title><rect x="250.7" y="1907.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.13%)</title><rect x="250.7" y="1891.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.13%)</title><rect x="250.7" y="1875.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.13%)</title><rect x="250.7" y="1859.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.13%)</title><rect x="250.7" y="1843.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.7" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="250.7" y="1827.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="253.7" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="251.5" y="1827.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.5" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="251.5" y="1811.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.5" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="251.5" y="1795.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.5" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.07%)</title><rect x="251.5" y="1779.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.5" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="252.2" y="1939.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.07%)</title><rect x="253.0" y="1971.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="253.0" y="1955.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="253.0" y="1939.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="253.0" y="1923.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="253.0" y="1907.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="253.0" y="1891.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="253.8" y="1971.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="253.8" y="1955.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="253.8" y="1939.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="253.8" y="1923.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="253.8" y="1907.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/Thread.run (785 samples, 51.82%)</title><rect x="254.6" y="2035.0" width="611.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.6" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (785 samples, 51.82%)</title><rect x="254.6" y="2019.0" width="611.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.6" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (785 samples, 51.82%)</title><rect x="254.6" y="2003.0" width="611.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.6" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1798824109.run (541 samples, 35.71%)</title><rect x="258.5" y="1987.0" width="421.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.5" y="1998.0">com/linecorp/decaton/processor/runtime/internal/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (541 samples, 35.71%)</title><rect x="258.5" y="1971.0" width="421.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.5" y="1982.0">com/linecorp/decaton/processor/runtime/internal/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (540 samples, 35.64%)</title><rect x="259.2" y="1955.0" width="420.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="262.2" y="1966.0">com/linecorp/decaton/processor/runtime/internal/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (533 samples, 35.18%)</title><rect x="259.2" y="1939.0" width="415.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.2" y="1950.0">com/linecorp/decaton/processor/runtime/internal/ProcessPi..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="264.7" y="1923.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="267.7" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="264.7" y="1907.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="267.7" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="264.7" y="1891.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="267.7" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (183 samples, 12.08%)</title><rect x="265.5" y="1923.0" width="142.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.5" y="1934.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (183 samples, 12.08%)</title><rect x="265.5" y="1907.0" width="142.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.5" y="1918.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (183 samples, 12.08%)</title><rect x="265.5" y="1891.0" width="142.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.5" y="1902.0">com/linecorp/decat..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="273.3" y="1875.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="276.3" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="273.3" y="1859.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="276.3" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="273.3" y="1843.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="276.3" y="1854.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="274.0" y="1875.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="277.0" y="1886.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="274.0" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="277.0" y="1870.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="274.8" y="1875.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="277.8" y="1886.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.73%)</title><rect x="275.6" y="1875.0" width="8.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="278.6" y="1886.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.59%)</title><rect x="277.2" y="1859.0" width="7.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="280.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (159 samples, 10.50%)</title><rect x="284.2" y="1875.0" width="123.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="287.2" y="1886.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (159 samples, 10.50%)</title><rect x="284.2" y="1859.0" width="123.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="287.2" y="1870.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (159 samples, 10.50%)</title><rect x="284.2" y="1843.0" width="123.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.2" y="1854.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (44 samples, 2.90%)</title><rect x="284.2" y="1827.0" width="34.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="287.2" y="1838.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.26%)</title><rect x="284.2" y="1811.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.26%)</title><rect x="284.2" y="1795.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.26%)</title><rect x="284.2" y="1779.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.2" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.26%)</title><rect x="284.2" y="1763.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="287.2" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.26%)</title><rect x="284.2" y="1747.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="287.2" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.26%)</title><rect x="284.2" y="1731.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.2" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (4 samples, 0.26%)</title><rect x="284.2" y="1715.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="287.2" y="1726.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.26%)</title><rect x="284.2" y="1699.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="287.2" y="1710.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.26%)</title><rect x="284.2" y="1683.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="287.2" y="1694.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.20%)</title><rect x="284.9" y="1667.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="287.9" y="1678.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (3 samples, 0.20%)</title><rect x="284.9" y="1651.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="287.9" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (3 samples, 0.20%)</title><rect x="284.9" y="1635.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="287.9" y="1646.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (3 samples, 0.20%)</title><rect x="284.9" y="1619.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="287.9" y="1630.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (3 samples, 0.20%)</title><rect x="284.9" y="1603.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="287.9" y="1614.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (3 samples, 0.20%)</title><rect x="284.9" y="1587.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="287.9" y="1598.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="285.7" y="1571.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="288.7" y="1582.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="285.7" y="1555.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="288.7" y="1566.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.07%)</title><rect x="286.5" y="1571.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="289.5" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (40 samples, 2.64%)</title><rect x="287.3" y="1811.0" width="31.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.3" y="1822.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="287.3" y="1795.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="290.3" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="287.3" y="1779.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="290.3" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="287.3" y="1763.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="290.3" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="287.3" y="1747.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="290.3" y="1758.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="287.3" y="1731.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="290.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (39 samples, 2.57%)</title><rect x="288.1" y="1795.0" width="30.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.1" y="1806.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (24 samples, 1.58%)</title><rect x="288.1" y="1779.0" width="18.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (24 samples, 1.58%)</title><rect x="288.1" y="1763.0" width="18.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.1" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.byteOffset (2 samples, 0.13%)</title><rect x="305.2" y="1747.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="308.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (15 samples, 0.99%)</title><rect x="306.8" y="1779.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.8" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="306.8" y="1763.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="309.8" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="306.8" y="1747.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="309.8" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="306.8" y="1731.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="309.8" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="306.8" y="1715.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="309.8" y="1726.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="306.8" y="1699.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="309.8" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="306.8" y="1683.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="309.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (14 samples, 0.92%)</title><rect x="307.5" y="1763.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (14 samples, 0.92%)</title><rect x="307.5" y="1747.0" width="10.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="310.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (14 samples, 0.92%)</title><rect x="307.5" y="1731.0" width="10.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (14 samples, 0.92%)</title><rect x="307.5" y="1715.0" width="10.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (100 samples, 6.60%)</title><rect x="318.4" y="1827.0" width="77.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.4" y="1838.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.26%)</title><rect x="318.4" y="1811.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="321.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.26%)</title><rect x="318.4" y="1795.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="321.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (4 samples, 0.26%)</title><rect x="318.4" y="1779.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="321.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 0.26%)</title><rect x="318.4" y="1763.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="321.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (4 samples, 0.26%)</title><rect x="318.4" y="1747.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="321.4" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (4 samples, 0.26%)</title><rect x="318.4" y="1731.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="321.4" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (4 samples, 0.26%)</title><rect x="318.4" y="1715.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="321.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.20%)</title><rect x="319.2" y="1699.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="322.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (10 samples, 0.66%)</title><rect x="321.6" y="1811.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.66%)</title><rect x="321.6" y="1795.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.26%)</title><rect x="326.2" y="1779.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="329.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.40%)</title><rect x="329.3" y="1811.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.40%)</title><rect x="329.3" y="1795.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="332.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.40%)</title><rect x="329.3" y="1779.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.26%)</title><rect x="330.9" y="1763.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.9" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="333.2" y="1747.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="336.2" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="333.2" y="1731.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="336.2" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="333.2" y="1715.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="336.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (12 samples, 0.79%)</title><rect x="334.0" y="1811.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="334.0" y="1795.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="337.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (11 samples, 0.73%)</title><rect x="334.8" y="1795.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="337.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (68 samples, 4.49%)</title><rect x="343.4" y="1811.0" width="52.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="346.4" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.39%)</title><rect x="343.4" y="1795.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.13%)</title><rect x="344.9" y="1779.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="347.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.40%)</title><rect x="346.5" y="1779.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="349.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.40%)</title><rect x="346.5" y="1763.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.40%)</title><rect x="346.5" y="1747.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="349.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 0.59%)</title><rect x="351.1" y="1779.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="354.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.13%)</title><rect x="358.2" y="1779.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="361.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.13%)</title><rect x="358.2" y="1763.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="361.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (47 samples, 3.10%)</title><rect x="359.7" y="1795.0" width="36.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="362.7" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (47 samples, 3.10%)</title><rect x="359.7" y="1779.0" width="36.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="362.7" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (45 samples, 2.97%)</title><rect x="361.3" y="1763.0" width="35.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="364.3" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.06%)</title><rect x="363.6" y="1747.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="365.2" y="1731.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="368.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.59%)</title><rect x="365.9" y="1731.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.59%)</title><rect x="365.9" y="1715.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="368.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.59%)</title><rect x="365.9" y="1699.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="368.9" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.46%)</title><rect x="367.5" y="1683.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="370.5" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.26%)</title><rect x="373.0" y="1731.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="376.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.26%)</title><rect x="373.0" y="1715.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="376.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.13%)</title><rect x="374.5" y="1699.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="377.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="376.1" y="1747.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.40%)</title><rect x="376.9" y="1747.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="379.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.33%)</title><rect x="377.6" y="1731.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="380.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.33%)</title><rect x="377.6" y="1715.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="380.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.33%)</title><rect x="377.6" y="1699.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="380.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.33%)</title><rect x="377.6" y="1683.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="380.6" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (16 samples, 1.06%)</title><rect x="381.5" y="1747.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="384.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (16 samples, 1.06%)</title><rect x="381.5" y="1731.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="384.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (16 samples, 1.06%)</title><rect x="381.5" y="1715.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="384.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (16 samples, 1.06%)</title><rect x="381.5" y="1699.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="384.5" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (16 samples, 1.06%)</title><rect x="381.5" y="1683.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.5" y="1694.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="390.1" y="1667.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="393.1" y="1678.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.07%)</title><rect x="390.1" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="393.1" y="1662.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="390.1" y="1635.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="393.1" y="1646.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="390.1" y="1619.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="393.1" y="1630.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.26%)</title><rect x="390.9" y="1667.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.9" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (4 samples, 0.26%)</title><rect x="390.9" y="1651.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="393.9" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/misc/ReflectUtil.isVMAnonymousClass (1 samples, 0.07%)</title><rect x="393.2" y="1635.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="396.2" y="1646.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.07%)</title><rect x="393.2" y="1619.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="396.2" y="1630.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="393.2" y="1603.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="396.2" y="1614.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="393.2" y="1587.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="396.2" y="1598.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="393.2" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="396.2" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.20%)</title><rect x="394.0" y="1747.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="397.0" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.20%)</title><rect x="394.0" y="1731.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="397.0" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.20%)</title><rect x="394.0" y="1715.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="397.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (15 samples, 0.99%)</title><rect x="396.3" y="1827.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="399.3" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (15 samples, 0.99%)</title><rect x="396.3" y="1811.0" width="11.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="399.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (15 samples, 0.99%)</title><rect x="396.3" y="1795.0" width="11.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="399.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (15 samples, 0.99%)</title><rect x="396.3" y="1779.0" width="11.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="399.3" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (15 samples, 0.99%)</title><rect x="396.3" y="1763.0" width="11.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="399.3" y="1774.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.13%)</title><rect x="406.4" y="1747.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="409.4" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (316 samples, 20.86%)</title><rect x="408.0" y="1923.0" width="246.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="411.0" y="1934.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (67 samples, 4.42%)</title><rect x="408.8" y="1907.0" width="52.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="411.8" y="1918.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (3 samples, 0.20%)</title><rect x="408.8" y="1891.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="411.8" y="1902.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (64 samples, 4.22%)</title><rect x="411.1" y="1891.0" width="49.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="414.1" y="1902.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (60 samples, 3.96%)</title><rect x="414.2" y="1875.0" width="46.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="417.2" y="1886.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.46%)</title><rect x="415.0" y="1859.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="418.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.46%)</title><rect x="415.0" y="1843.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.46%)</title><rect x="415.0" y="1827.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.46%)</title><rect x="415.0" y="1811.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.26%)</title><rect x="420.5" y="1859.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="423.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.26%)</title><rect x="420.5" y="1843.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="423.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.26%)</title><rect x="420.5" y="1827.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.26%)</title><rect x="420.5" y="1811.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="423.5" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 0.26%)</title><rect x="420.5" y="1795.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="423.5" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (48 samples, 3.17%)</title><rect x="423.6" y="1859.0" width="37.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="426.6" y="1870.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="446.2" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="449.2" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (18 samples, 1.19%)</title><rect x="447.0" y="1843.0" width="14.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="450.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.20%)</title><rect x="447.7" y="1827.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.7" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.33%)</title><rect x="450.1" y="1827.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.13%)</title><rect x="450.8" y="1811.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="453.8" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.13%)</title><rect x="452.4" y="1811.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="455.4" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 0.59%)</title><rect x="454.0" y="1827.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="457.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.46%)</title><rect x="461.0" y="1907.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="464.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.46%)</title><rect x="461.0" y="1891.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="464.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.46%)</title><rect x="461.0" y="1875.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="464.0" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="465.6" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="468.6" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="465.6" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="468.6" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="465.6" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="468.6" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="465.6" y="1811.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="468.6" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (169 samples, 11.16%)</title><rect x="466.4" y="1907.0" width="131.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="469.4" y="1918.0">com/linecorp/dec..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="468.8" y="1891.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="471.8" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.26%)</title><rect x="469.5" y="1891.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="472.5" y="1902.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.26%)</title><rect x="469.5" y="1875.0" width="3.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="472.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (161 samples, 10.63%)</title><rect x="472.7" y="1891.0" width="125.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="475.7" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="475.8" y="1875.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="478.8" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="475.8" y="1859.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="478.8" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="475.8" y="1843.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="478.8" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="475.8" y="1827.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="478.8" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="475.8" y="1811.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="478.8" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (72 samples, 4.75%)</title><rect x="476.5" y="1875.0" width="56.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="479.5" y="1886.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (41 samples, 2.71%)</title><rect x="491.3" y="1859.0" width="32.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="494.3" y="1870.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (40 samples, 2.64%)</title><rect x="492.1" y="1843.0" width="31.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="495.1" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (12 samples, 0.79%)</title><rect x="503.0" y="1827.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="506.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (12 samples, 0.79%)</title><rect x="503.0" y="1811.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="506.0" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (12 samples, 0.79%)</title><rect x="503.0" y="1795.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="506.0" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 0.73%)</title><rect x="503.0" y="1779.0" width="8.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="506.0" y="1790.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.07%)</title><rect x="503.0" y="1763.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="506.0" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.40%)</title><rect x="503.8" y="1763.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="506.8" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="503.8" y="1747.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="506.8" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="503.8" y="1731.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="506.8" y="1742.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.33%)</title><rect x="504.6" y="1747.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="507.6" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (5 samples, 0.33%)</title><rect x="504.6" y="1731.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="507.6" y="1742.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="504.6" y="1715.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="507.6" y="1726.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="504.6" y="1699.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="507.6" y="1710.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (2 samples, 0.13%)</title><rect x="505.4" y="1715.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="508.4" y="1726.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.13%)</title><rect x="506.9" y="1715.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="509.9" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.26%)</title><rect x="508.5" y="1763.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="511.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.20%)</title><rect x="508.5" y="1747.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="511.5" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="509.3" y="1731.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="512.3" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="509.3" y="1715.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="512.3" y="1726.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="510.0" y="1731.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="513.0" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="510.0" y="1715.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="513.0" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.07%)</title><rect x="510.8" y="1747.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="513.8" y="1758.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="511.6" y="1779.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="514.6" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="511.6" y="1763.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="514.6" y="1774.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (9 samples, 0.59%)</title><rect x="512.4" y="1827.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="515.4" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.26%)</title><rect x="519.4" y="1827.0" width="3.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="522.4" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="522.5" y="1827.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="525.5" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="523.3" y="1859.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="526.3" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (11 samples, 0.73%)</title><rect x="524.1" y="1859.0" width="8.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="527.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.59%)</title><rect x="532.6" y="1875.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="535.6" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.07%)</title><rect x="532.6" y="1859.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="535.6" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="532.6" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="535.6" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="532.6" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="535.6" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="532.6" y="1811.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="535.6" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="532.6" y="1795.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="535.6" y="1806.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.53%)</title><rect x="533.4" y="1859.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="536.4" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="533.4" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="536.4" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="533.4" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="536.4" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="533.4" y="1811.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="536.4" y="1822.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.46%)</title><rect x="534.2" y="1843.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="537.2" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="538.9" y="1827.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="541.9" y="1838.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (75 samples, 4.95%)</title><rect x="539.6" y="1875.0" width="58.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="542.6" y="1886.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (75 samples, 4.95%)</title><rect x="539.6" y="1859.0" width="58.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="542.6" y="1870.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.33%)</title><rect x="539.6" y="1843.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="542.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.33%)</title><rect x="539.6" y="1827.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="542.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.33%)</title><rect x="539.6" y="1811.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="542.6" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.33%)</title><rect x="539.6" y="1795.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="542.6" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.13%)</title><rect x="543.5" y="1843.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="546.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.13%)</title><rect x="543.5" y="1827.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="546.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.13%)</title><rect x="543.5" y="1811.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="546.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.13%)</title><rect x="543.5" y="1795.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="546.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.13%)</title><rect x="543.5" y="1779.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="546.5" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (68 samples, 4.49%)</title><rect x="545.1" y="1843.0" width="53.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="548.1" y="1854.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (63 samples, 4.16%)</title><rect x="549.0" y="1827.0" width="49.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="552.0" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (26 samples, 1.72%)</title><rect x="577.8" y="1811.0" width="20.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="580.8" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.13%)</title><rect x="587.1" y="1795.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="590.1" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 0.79%)</title><rect x="588.7" y="1795.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.7" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.20%)</title><rect x="595.7" y="1779.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="598.7" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.13%)</title><rect x="596.5" y="1763.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="599.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.13%)</title><rect x="596.5" y="1747.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="599.5" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="597.3" y="1731.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="600.3" y="1742.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="597.3" y="1715.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="600.3" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="597.3" y="1699.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="600.3" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (46 samples, 3.04%)</title><rect x="598.1" y="1907.0" width="35.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="601.1" y="1918.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="598.8" y="1891.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="601.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (44 samples, 2.90%)</title><rect x="599.6" y="1891.0" width="34.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="602.6" y="1902.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1863560181.process (20 samples, 1.32%)</title><rect x="602.7" y="1875.0" width="15.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="605.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (20 samples, 1.32%)</title><rect x="602.7" y="1859.0" width="15.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="605.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 1.12%)</title><rect x="602.7" y="1843.0" width="13.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="605.7" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (6 samples, 0.40%)</title><rect x="605.8" y="1827.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="608.8" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (6 samples, 0.40%)</title><rect x="605.8" y="1811.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="608.8" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 0.40%)</title><rect x="605.8" y="1795.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="608.8" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (6 samples, 0.40%)</title><rect x="605.8" y="1779.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="608.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (5 samples, 0.33%)</title><rect x="606.6" y="1763.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="609.6" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.13%)</title><rect x="609.0" y="1747.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="612.0" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.40%)</title><rect x="610.5" y="1827.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="613.5" y="1838.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="610.5" y="1811.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="613.5" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.33%)</title><rect x="611.3" y="1811.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="614.3" y="1822.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.26%)</title><rect x="612.1" y="1795.0" width="3.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="615.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.07%)</title><rect x="615.2" y="1827.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="618.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.20%)</title><rect x="616.0" y="1843.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="619.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.20%)</title><rect x="616.0" y="1827.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="619.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.20%)</title><rect x="616.0" y="1811.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="619.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.20%)</title><rect x="616.0" y="1795.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="619.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.20%)</title><rect x="616.0" y="1779.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="619.0" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 0.33%)</title><rect x="618.3" y="1875.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="621.3" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="621.4" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="624.4" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="621.4" y="1843.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="624.4" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="621.4" y="1827.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="624.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.20%)</title><rect x="622.2" y="1875.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="625.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.20%)</title><rect x="622.2" y="1859.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="625.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.07%)</title><rect x="624.5" y="1875.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="627.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.07%)</title><rect x="624.5" y="1859.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="627.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$293/1501643487.get$Lambda (1 samples, 0.07%)</title><rect x="624.5" y="1843.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="627.5" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.33%)</title><rect x="625.3" y="1875.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="628.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.33%)</title><rect x="625.3" y="1859.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="628.3" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="625.3" y="1843.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="628.3" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.26%)</title><rect x="626.1" y="1843.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="629.1" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.40%)</title><rect x="629.2" y="1875.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="632.2" y="1886.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.07%)</title><rect x="630.0" y="1859.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="633.0" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.26%)</title><rect x="630.8" y="1859.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="633.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.26%)</title><rect x="633.9" y="1907.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.45%)</title><rect x="637.0" y="1907.0" width="17.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="640.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 1.45%)</title><rect x="637.0" y="1891.0" width="17.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="640.0" y="1902.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="640.9" y="1875.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="643.9" y="1886.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.26%)</title><rect x="641.7" y="1875.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="644.7" y="1886.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="642.4" y="1859.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="645.4" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.73%)</title><rect x="644.8" y="1875.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/105535217.accept (10 samples, 0.66%)</title><rect x="644.8" y="1859.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="647.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (10 samples, 0.66%)</title><rect x="644.8" y="1843.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="647.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="644.8" y="1827.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="647.8" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="644.8" y="1811.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="647.8" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="644.8" y="1795.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="647.8" y="1806.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (9 samples, 0.59%)</title><rect x="645.6" y="1827.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="648.6" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (9 samples, 0.59%)</title><rect x="645.6" y="1811.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="648.6" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.46%)</title><rect x="646.3" y="1795.0" width="5.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="649.3" y="1806.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.46%)</title><rect x="646.3" y="1779.0" width="5.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="649.3" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="651.8" y="1795.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="654.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/1271851920.accept (1 samples, 0.07%)</title><rect x="652.6" y="1859.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="655.6" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="652.6" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="655.6" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="652.6" y="1827.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="655.6" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="652.6" y="1811.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="655.6" y="1822.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.07%)</title><rect x="653.4" y="1875.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="656.4" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.25%)</title><rect x="654.1" y="1923.0" width="14.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 1.25%)</title><rect x="654.1" y="1907.0" width="14.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="657.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (17 samples, 1.12%)</title><rect x="655.7" y="1891.0" width="13.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="658.7" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/105535217.accept (4 samples, 0.26%)</title><rect x="655.7" y="1875.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (4 samples, 0.26%)</title><rect x="655.7" y="1859.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="658.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (4 samples, 0.26%)</title><rect x="655.7" y="1843.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="658.7" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 0.26%)</title><rect x="655.7" y="1827.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="658.7" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 0.26%)</title><rect x="655.7" y="1811.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="658.7" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/1271851920.accept (13 samples, 0.86%)</title><rect x="658.8" y="1875.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="661.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (13 samples, 0.86%)</title><rect x="658.8" y="1859.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="661.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1774157784.complete (13 samples, 0.86%)</title><rect x="658.8" y="1843.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="661.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (13 samples, 0.86%)</title><rect x="658.8" y="1827.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="661.8" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1610842262.complete (13 samples, 0.86%)</title><rect x="658.8" y="1811.0" width="10.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="661.8" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (13 samples, 0.86%)</title><rect x="658.8" y="1795.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="661.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (13 samples, 0.86%)</title><rect x="658.8" y="1779.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="661.8" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 0.86%)</title><rect x="658.8" y="1763.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="661.8" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 0.86%)</title><rect x="658.8" y="1747.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="661.8" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (13 samples, 0.86%)</title><rect x="658.8" y="1731.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="661.8" y="1742.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.46%)</title><rect x="668.9" y="1923.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="671.9" y="1934.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.46%)</title><rect x="668.9" y="1907.0" width="5.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="671.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="674.4" y="1939.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.4" y="1950.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="674.4" y="1923.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="677.4" y="1934.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="674.4" y="1907.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="677.4" y="1918.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="674.4" y="1891.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="677.4" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="674.4" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="677.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (6 samples, 0.40%)</title><rect x="675.2" y="1939.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="678.2" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.33%)</title><rect x="675.2" y="1923.0" width="3.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="678.2" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.33%)</title><rect x="675.2" y="1907.0" width="3.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="678.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="679.1" y="1923.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="682.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.26%)</title><rect x="679.8" y="1987.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="682.8" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.26%)</title><rect x="679.8" y="1971.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="682.8" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.26%)</title><rect x="679.8" y="1955.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="682.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.26%)</title><rect x="679.8" y="1939.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="682.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.13%)</title><rect x="681.4" y="1923.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="684.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (235 samples, 15.51%)</title><rect x="683.0" y="1987.0" width="183.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="686.0" y="1998.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (234 samples, 15.45%)</title><rect x="683.7" y="1971.0" width="182.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="686.7" y="1982.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (210 samples, 13.86%)</title><rect x="685.3" y="1955.0" width="163.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="688.3" y="1966.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (11 samples, 0.73%)</title><rect x="701.6" y="1939.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="704.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.07%)</title><rect x="710.2" y="1939.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="713.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="710.2" y="1923.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="713.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="710.2" y="1907.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="713.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.07%)</title><rect x="710.2" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="713.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.07%)</title><rect x="710.2" y="1875.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="713.2" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (177 samples, 11.68%)</title><rect x="711.0" y="1939.0" width="137.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="714.0" y="1950.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (172 samples, 11.35%)</title><rect x="714.9" y="1923.0" width="134.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="717.9" y="1934.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.13%)</title><rect x="721.1" y="1907.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="724.1" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.20%)</title><rect x="722.7" y="1907.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="725.7" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.26%)</title><rect x="725.0" y="1907.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="728.0" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (151 samples, 9.97%)</title><rect x="728.1" y="1907.0" width="117.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="731.1" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.13%)</title><rect x="734.4" y="1891.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="737.4" y="1902.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="735.9" y="1891.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="738.9" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (30 samples, 1.98%)</title><rect x="736.7" y="1891.0" width="23.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="739.7" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (12 samples, 0.79%)</title><rect x="743.7" y="1875.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="746.7" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.13%)</title><rect x="746.0" y="1859.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="749.0" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="746.8" y="1843.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="749.8" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (7 samples, 0.46%)</title><rect x="747.6" y="1859.0" width="5.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="750.6" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="753.0" y="1875.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="756.0" y="1886.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="753.8" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="756.8" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.46%)</title><rect x="754.6" y="1875.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="757.6" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.20%)</title><rect x="760.1" y="1891.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="763.1" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.20%)</title><rect x="762.4" y="1891.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="765.4" y="1902.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.07%)</title><rect x="764.7" y="1891.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="767.7" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (4 samples, 0.26%)</title><rect x="765.5" y="1891.0" width="3.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="768.5" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (31 samples, 2.05%)</title><rect x="768.6" y="1891.0" width="24.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="771.6" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (46 samples, 3.04%)</title><rect x="792.8" y="1891.0" width="35.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="795.8" y="1902.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.26%)</title><rect x="828.6" y="1891.0" width="3.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="831.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.13%)</title><rect x="831.7" y="1891.0" width="1.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="834.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.13%)</title><rect x="833.3" y="1891.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="836.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (8 samples, 0.53%)</title><rect x="834.8" y="1891.0" width="6.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="837.8" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.20%)</title><rect x="841.1" y="1891.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="844.1" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.13%)</title><rect x="843.4" y="1891.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="846.4" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="845.0" y="1891.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="848.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.13%)</title><rect x="845.7" y="1907.0" width="1.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="848.7" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.13%)</title><rect x="847.3" y="1907.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="850.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 1.45%)</title><rect x="848.9" y="1955.0" width="17.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="851.9" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 1.45%)</title><rect x="848.9" y="1939.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="851.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 1.45%)</title><rect x="848.9" y="1923.0" width="17.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="851.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 1.45%)</title><rect x="848.9" y="1907.0" width="17.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="851.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.07%)</title><rect x="865.2" y="1891.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="868.2" y="1902.0"></text>
</g>
<g>
<title>start_thread (416 samples, 27.46%)</title><rect x="866.0" y="2035.0" width="324.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="869.0" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (416 samples, 27.46%)</title><rect x="866.0" y="2019.0" width="324.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="869.0" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.52%)</title><rect x="866.0" y="2003.0" width="17.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="869.0" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.20%)</title><rect x="866.0" y="1987.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="869.0" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.20%)</title><rect x="866.0" y="1971.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="869.0" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="866.0" y="1955.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="869.0" y="1966.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.13%)</title><rect x="866.8" y="1955.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="869.8" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.25%)</title><rect x="868.3" y="1987.0" width="14.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="871.3" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.40%)</title><rect x="868.3" y="1971.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="871.3" y="1982.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.40%)</title><rect x="868.3" y="1955.0" width="4.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="871.3" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.33%)</title><rect x="873.0" y="1971.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="876.0" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="873.0" y="1955.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="876.0" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="873.0" y="1939.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.0" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="873.0" y="1923.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="876.0" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="873.0" y="1907.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="876.0" y="1918.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.26%)</title><rect x="873.8" y="1955.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="876.8" y="1966.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="873.8" y="1939.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="876.8" y="1950.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.20%)</title><rect x="874.6" y="1939.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="877.6" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.53%)</title><rect x="876.9" y="1971.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="879.9" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.53%)</title><rect x="876.9" y="1955.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="879.9" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.53%)</title><rect x="876.9" y="1939.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="879.9" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.53%)</title><rect x="876.9" y="1923.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="879.9" y="1934.0"></text>
</g>
<g>
<title>PtrQueueSet::deallocate_buffer(void**) (1 samples, 0.07%)</title><rect x="877.7" y="1907.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="880.7" y="1918.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.40%)</title><rect x="878.4" y="1907.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="881.4" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.33%)</title><rect x="879.2" y="1891.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="882.2" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.33%)</title><rect x="879.2" y="1875.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="882.2" y="1886.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (3 samples, 0.20%)</title><rect x="879.2" y="1859.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.2" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.07%)</title><rect x="880.8" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="883.8" y="1854.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="881.6" y="1859.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="884.6" y="1870.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.07%)</title><rect x="882.3" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="885.3" y="1870.0"></text>
</g>
<g>
<title>G1RedirtyLoggedCardsTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="883.1" y="1987.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="886.1" y="1998.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::par_apply_closure_to_all_completed_buffers(CardTableEntryClosure*) (1 samples, 0.07%)</title><rect x="883.1" y="1971.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="886.1" y="1982.0"></text>
</g>
<g>
<title>JavaThread::run() (390 samples, 25.74%)</title><rect x="883.9" y="2003.0" width="303.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="886.9" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (390 samples, 25.74%)</title><rect x="883.9" y="1987.0" width="303.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="886.9" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (389 samples, 25.68%)</title><rect x="883.9" y="1971.0" width="303.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="886.9" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (389 samples, 25.68%)</title><rect x="883.9" y="1955.0" width="303.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="886.9" y="1966.0">CompileBroker::invoke_compiler_on_method(..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (386 samples, 25.48%)</title><rect x="883.9" y="1939.0" width="300.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="886.9" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMet..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (386 samples, 25.48%)</title><rect x="883.9" y="1923.0" width="300.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="886.9" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ci..</text>
</g>
<g>
<title>Compile::Code_Gen() (137 samples, 9.04%)</title><rect x="883.9" y="1907.0" width="106.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="886.9" y="1918.0">Compile::Code..</text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.07%)</title><rect x="883.9" y="1891.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="886.9" y="1902.0"></text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.33%)</title><rect x="884.7" y="1891.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="887.7" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.20%)</title><rect x="884.7" y="1875.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="887.7" y="1886.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.13%)</title><rect x="887.0" y="1875.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="890.0" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.13%)</title><rect x="887.0" y="1859.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="890.0" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.07%)</title><rect x="887.8" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="890.8" y="1854.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 0.40%)</title><rect x="888.6" y="1891.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.6" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.26%)</title><rect x="888.6" y="1875.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="891.6" y="1886.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="888.6" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="891.6" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="889.4" y="1859.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="892.4" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="889.4" y="1843.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="892.4" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.13%)</title><rect x="890.1" y="1859.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="893.1" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.13%)</title><rect x="890.1" y="1843.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="893.1" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.13%)</title><rect x="891.7" y="1875.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="894.7" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.13%)</title><rect x="891.7" y="1859.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="894.7" y="1870.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="893.2" y="1891.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="896.2" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (15 samples, 0.99%)</title><rect x="894.0" y="1891.0" width="11.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="897.0" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.13%)</title><rect x="894.0" y="1875.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="897.0" y="1886.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (2 samples, 0.13%)</title><rect x="894.0" y="1859.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="897.0" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.07%)</title><rect x="894.8" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="897.8" y="1854.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (13 samples, 0.86%)</title><rect x="895.6" y="1875.0" width="10.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="898.6" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (7 samples, 0.46%)</title><rect x="895.6" y="1859.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="898.6" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.07%)</title><rect x="901.0" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="904.0" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="901.0" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="904.0" y="1854.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="901.0" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="904.0" y="1838.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.26%)</title><rect x="901.8" y="1859.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="904.8" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.13%)</title><rect x="901.8" y="1843.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="904.8" y="1854.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="901.8" y="1827.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="904.8" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="901.8" y="1811.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="904.8" y="1822.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="902.6" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="905.6" y="1838.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="902.6" y="1811.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.6" y="1822.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="902.6" y="1795.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="905.6" y="1806.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="902.6" y="1779.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="905.6" y="1790.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="902.6" y="1763.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="905.6" y="1774.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.07%)</title><rect x="902.6" y="1747.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="905.6" y="1758.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.07%)</title><rect x="902.6" y="1731.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="905.6" y="1742.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.13%)</title><rect x="903.4" y="1843.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="906.4" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.13%)</title><rect x="903.4" y="1827.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="906.4" y="1838.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="903.4" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="906.4" y="1822.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="903.4" y="1795.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="906.4" y="1806.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.07%)</title><rect x="903.4" y="1779.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="906.4" y="1790.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.07%)</title><rect x="904.2" y="1811.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="907.2" y="1822.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.07%)</title><rect x="904.2" y="1795.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="907.2" y="1806.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="904.2" y="1779.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="907.2" y="1790.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.07%)</title><rect x="904.2" y="1763.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="907.2" y="1774.0"></text>
</g>
<g>
<title>MachOper::operator new(unsigned long, Compile*) (1 samples, 0.07%)</title><rect x="904.2" y="1747.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="907.2" y="1758.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="904.9" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="907.9" y="1870.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="904.9" y="1843.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="907.9" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (9 samples, 0.59%)</title><rect x="905.7" y="1891.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="908.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (9 samples, 0.59%)</title><rect x="905.7" y="1875.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="908.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.13%)</title><rect x="905.7" y="1859.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="908.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.13%)</title><rect x="907.3" y="1859.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="910.3" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="908.0" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="911.0" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (3 samples, 0.20%)</title><rect x="908.8" y="1859.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="911.8" y="1870.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.07%)</title><rect x="909.6" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="912.6" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="910.4" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="913.4" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.13%)</title><rect x="911.2" y="1859.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="914.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.07%)</title><rect x="912.7" y="1891.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="915.7" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (98 samples, 6.47%)</title><rect x="913.5" y="1891.0" width="76.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="916.5" y="1902.0">PhaseCha..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.13%)</title><rect x="914.3" y="1875.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="917.3" y="1886.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.07%)</title><rect x="915.8" y="1875.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="918.8" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="916.6" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="919.6" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.20%)</title><rect x="917.4" y="1875.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 0.40%)</title><rect x="919.7" y="1875.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="922.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.13%)</title><rect x="922.8" y="1859.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="925.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="923.6" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="926.6" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.40%)</title><rect x="924.4" y="1875.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="927.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="925.2" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="928.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.26%)</title><rect x="926.0" y="1859.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="929.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="928.3" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="931.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (13 samples, 0.86%)</title><rect x="929.1" y="1875.0" width="10.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="932.1" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="933.7" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="936.7" y="1870.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="934.5" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="937.5" y="1870.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="935.3" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="938.3" y="1870.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (2 samples, 0.13%)</title><rect x="936.1" y="1859.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="939.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="937.6" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="940.6" y="1870.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="938.4" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="941.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (23 samples, 1.52%)</title><rect x="939.2" y="1875.0" width="17.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="942.2" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.13%)</title><rect x="946.2" y="1859.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="947.8" y="1859.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="950.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (9 samples, 0.59%)</title><rect x="948.5" y="1859.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.5" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.26%)</title><rect x="952.4" y="1843.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="955.4" y="1854.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="955.6" y="1859.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="958.6" y="1870.0"></text>
</g>
<g>
<title>mulHiL_rRegNode::rule() const (1 samples, 0.07%)</title><rect x="956.3" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="959.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.20%)</title><rect x="957.1" y="1875.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.13%)</title><rect x="957.9" y="1859.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.07%)</title><rect x="959.5" y="1875.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="962.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.46%)</title><rect x="960.2" y="1875.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="963.2" y="1886.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="964.9" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="967.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.46%)</title><rect x="965.7" y="1875.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="968.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.26%)</title><rect x="968.0" y="1859.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="971.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (10 samples, 0.66%)</title><rect x="971.1" y="1875.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="974.1" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (10 samples, 0.66%)</title><rect x="971.1" y="1859.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.1" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (10 samples, 0.66%)</title><rect x="971.1" y="1843.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="974.1" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.20%)</title><rect x="971.1" y="1827.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.1" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="973.5" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="976.5" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (6 samples, 0.40%)</title><rect x="974.3" y="1827.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="977.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.13%)</title><rect x="978.9" y="1875.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="979.7" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="982.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.13%)</title><rect x="980.5" y="1875.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="983.5" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="980.5" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="983.5" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="981.3" y="1859.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.3" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 0.59%)</title><rect x="982.0" y="1875.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.0" y="1886.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.07%)</title><rect x="984.4" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.4" y="1870.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.13%)</title><rect x="985.2" y="1859.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.2" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.20%)</title><rect x="986.7" y="1859.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="987.5" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="990.5" y="1854.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.07%)</title><rect x="988.3" y="1843.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="991.3" y="1854.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.07%)</title><rect x="988.3" y="1827.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="991.3" y="1838.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.07%)</title><rect x="989.0" y="1875.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.0" y="1886.0"></text>
</g>
<g>
<title>storeImmL0Node::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="989.8" y="1891.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="992.8" y="1902.0"></text>
</g>
<g>
<title>Compile::Optimize() (232 samples, 15.31%)</title><rect x="990.6" y="1907.0" width="180.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="993.6" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.13%)</title><rect x="990.6" y="1891.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="993.6" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.13%)</title><rect x="990.6" y="1875.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="993.6" y="1886.0"></text>
</g>
<g>
<title>CallNode::has_non_debug_use(Node*) (1 samples, 0.07%)</title><rect x="990.6" y="1859.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="993.6" y="1870.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="991.4" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="994.4" y="1870.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="991.4" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.4" y="1854.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="992.2" y="1891.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="995.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="992.2" y="1875.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="992.2" y="1859.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="995.2" y="1870.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="992.2" y="1843.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.2" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="992.2" y="1827.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.2" y="1838.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.07%)</title><rect x="992.2" y="1811.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.2" y="1822.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.13%)</title><rect x="992.9" y="1891.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.9" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.13%)</title><rect x="992.9" y="1875.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="995.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="992.9" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.9" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="992.9" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.9" y="1854.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="992.9" y="1827.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.9" y="1838.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="992.9" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="995.9" y="1822.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="992.9" y="1795.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.9" y="1806.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.07%)</title><rect x="993.7" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.7" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (8 samples, 0.53%)</title><rect x="994.5" y="1891.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="997.5" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (8 samples, 0.53%)</title><rect x="994.5" y="1875.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="997.5" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (2 samples, 0.13%)</title><rect x="994.5" y="1859.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="997.5" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.07%)</title><rect x="995.3" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="998.3" y="1854.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::GrowableArray() (1 samples, 0.07%)</title><rect x="995.3" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="998.3" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.1" y="1859.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="999.1" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="996.1" y="1843.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="999.1" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.33%)</title><rect x="996.8" y="1859.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="999.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.33%)</title><rect x="996.8" y="1843.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="999.8" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1827.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="999.8" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1811.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="999.8" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1795.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="999.8" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1779.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="999.8" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1763.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="999.8" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1747.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="999.8" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1731.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="999.8" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1715.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="999.8" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1699.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="999.8" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1683.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="999.8" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1667.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="999.8" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1651.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="999.8" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1635.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="999.8" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1619.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="999.8" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1603.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="999.8" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1587.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="999.8" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1571.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="999.8" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1555.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="999.8" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1539.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="999.8" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1523.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="999.8" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1507.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="999.8" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1491.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="999.8" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1475.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="999.8" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1459.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="999.8" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1443.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="999.8" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1427.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="999.8" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1411.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="999.8" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1395.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.8" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1379.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="999.8" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1363.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="999.8" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1347.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="999.8" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1331.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="999.8" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1315.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="999.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1299.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="999.8" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1283.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="999.8" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1267.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="999.8" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1251.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="999.8" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1235.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="999.8" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1219.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="999.8" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1203.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="999.8" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1187.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="999.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1171.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="999.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1155.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="999.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1139.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="999.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1123.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="999.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1091.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="999.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1075.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="999.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1059.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="999.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="996.8" y="1043.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="999.8" y="1054.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="996.8" y="1027.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="999.8" y="1038.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="996.8" y="1011.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="999.8" y="1022.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="996.8" y="995.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="999.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.26%)</title><rect x="997.6" y="1827.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1000.6" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.26%)</title><rect x="997.6" y="1811.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1000.6" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.20%)</title><rect x="997.6" y="1795.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1000.6" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.20%)</title><rect x="997.6" y="1779.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.6" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="997.6" y="1763.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1000.6" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1747.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1000.6" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1731.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1000.6" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1715.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1000.6" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1699.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1000.6" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1683.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1000.6" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1667.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1000.6" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1651.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1000.6" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1635.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.6" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1619.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.6" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1603.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1000.6" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1587.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1000.6" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1571.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1000.6" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1555.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1000.6" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1539.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1000.6" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1523.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1000.6" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1507.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1000.6" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1491.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1000.6" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1475.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1000.6" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1459.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1000.6" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1443.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1000.6" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1427.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1000.6" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1411.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1000.6" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1395.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1000.6" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1000.6" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1363.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1000.6" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1347.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1000.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1331.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1000.6" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1315.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1000.6" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1299.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1000.6" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1283.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1000.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1267.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1000.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1251.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1000.6" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1235.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1000.6" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="997.6" y="1219.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1000.6" y="1230.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="997.6" y="1203.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1000.6" y="1214.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.07%)</title><rect x="998.4" y="1747.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="999.2" y="1763.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.2" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="999.2" y="1747.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="999.2" y="1731.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1002.2" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="999.2" y="1715.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.2" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="999.2" y="1699.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1002.2" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="999.2" y="1683.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1002.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="999.2" y="1667.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.2" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="999.2" y="1651.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="999.2" y="1635.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1002.2" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="999.2" y="1619.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1002.2" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="999.2" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1002.2" y="1614.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="999.2" y="1587.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1002.2" y="1598.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1000.0" y="1795.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1003.0" y="1806.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.07%)</title><rect x="1000.7" y="1891.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1003.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.07%)</title><rect x="1000.7" y="1875.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1003.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (187 samples, 12.34%)</title><rect x="1001.5" y="1891.0" width="145.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1004.5" y="1902.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1001.5" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1004.5" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1001.5" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1004.5" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1001.5" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1004.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1001.5" y="1827.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1004.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1001.5" y="1811.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1004.5" y="1822.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1001.5" y="1795.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1004.5" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1002.3" y="1875.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1005.3" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1002.3" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1005.3" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1002.3" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1005.3" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1002.3" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1005.3" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1002.3" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.3" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1002.3" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1005.3" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1002.3" y="1779.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1005.3" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1002.3" y="1763.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1005.3" y="1774.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1002.3" y="1747.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1005.3" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="1002.3" y="1731.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1005.3" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.07%)</title><rect x="1002.3" y="1715.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.3" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="1002.3" y="1699.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1005.3" y="1710.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1002.3" y="1683.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1005.3" y="1694.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="1003.1" y="1875.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1006.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.46%)</title><rect x="1003.8" y="1875.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1006.8" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.07%)</title><rect x="1008.5" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1011.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.40%)</title><rect x="1009.3" y="1875.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1012.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.20%)</title><rect x="1011.6" y="1859.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1014.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1013.2" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1016.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (157 samples, 10.36%)</title><rect x="1014.0" y="1875.0" width="122.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.0" y="1886.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (151 samples, 9.97%)</title><rect x="1017.9" y="1859.0" width="117.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1020.9" y="1870.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (8 samples, 0.53%)</title><rect x="1019.4" y="1843.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1022.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1025.7" y="1843.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1028.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (140 samples, 9.24%)</title><rect x="1026.4" y="1843.0" width="109.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.4" y="1854.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.13%)</title><rect x="1115.2" y="1827.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.13%)</title><rect x="1115.2" y="1811.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.2" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1116.0" y="1795.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.0" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (22 samples, 1.45%)</title><rect x="1116.8" y="1827.0" width="17.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.13%)</title><rect x="1133.9" y="1827.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1134.7" y="1811.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.7" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.07%)</title><rect x="1135.5" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.13%)</title><rect x="1136.3" y="1875.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.3" y="1886.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1137.0" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (8 samples, 0.53%)</title><rect x="1137.8" y="1875.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.07%)</title><rect x="1140.2" y="1859.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.07%)</title><rect x="1140.2" y="1843.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.07%)</title><rect x="1140.9" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.20%)</title><rect x="1141.7" y="1859.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1143.3" y="1843.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.20%)</title><rect x="1144.0" y="1875.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.20%)</title><rect x="1144.0" y="1859.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.0" y="1870.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1144.0" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.0" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1144.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.0" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1144.8" y="1843.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.8" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1144.8" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.8" y="1838.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1145.6" y="1827.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.6" y="1838.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="1146.4" y="1875.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (27 samples, 1.78%)</title><rect x="1147.2" y="1891.0" width="21.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.2" y="1902.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (26 samples, 1.72%)</title><rect x="1147.9" y="1875.0" width="20.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.9" y="1886.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1149.5" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.5" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1149.5" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="1854.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.3" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.3" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1151.1" y="1859.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.1" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1151.1" y="1843.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.1" y="1854.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.07%)</title><rect x="1151.1" y="1827.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.1" y="1838.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="1151.1" y="1811.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.1" y="1822.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1151.1" y="1795.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.1" y="1806.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1151.1" y="1779.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.1" y="1790.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1151.8" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.8" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1151.8" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.8" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1151.8" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.8" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.6" y="1859.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.6" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.13%)</title><rect x="1153.4" y="1859.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1155.0" y="1859.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.26%)</title><rect x="1155.7" y="1859.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.7" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1158.1" y="1843.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.1" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1158.8" y="1859.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.8" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.13%)</title><rect x="1158.8" y="1843.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.8" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1160.4" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.4" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (3 samples, 0.20%)</title><rect x="1161.2" y="1859.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="1870.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1162.0" y="1843.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.0" y="1854.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1162.0" y="1827.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.0" y="1838.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1162.7" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.7" y="1854.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1163.5" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.5" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1164.3" y="1859.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.3" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.13%)</title><rect x="1164.3" y="1843.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.3" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1165.9" y="1859.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.9" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1166.6" y="1859.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.6" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.13%)</title><rect x="1166.6" y="1843.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.6" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1827.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.6" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1811.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.6" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1795.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.6" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1779.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.6" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1763.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.6" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1747.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.6" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1731.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.6" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1715.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.6" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1699.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.6" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1683.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.6" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1667.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.6" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1651.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.6" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1635.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.6" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1619.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.6" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1166.6" y="1603.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.6" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.6" y="1587.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.6" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.6" y="1571.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.6" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1166.6" y="1555.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.6" y="1566.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1166.6" y="1539.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.6" y="1550.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1166.6" y="1523.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.6" y="1534.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1167.4" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.4" y="1598.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1167.4" y="1571.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.4" y="1582.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.13%)</title><rect x="1168.2" y="1891.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1168.2" y="1875.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1168.2" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.2" y="1870.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1168.2" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1168.2" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.2" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1169.0" y="1875.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.0" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1169.0" y="1859.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.0" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.07%)</title><rect x="1169.0" y="1843.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1169.0" y="1827.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.0" y="1838.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1169.0" y="1811.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.0" y="1822.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1169.7" y="1891.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1170.5" y="1891.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1173.5" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 0.99%)</title><rect x="1171.3" y="1907.0" width="11.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.3" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 0.99%)</title><rect x="1171.3" y="1891.0" width="11.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.3" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 0.99%)</title><rect x="1171.3" y="1875.0" width="11.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.3" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.92%)</title><rect x="1171.3" y="1859.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.3" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.92%)</title><rect x="1171.3" y="1843.0" width="10.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.3" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.92%)</title><rect x="1171.3" y="1827.0" width="10.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.3" y="1838.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1171.3" y="1811.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.3" y="1822.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.07%)</title><rect x="1171.3" y="1795.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.3" y="1806.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1171.3" y="1779.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.3" y="1790.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1171.3" y="1763.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.3" y="1774.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1171.3" y="1747.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.3" y="1758.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1171.3" y="1731.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.59%)</title><rect x="1172.1" y="1811.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.1" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.59%)</title><rect x="1172.1" y="1795.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.1" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.59%)</title><rect x="1172.1" y="1779.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.1" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.59%)</title><rect x="1172.1" y="1763.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.1" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.59%)</title><rect x="1172.1" y="1747.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.1" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.59%)</title><rect x="1172.1" y="1731.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.1" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.46%)</title><rect x="1172.1" y="1715.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.1" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.46%)</title><rect x="1172.1" y="1699.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.1" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.46%)</title><rect x="1172.1" y="1683.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.1" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.46%)</title><rect x="1172.1" y="1667.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.1" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.46%)</title><rect x="1172.1" y="1651.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.1" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.46%)</title><rect x="1172.1" y="1635.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.1" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.46%)</title><rect x="1172.1" y="1619.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.1" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.46%)</title><rect x="1172.1" y="1603.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.1" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.46%)</title><rect x="1172.1" y="1587.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.1" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.46%)</title><rect x="1172.1" y="1571.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.1" y="1582.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.07%)</title><rect x="1172.1" y="1555.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.1" y="1566.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.07%)</title><rect x="1172.1" y="1539.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.1" y="1550.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.07%)</title><rect x="1172.1" y="1523.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.1" y="1534.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1172.1" y="1507.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.1" y="1518.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1172.1" y="1491.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.1" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.40%)</title><rect x="1172.9" y="1555.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.40%)</title><rect x="1172.9" y="1539.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.9" y="1550.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.13%)</title><rect x="1172.9" y="1523.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.9" y="1534.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1172.9" y="1507.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.9" y="1518.0"></text>
</g>
<g>
<title>InlineTree::find_subtree_from_root(InlineTree*, JVMState*, ciMethod*) (1 samples, 0.07%)</title><rect x="1172.9" y="1491.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.9" y="1502.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1173.6" y="1507.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.6" y="1518.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1173.6" y="1491.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1173.6" y="1475.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.6" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1173.6" y="1459.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.6" y="1443.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.6" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.6" y="1427.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.6" y="1438.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1173.6" y="1411.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.6" y="1422.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1173.6" y="1395.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.6" y="1406.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1173.6" y="1379.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="1390.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1173.6" y="1363.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="1374.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1173.6" y="1347.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="1358.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1173.6" y="1331.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.6" y="1342.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1173.6" y="1315.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.6" y="1326.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1173.6" y="1299.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.6" y="1310.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1173.6" y="1283.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="1294.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1173.6" y="1267.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="1278.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.07%)</title><rect x="1173.6" y="1251.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.6" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1174.4" y="1523.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1174.4" y="1507.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1174.4" y="1491.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.4" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1174.4" y="1475.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1174.4" y="1459.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1174.4" y="1443.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1174.4" y="1427.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1174.4" y="1411.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1174.4" y="1395.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.4" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1174.4" y="1379.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1174.4" y="1363.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1174.4" y="1347.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1174.4" y="1331.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.4" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1174.4" y="1315.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1174.4" y="1299.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.4" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1174.4" y="1283.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1174.4" y="1267.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1174.4" y="1251.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="1262.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.4" y="1235.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="1246.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.07%)</title><rect x="1174.4" y="1219.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.4" y="1230.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1174.4" y="1203.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.4" y="1214.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1174.4" y="1187.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="1198.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.07%)</title><rect x="1174.4" y="1171.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.4" y="1182.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1174.4" y="1155.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="1166.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1174.4" y="1139.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="1150.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1174.4" y="1123.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.4" y="1134.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.07%)</title><rect x="1174.4" y="1107.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.4" y="1118.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1174.4" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="1102.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1174.4" y="1075.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1174.4" y="1059.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.2" y="1235.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.2" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.2" y="1219.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.2" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.2" y="1203.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.2" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.2" y="1187.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.2" y="1171.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.2" y="1155.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.2" y="1166.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="1139.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.2" y="1150.0"></text>
</g>
<g>
<title>Compile::find_intrinsic(ciMethod*, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="1123.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.2" y="1134.0"></text>
</g>
<g>
<title>Compile::make_vm_intrinsic(ciMethod*, bool) (1 samples, 0.07%)</title><rect x="1175.2" y="1107.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.2" y="1118.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1176.0" y="1235.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="1246.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1176.0" y="1219.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.0" y="1230.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1176.0" y="1203.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="1214.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1176.0" y="1187.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.0" y="1198.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1176.0" y="1171.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="1182.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1176.0" y="1155.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="1166.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.07%)</title><rect x="1176.0" y="1139.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.0" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="1523.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.8" y="1534.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="1507.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.8" y="1491.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.8" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.8" y="1475.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.8" y="1459.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.8" y="1443.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.8" y="1427.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.8" y="1411.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="1422.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1176.8" y="1395.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="1406.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1176.8" y="1379.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="1390.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1176.8" y="1363.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.8" y="1374.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1176.8" y="1347.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="1358.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1176.8" y="1331.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1176.8" y="1315.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.8" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1176.8" y="1299.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1176.8" y="1283.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.07%)</title><rect x="1176.8" y="1267.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.8" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1176.8" y="1251.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.8" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::JsrSet(Arena*, int) (1 samples, 0.07%)</title><rect x="1176.8" y="1235.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="1246.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1177.5" y="1715.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1177.5" y="1699.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.5" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1177.5" y="1683.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1177.5" y="1667.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1177.5" y="1651.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1177.5" y="1635.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.5" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1177.5" y="1619.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1177.5" y="1603.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1177.5" y="1587.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1177.5" y="1571.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1177.5" y="1555.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1177.5" y="1539.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1177.5" y="1523.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1177.5" y="1507.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1177.5" y="1491.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.5" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1177.5" y="1475.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1177.5" y="1459.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1177.5" y="1443.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.5" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1177.5" y="1427.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1177.5" y="1411.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.5" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1177.5" y="1395.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1177.5" y="1379.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1177.5" y="1363.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1177.5" y="1347.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1177.5" y="1331.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.5" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1177.5" y="1315.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1177.5" y="1299.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1177.5" y="1283.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1177.5" y="1267.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.07%)</title><rect x="1177.5" y="1251.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="1262.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.07%)</title><rect x="1177.5" y="1235.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="1246.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1177.5" y="1219.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.5" y="1230.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1177.5" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.3" y="1251.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.3" y="1235.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.3" y="1219.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.3" y="1203.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.3" y="1187.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.3" y="1171.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.3" y="1155.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.3" y="1139.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.3" y="1123.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.3" y="1107.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.3" y="1091.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.3" y="1102.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.07%)</title><rect x="1178.3" y="1075.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="1086.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1178.3" y="1059.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.3" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1178.3" y="1043.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="1054.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1178.3" y="1027.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="1038.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1178.3" y="1011.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1178.3" y="995.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1181.3" y="1006.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.26%)</title><rect x="1179.1" y="1811.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.1" y="1795.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1179.1" y="1779.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.1" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1179.1" y="1763.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1179.1" y="1747.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.1" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1179.1" y="1731.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.1" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1179.1" y="1715.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.1" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.1" y="1699.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1179.1" y="1683.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1179.1" y="1667.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1179.1" y="1651.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1179.1" y="1635.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.1" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1179.1" y="1619.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.1" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1179.1" y="1603.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1179.1" y="1587.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1179.1" y="1571.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1179.1" y="1555.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1179.1" y="1539.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1179.1" y="1523.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.1" y="1534.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.1" y="1507.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.1" y="1518.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1179.1" y="1491.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="1502.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1179.1" y="1475.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1179.1" y="1459.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.1" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1179.1" y="1443.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1179.1" y="1427.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.1" y="1438.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1179.1" y="1411.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="1422.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1179.1" y="1395.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="1406.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1179.1" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="1390.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1179.1" y="1363.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="1374.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1179.1" y="1347.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="1358.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1179.1" y="1331.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="1342.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1179.1" y="1315.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.1" y="1326.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.07%)</title><rect x="1179.1" y="1299.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1179.9" y="1507.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1179.9" y="1491.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1179.9" y="1475.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1179.9" y="1459.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1179.9" y="1443.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1179.9" y="1427.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.9" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1179.9" y="1411.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1179.9" y="1395.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1179.9" y="1379.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1179.9" y="1363.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1179.9" y="1347.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1179.9" y="1331.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1179.9" y="1315.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1179.9" y="1299.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1179.9" y="1283.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1179.9" y="1267.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1179.9" y="1251.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1179.9" y="1235.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.9" y="1219.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.9" y="1203.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.9" y="1187.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.9" y="1171.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.9" y="1155.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1179.9" y="1139.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1179.9" y="1123.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="1134.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1179.9" y="1107.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="1118.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1179.9" y="1091.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.9" y="1102.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.07%)</title><rect x="1179.9" y="1075.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="1086.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.07%)</title><rect x="1179.9" y="1059.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="1070.0"></text>
</g>
<g>
<title>DecodeNarrowPtrNode::DecodeNarrowPtrNode(Node*, Type const*) (1 samples, 0.07%)</title><rect x="1179.9" y="1043.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.7" y="1219.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.7" y="1203.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.7" y="1187.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.7" y="1171.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="1182.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1180.7" y="1155.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="1166.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.7" y="1139.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1180.7" y="1123.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="1134.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1180.7" y="1107.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="1118.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.4" y="1795.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.4" y="1806.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.4" y="1779.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="1790.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.4" y="1763.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="1774.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.4" y="1747.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.4" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.4" y="1731.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="1742.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.4" y="1715.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.4" y="1726.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.4" y="1699.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.4" y="1710.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.4" y="1683.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.4" y="1694.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.4" y="1667.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="1678.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.4" y="1651.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.4" y="1635.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.4" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.4" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.4" y="1603.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.4" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.4" y="1587.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.4" y="1571.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.4" y="1555.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.4" y="1539.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.4" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.4" y="1523.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.4" y="1507.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.4" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.4" y="1491.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.4" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.4" y="1475.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.4" y="1459.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.4" y="1443.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.4" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.4" y="1427.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="1438.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.4" y="1411.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.4" y="1422.0"></text>
</g>
<g>
<title>ciInstanceKlass::java_mirror() (1 samples, 0.07%)</title><rect x="1181.4" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="1406.0"></text>
</g>
<g>
<title>ciKlass::java_mirror() (1 samples, 0.07%)</title><rect x="1181.4" y="1379.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="1390.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.07%)</title><rect x="1181.4" y="1363.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="1374.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.07%)</title><rect x="1181.4" y="1347.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="1358.0"></text>
</g>
<g>
<title>ciObject::ciObject(Handle) (1 samples, 0.07%)</title><rect x="1181.4" y="1331.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="1342.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_scavengable(void const*) (1 samples, 0.07%)</title><rect x="1181.4" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.4" y="1326.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1182.2" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="1870.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.13%)</title><rect x="1183.0" y="1907.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.0" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1183.0" y="1891.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="1902.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1183.8" y="1891.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="1902.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.13%)</title><rect x="1184.5" y="1939.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.13%)</title><rect x="1184.5" y="1923.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.13%)</title><rect x="1184.5" y="1907.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.13%)</title><rect x="1184.5" y="1891.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.07%)</title><rect x="1184.5" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1184.5" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.07%)</title><rect x="1184.5" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.5" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.07%)</title><rect x="1184.5" y="1827.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1184.5" y="1811.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.5" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1184.5" y="1795.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="1806.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.07%)</title><rect x="1185.3" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.3" y="1886.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.07%)</title><rect x="1185.3" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.3" y="1870.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.07%)</title><rect x="1185.3" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.3" y="1854.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.07%)</title><rect x="1185.3" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="1838.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.07%)</title><rect x="1185.3" y="1811.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.3" y="1822.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.07%)</title><rect x="1185.3" y="1795.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="1806.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.07%)</title><rect x="1186.1" y="1939.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="1950.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.07%)</title><rect x="1186.1" y="1923.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.1" y="1934.0"></text>
</g>
<g>
<title>Atomic::dec(short volatile*) (1 samples, 0.07%)</title><rect x="1186.1" y="1907.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.1" y="1918.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1186.9" y="1971.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.9" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1186.9" y="1955.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.9" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1186.9" y="1939.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.9" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1186.9" y="1923.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1189.9" y="1934.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.07%)</title><rect x="1186.9" y="1907.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.9" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.07%)</title><rect x="1186.9" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.9" y="1902.0"></text>
</g>
<g>
<title>ScopeDesc::decode_object_values(int) (1 samples, 0.07%)</title><rect x="1186.9" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.9" y="1886.0"></text>
</g>
<g>
<title>DebugInfoReadStream::read_object_value() (1 samples, 0.07%)</title><rect x="1186.9" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.9" y="1870.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.20%)</title><rect x="1187.7" y="2003.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.7" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.20%)</title><rect x="1187.7" y="1987.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.13%)</title><rect x="1187.7" y="1971.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.7" y="1982.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.13%)</title><rect x="1187.7" y="1955.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.07%)</title><rect x="1187.7" y="1939.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="1950.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1187.7" y="1923.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="1934.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1187.7" y="1907.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.7" y="1918.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="1187.7" y="1891.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="1902.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="1187.7" y="1875.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.7" y="1886.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="1187.7" y="1859.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.7" y="1870.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_idle_monitors() (1 samples, 0.07%)</title><rect x="1188.4" y="1939.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.4" y="1950.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1189.2" y="1971.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.2" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1189.2" y="1955.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.2" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1189.2" y="1939.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.2" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1189.2" y="1923.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.2" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1189.2" y="1907.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.2" y="1918.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.07%)</title><rect x="1189.2" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.2" y="1902.0"></text>
</g>
<g>
<title>Relocation::pd_set_data_value(unsigned char*, long, bool) (1 samples, 0.07%)</title><rect x="1189.2" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.2" y="1886.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.07%)</title><rect x="1189.2" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.2" y="1870.0"></text>
</g>
</g>
</svg>
