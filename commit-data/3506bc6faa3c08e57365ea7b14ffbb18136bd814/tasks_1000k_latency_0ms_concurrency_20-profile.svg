<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,213 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2035.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2019.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2003.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1987.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1971.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1955.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1939.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1923.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1907.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1891.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1875.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1859.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1827.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1795.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1779.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1763.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1731.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1715.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1699.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1683.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1667.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1651.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1635.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1619.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1603.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1587.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1571.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1555.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1539.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1523.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1507.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1491.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1475.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1459.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1443.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1427.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1411.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1395.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1379.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1363.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1347.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1331.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1315.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1299.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1283.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1267.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1251.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1235.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1219.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1091.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1075.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1011.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="915.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="435.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="371.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="339.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="307.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="259.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="195.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="179.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="163.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="147.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="115.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="99.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="83.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="67.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="51.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.08%)</title><rect x="10.0" y="35.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (318 samples, 26.22%)</title><rect x="11.0" y="2035.0" width="309.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.0" y="2046.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.08%)</title><rect x="11.0" y="2019.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.0" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.08%)</title><rect x="11.0" y="2003.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.0" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.08%)</title><rect x="11.0" y="1987.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.08%)</title><rect x="11.0" y="1971.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="11.0" y="1955.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="14.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="11.0" y="1939.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="11.0" y="1923.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="11.0" y="1907.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="11.0" y="1891.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="11.0" y="1875.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="11.0" y="1859.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="11.0" y="1843.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="14.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="11.0" y="1827.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.08%)</title><rect x="11.0" y="1811.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.08%)</title><rect x="11.0" y="1795.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="14.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/TaggedFields.sizeOf (1 samples, 0.08%)</title><rect x="11.0" y="1779.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.0" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (317 samples, 26.13%)</title><rect x="11.9" y="2019.0" width="308.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.9" y="2030.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (5 samples, 0.41%)</title><rect x="11.9" y="2003.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.9" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.33%)</title><rect x="12.9" y="1987.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.9" y="1998.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="12.9" y="1971.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.9" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.08%)</title><rect x="12.9" y="1955.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.9" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="12.9" y="1939.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.9" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.25%)</title><rect x="13.9" y="1971.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.9" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.25%)</title><rect x="13.9" y="1955.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.9" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.25%)</title><rect x="13.9" y="1939.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.9" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.25%)</title><rect x="13.9" y="1923.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.9" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.25%)</title><rect x="13.9" y="1907.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.9" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="13.9" y="1891.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.9" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="13.9" y="1875.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="14.9" y="1891.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.9" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="14.9" y="1875.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="17.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="15.8" y="1891.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.08%)</title><rect x="16.8" y="2003.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.8" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="16.8" y="1987.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.8" y="1998.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="16.8" y="1971.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.8" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="16.8" y="1955.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.8" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="16.8" y="1939.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (7 samples, 0.58%)</title><rect x="17.8" y="2003.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.8" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (7 samples, 0.58%)</title><rect x="17.8" y="1987.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.8" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.58%)</title><rect x="17.8" y="1971.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.8" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$264/1352268011.accept (6 samples, 0.49%)</title><rect x="18.8" y="1955.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (6 samples, 0.49%)</title><rect x="18.8" y="1939.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.08%)</title><rect x="18.8" y="1923.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.41%)</title><rect x="19.7" y="1923.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.7" y="1934.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.41%)</title><rect x="19.7" y="1907.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.7" y="1918.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (236 samples, 19.46%)</title><rect x="24.6" y="2003.0" width="229.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.6" y="2014.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$263/431741987.accept (226 samples, 18.63%)</title><rect x="25.6" y="1987.0" width="219.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.6" y="1998.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (226 samples, 18.63%)</title><rect x="25.6" y="1971.0" width="219.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.6" y="1982.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (173 samples, 14.26%)</title><rect x="29.5" y="1955.0" width="168.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.5" y="1966.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (173 samples, 14.26%)</title><rect x="29.5" y="1939.0" width="168.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="32.5" y="1950.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (173 samples, 14.26%)</title><rect x="29.5" y="1923.0" width="168.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.5" y="1934.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (173 samples, 14.26%)</title><rect x="29.5" y="1907.0" width="168.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.5" y="1918.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (173 samples, 14.26%)</title><rect x="29.5" y="1891.0" width="168.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.5" y="1902.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (144 samples, 11.87%)</title><rect x="52.8" y="1875.0" width="140.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="55.8" y="1886.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (113 samples, 9.32%)</title><rect x="83.0" y="1859.0" width="109.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="86.0" y="1870.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (28 samples, 2.31%)</title><rect x="86.9" y="1843.0" width="27.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.9" y="1854.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (28 samples, 2.31%)</title><rect x="86.9" y="1827.0" width="27.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.9" y="1838.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (28 samples, 2.31%)</title><rect x="86.9" y="1811.0" width="27.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="89.9" y="1822.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.08%)</title><rect x="114.1" y="1843.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="117.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.08%)</title><rect x="114.1" y="1827.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.1" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="114.1" y="1811.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="117.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="114.1" y="1795.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="117.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.08%)</title><rect x="114.1" y="1779.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="117.1" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.08%)</title><rect x="114.1" y="1763.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.1" y="1774.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="114.1" y="1747.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.1" y="1758.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.08%)</title><rect x="114.1" y="1731.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="117.1" y="1742.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.08%)</title><rect x="114.1" y="1715.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="117.1" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (80 samples, 6.60%)</title><rect x="115.1" y="1843.0" width="77.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.1" y="1854.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (80 samples, 6.60%)</title><rect x="115.1" y="1827.0" width="77.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="118.1" y="1838.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (80 samples, 6.60%)</title><rect x="115.1" y="1811.0" width="77.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="118.1" y="1822.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (80 samples, 6.60%)</title><rect x="115.1" y="1795.0" width="77.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.1" y="1806.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (78 samples, 6.43%)</title><rect x="117.0" y="1779.0" width="75.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.0" y="1790.0">sun/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="117.0" y="1763.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="120.0" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (70 samples, 5.77%)</title><rect x="118.0" y="1763.0" width="68.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="121.0" y="1774.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.33%)</title><rect x="118.0" y="1747.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="121.0" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.16%)</title><rect x="121.9" y="1747.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="124.9" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="123.8" y="1747.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="126.8" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (47 samples, 3.87%)</title><rect x="124.8" y="1747.0" width="45.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="127.8" y="1758.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.33%)</title><rect x="170.5" y="1747.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="173.5" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 0.99%)</title><rect x="174.4" y="1747.0" width="11.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="177.4" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.41%)</title><rect x="186.1" y="1763.0" width="4.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="189.1" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="190.9" y="1763.0" width="2.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="193.9" y="1774.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.41%)</title><rect x="192.9" y="1875.0" width="4.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="195.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (10 samples, 0.82%)</title><rect x="197.7" y="1955.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="200.7" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.33%)</title><rect x="203.6" y="1939.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="206.6" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (10 samples, 0.82%)</title><rect x="207.5" y="1955.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.5" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.82%)</title><rect x="207.5" y="1939.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="210.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.82%)</title><rect x="207.5" y="1923.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.5" y="1934.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="216.2" y="1907.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="219.2" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="216.2" y="1891.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="219.2" y="1902.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="216.2" y="1875.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="219.2" y="1886.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.08%)</title><rect x="216.2" y="1859.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="219.2" y="1870.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.08%)</title><rect x="216.2" y="1843.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="219.2" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (26 samples, 2.14%)</title><rect x="217.2" y="1955.0" width="25.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.2" y="1966.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (22 samples, 1.81%)</title><rect x="217.2" y="1939.0" width="21.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.2" y="1950.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.58%)</title><rect x="229.9" y="1923.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.9" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="229.9" y="1907.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.9" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.08%)</title><rect x="229.9" y="1891.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="232.9" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="229.9" y="1875.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="232.9" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.16%)</title><rect x="230.8" y="1907.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.33%)</title><rect x="232.8" y="1907.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.8" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="236.7" y="1923.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="239.7" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="238.6" y="1939.0" width="3.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="241.6" y="1950.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="242.5" y="1955.0" width="2.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="245.5" y="1966.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="245.4" y="1987.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="248.4" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="246.4" y="1987.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="249.4" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="246.4" y="1971.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.4" y="1982.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="247.4" y="1987.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="250.4" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="247.4" y="1971.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.4" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="247.4" y="1955.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.4" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="247.4" y="1939.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.4" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.08%)</title><rect x="247.4" y="1923.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.33%)</title><rect x="248.3" y="1987.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.3" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.33%)</title><rect x="248.3" y="1971.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.33%)</title><rect x="248.3" y="1955.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.33%)</title><rect x="248.3" y="1939.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.3" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="251.3" y="1923.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.16%)</title><rect x="252.2" y="1987.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.2" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.16%)</title><rect x="252.2" y="1971.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.16%)</title><rect x="252.2" y="1955.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.16%)</title><rect x="252.2" y="1939.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="255.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.16%)</title><rect x="252.2" y="1923.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (68 samples, 5.61%)</title><rect x="254.2" y="2003.0" width="66.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.2" y="2014.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (68 samples, 5.61%)</title><rect x="254.2" y="1987.0" width="66.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.2" y="1998.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (35 samples, 2.89%)</title><rect x="254.2" y="1971.0" width="34.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="257.2" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="254.2" y="1955.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.2" y="1966.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="254.2" y="1939.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="257.2" y="1950.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.08%)</title><rect x="254.2" y="1923.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="257.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (34 samples, 2.80%)</title><rect x="255.1" y="1955.0" width="33.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.1" y="1966.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 2.80%)</title><rect x="255.1" y="1939.0" width="33.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.1" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (31 samples, 2.56%)</title><rect x="255.1" y="1923.0" width="30.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.1" y="1934.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (31 samples, 2.56%)</title><rect x="255.1" y="1907.0" width="30.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.1" y="1918.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (17 samples, 1.40%)</title><rect x="260.0" y="1891.0" width="16.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.74%)</title><rect x="267.8" y="1875.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.66%)</title><rect x="268.8" y="1859.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.66%)</title><rect x="268.8" y="1843.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.66%)</title><rect x="268.8" y="1827.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.66%)</title><rect x="268.8" y="1811.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.66%)</title><rect x="268.8" y="1795.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.8" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.66%)</title><rect x="268.8" y="1779.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.8" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (9 samples, 0.74%)</title><rect x="276.5" y="1891.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="276.5" y="1875.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.66%)</title><rect x="277.5" y="1875.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (8 samples, 0.66%)</title><rect x="277.5" y="1859.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="280.5" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (8 samples, 0.66%)</title><rect x="277.5" y="1843.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.5" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (6 samples, 0.49%)</title><rect x="279.5" y="1827.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.5" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (6 samples, 0.49%)</title><rect x="279.5" y="1811.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.5" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (6 samples, 0.49%)</title><rect x="279.5" y="1795.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.49%)</title><rect x="279.5" y="1779.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="282.5" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="285.3" y="1923.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="285.3" y="1907.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="285.3" y="1891.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="285.3" y="1875.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="285.3" y="1859.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="288.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="285.3" y="1843.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.08%)</title><rect x="286.3" y="1923.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.08%)</title><rect x="287.2" y="1923.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.08%)</title><rect x="287.2" y="1907.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 0.99%)</title><rect x="288.2" y="1971.0" width="11.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.82%)</title><rect x="288.2" y="1955.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.49%)</title><rect x="288.2" y="1939.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="288.2" y="1923.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="288.2" y="1907.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="291.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="288.2" y="1891.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="288.2" y="1875.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="291.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="288.2" y="1859.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.2" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="288.2" y="1843.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (4 samples, 0.33%)</title><rect x="289.2" y="1923.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.2" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (4 samples, 0.33%)</title><rect x="289.2" y="1907.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="292.2" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (4 samples, 0.33%)</title><rect x="289.2" y="1891.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.2" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.33%)</title><rect x="289.2" y="1875.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.2" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.33%)</title><rect x="289.2" y="1859.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.2" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.16%)</title><rect x="290.2" y="1843.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="293.2" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.08%)</title><rect x="290.2" y="1827.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.2" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.08%)</title><rect x="291.1" y="1827.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.1" y="1838.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.08%)</title><rect x="292.1" y="1843.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="293.1" y="1923.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="293.1" y="1907.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="293.1" y="1891.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.1" y="1902.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="293.1" y="1875.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="293.1" y="1859.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="296.1" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="293.1" y="1843.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (4 samples, 0.33%)</title><rect x="294.1" y="1939.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.1" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (4 samples, 0.33%)</title><rect x="294.1" y="1923.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="297.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.33%)</title><rect x="294.1" y="1907.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.1" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="297.0" y="1891.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="297.0" y="1875.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="297.0" y="1859.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="297.0" y="1843.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.0" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="297.0" y="1827.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.0" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="297.0" y="1811.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.0" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.08%)</title><rect x="297.0" y="1795.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.0" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="297.0" y="1779.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="300.0" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.08%)</title><rect x="297.0" y="1763.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.0" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.16%)</title><rect x="297.9" y="1955.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="297.9" y="1939.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.08%)</title><rect x="297.9" y="1923.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.08%)</title><rect x="298.9" y="1939.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="301.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.08%)</title><rect x="298.9" y="1923.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.16%)</title><rect x="299.9" y="1971.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.9" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="299.9" y="1955.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="302.9" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="299.9" y="1939.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="299.9" y="1923.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="299.9" y="1907.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.08%)</title><rect x="300.9" y="1955.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="303.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.08%)</title><rect x="300.9" y="1939.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (12 samples, 0.99%)</title><rect x="301.8" y="1971.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (10 samples, 0.82%)</title><rect x="301.8" y="1955.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="304.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="301.8" y="1939.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="304.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.08%)</title><rect x="301.8" y="1923.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="304.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="301.8" y="1907.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="301.8" y="1891.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="304.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="301.8" y="1875.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="301.8" y="1859.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="301.8" y="1843.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.08%)</title><rect x="301.8" y="1827.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="304.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.08%)</title><rect x="301.8" y="1811.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="304.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.08%)</title><rect x="301.8" y="1795.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="304.8" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.08%)</title><rect x="301.8" y="1779.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="304.8" y="1790.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="301.8" y="1763.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.8" y="1774.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.08%)</title><rect x="301.8" y="1747.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="304.8" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (9 samples, 0.74%)</title><rect x="302.8" y="1939.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="305.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="302.8" y="1923.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="302.8" y="1907.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="305.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.08%)</title><rect x="302.8" y="1891.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="305.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.08%)</title><rect x="302.8" y="1875.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="302.8" y="1859.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (7 samples, 0.58%)</title><rect x="303.8" y="1923.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="306.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.08%)</title><rect x="303.8" y="1907.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.8" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="303.8" y="1891.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.8" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="303.8" y="1875.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="306.8" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeAccess (1 samples, 0.08%)</title><rect x="303.8" y="1859.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (6 samples, 0.49%)</title><rect x="304.8" y="1907.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="307.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (6 samples, 0.49%)</title><rect x="304.8" y="1891.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="307.8" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="304.8" y="1875.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="307.8" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="304.8" y="1859.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="307.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (4 samples, 0.33%)</title><rect x="306.7" y="1875.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="309.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (4 samples, 0.33%)</title><rect x="306.7" y="1859.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (4 samples, 0.33%)</title><rect x="306.7" y="1843.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="309.7" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (4 samples, 0.33%)</title><rect x="306.7" y="1827.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.7" y="1838.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="306.7" y="1811.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="309.7" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="307.7" y="1811.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="310.7" y="1822.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="308.6" y="1811.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="311.6" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="309.6" y="1811.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.6" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.08%)</title><rect x="309.6" y="1795.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="312.6" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.08%)</title><rect x="309.6" y="1779.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="312.6" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="310.6" y="1923.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="313.6" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.08%)</title><rect x="310.6" y="1907.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="313.6" y="1918.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="310.6" y="1891.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="313.6" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.08%)</title><rect x="310.6" y="1875.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.6" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.08%)</title><rect x="310.6" y="1859.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="313.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.16%)</title><rect x="311.6" y="1955.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.16%)</title><rect x="311.6" y="1939.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="314.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.16%)</title><rect x="311.6" y="1923.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="314.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.16%)</title><rect x="311.6" y="1907.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="314.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClientRequest.makeHeader (1 samples, 0.08%)</title><rect x="311.6" y="1891.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.requestHeaderVersion (1 samples, 0.08%)</title><rect x="311.6" y="1875.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ApiMessageType.fromApiKey (1 samples, 0.08%)</title><rect x="311.6" y="1859.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="311.6" y="1843.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="314.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="312.5" y="1891.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="312.5" y="1875.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.5" y="1886.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="312.5" y="1859.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="315.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.41%)</title><rect x="313.5" y="1971.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="316.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.33%)</title><rect x="313.5" y="1955.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="316.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.16%)</title><rect x="313.5" y="1939.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="316.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.08%)</title><rect x="313.5" y="1923.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="316.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.08%)</title><rect x="313.5" y="1907.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="316.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.08%)</title><rect x="314.5" y="1923.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="317.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.08%)</title><rect x="314.5" y="1907.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.5" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="314.5" y="1891.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="317.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.16%)</title><rect x="315.5" y="1939.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="318.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="316.4" y="1923.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="319.4" y="1934.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="316.4" y="1907.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="319.4" y="1918.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="316.4" y="1891.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.4" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="316.4" y="1875.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.4" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.08%)</title><rect x="316.4" y="1859.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="319.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.addListener (1 samples, 0.08%)</title><rect x="317.4" y="1955.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="320.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="317.4" y="1939.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="320.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.16%)</title><rect x="318.4" y="1971.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="321.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="318.4" y="1955.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="318.4" y="1939.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="318.4" y="1923.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="321.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="318.4" y="1907.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.4" y="1918.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="318.4" y="1891.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="321.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="319.3" y="1907.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="322.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="319.3" y="1891.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Avg.update (1 samples, 0.08%)</title><rect x="319.3" y="1875.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="322.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/Thread.run (768 samples, 63.31%)</title><rect x="320.3" y="2035.0" width="747.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.3" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (768 samples, 63.31%)</title><rect x="320.3" y="2019.0" width="747.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.3" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (768 samples, 63.31%)</title><rect x="320.3" y="2003.0" width="747.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.3" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="323.2" y="1987.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="326.2" y="1998.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="323.2" y="1971.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="326.2" y="1982.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="323.2" y="1955.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="326.2" y="1966.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="323.2" y="1939.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="326.2" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="323.2" y="1923.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="326.2" y="1934.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.49%)</title><rect x="324.2" y="1987.0" width="5.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="327.2" y="1998.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.49%)</title><rect x="324.2" y="1971.0" width="5.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="327.2" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (1 samples, 0.08%)</title><rect x="330.0" y="1987.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="333.0" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1687201657.run (525 samples, 43.28%)</title><rect x="331.0" y="1987.0" width="510.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.0" y="1998.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (525 samples, 43.28%)</title><rect x="331.0" y="1971.0" width="510.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.0" y="1982.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (525 samples, 43.28%)</title><rect x="331.0" y="1955.0" width="510.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="334.0" y="1966.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processT..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.16%)</title><rect x="333.9" y="1939.0" width="2.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="336.9" y="1950.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.16%)</title><rect x="333.9" y="1923.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="336.9" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="335.9" y="1939.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="338.9" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (11 samples, 0.91%)</title><rect x="336.9" y="1939.0" width="10.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="339.9" y="1950.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="343.7" y="1923.0" width="3.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="346.7" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (508 samples, 41.88%)</title><rect x="347.6" y="1939.0" width="494.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="350.6" y="1950.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sche..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (156 samples, 12.86%)</title><rect x="360.2" y="1923.0" width="151.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="363.2" y="1934.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (156 samples, 12.86%)</title><rect x="360.2" y="1907.0" width="151.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="363.2" y="1918.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (156 samples, 12.86%)</title><rect x="360.2" y="1891.0" width="151.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.2" y="1902.0">com/linecorp/decato..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="360.2" y="1875.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="363.2" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="360.2" y="1859.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="363.2" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="360.2" y="1843.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="363.2" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="360.2" y="1827.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="363.2" y="1838.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="360.2" y="1811.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="363.2" y="1822.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="361.2" y="1875.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="364.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (153 samples, 12.61%)</title><rect x="362.2" y="1875.0" width="148.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.2" y="1886.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (153 samples, 12.61%)</title><rect x="362.2" y="1859.0" width="148.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="365.2" y="1870.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (153 samples, 12.61%)</title><rect x="362.2" y="1843.0" width="148.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="365.2" y="1854.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (54 samples, 4.45%)</title><rect x="362.2" y="1827.0" width="52.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="365.2" y="1838.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (29 samples, 2.39%)</title><rect x="362.2" y="1811.0" width="28.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="365.2" y="1822.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (29 samples, 2.39%)</title><rect x="362.2" y="1795.0" width="28.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="365.2" y="1806.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (26 samples, 2.14%)</title><rect x="362.2" y="1779.0" width="25.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="365.2" y="1790.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.08%)</title><rect x="386.5" y="1763.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="389.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.25%)</title><rect x="387.4" y="1779.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="390.4" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="387.4" y="1763.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="390.4" y="1774.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (2 samples, 0.16%)</title><rect x="388.4" y="1763.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="391.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (25 samples, 2.06%)</title><rect x="390.4" y="1811.0" width="24.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="393.4" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (25 samples, 2.06%)</title><rect x="390.4" y="1795.0" width="24.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="393.4" y="1806.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="390.4" y="1779.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="393.4" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="390.4" y="1763.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="393.4" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="390.4" y="1747.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="393.4" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="390.4" y="1731.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="393.4" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="391.3" y="1715.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="394.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 0.25%)</title><rect x="392.3" y="1779.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (3 samples, 0.25%)</title><rect x="392.3" y="1763.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="395.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (8 samples, 0.66%)</title><rect x="395.2" y="1779.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="398.2" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="398.1" y="1763.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="401.1" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="398.1" y="1747.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="401.1" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="398.1" y="1731.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="401.1" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="398.1" y="1715.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="401.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (1 samples, 0.08%)</title><rect x="399.1" y="1763.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="402.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (1 samples, 0.08%)</title><rect x="400.1" y="1763.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="403.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (1 samples, 0.08%)</title><rect x="401.1" y="1763.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="404.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.08%)</title><rect x="402.0" y="1763.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="405.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.58%)</title><rect x="403.0" y="1779.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.0" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="404.0" y="1763.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="407.0" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="404.0" y="1747.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="407.0" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="404.0" y="1731.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="407.0" y="1742.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="405.0" y="1715.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="408.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.33%)</title><rect x="405.9" y="1763.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.08%)</title><rect x="405.9" y="1747.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="408.9" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="405.9" y="1731.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="408.9" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="405.9" y="1715.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="408.9" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="405.9" y="1699.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="408.9" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="405.9" y="1683.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="408.9" y="1694.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="405.9" y="1667.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="408.9" y="1678.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="405.9" y="1651.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="408.9" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.25%)</title><rect x="406.9" y="1747.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="409.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.41%)</title><rect x="409.8" y="1779.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="412.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="412.7" y="1763.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="413.7" y="1763.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (84 samples, 6.92%)</title><rect x="414.7" y="1827.0" width="81.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.7" y="1838.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.16%)</title><rect x="414.7" y="1811.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="417.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.16%)</title><rect x="414.7" y="1795.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="417.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.08%)</title><rect x="414.7" y="1779.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="417.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.08%)</title><rect x="414.7" y="1763.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.08%)</title><rect x="415.7" y="1779.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="418.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.08%)</title><rect x="415.7" y="1763.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="418.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.41%)</title><rect x="416.6" y="1811.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="419.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.41%)</title><rect x="416.6" y="1795.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="419.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.08%)</title><rect x="420.5" y="1779.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="423.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (15 samples, 1.24%)</title><rect x="421.5" y="1811.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="424.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.99%)</title><rect x="423.4" y="1795.0" width="11.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="426.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (9 samples, 0.74%)</title><rect x="424.4" y="1779.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (8 samples, 0.66%)</title><rect x="425.4" y="1763.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="428.4" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="430.2" y="1747.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="433.2" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="430.2" y="1731.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="433.2" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="430.2" y="1715.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="433.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="431.2" y="1747.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="434.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.16%)</title><rect x="433.2" y="1779.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="436.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="435.1" y="1795.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.49%)</title><rect x="436.1" y="1811.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="439.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.41%)</title><rect x="437.1" y="1795.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="440.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (56 samples, 4.62%)</title><rect x="441.9" y="1811.0" width="54.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.9" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.57%)</title><rect x="441.9" y="1795.0" width="18.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="444.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.58%)</title><rect x="442.9" y="1779.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.58%)</title><rect x="442.9" y="1763.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="445.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.58%)</title><rect x="442.9" y="1747.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="445.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.58%)</title><rect x="449.7" y="1779.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="452.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.33%)</title><rect x="456.5" y="1779.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.33%)</title><rect x="456.5" y="1763.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="459.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (37 samples, 3.05%)</title><rect x="460.4" y="1795.0" width="36.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.4" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (37 samples, 3.05%)</title><rect x="460.4" y="1779.0" width="36.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="463.4" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (37 samples, 3.05%)</title><rect x="460.4" y="1763.0" width="36.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="463.4" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.91%)</title><rect x="466.2" y="1747.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.08%)</title><rect x="469.2" y="1731.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="472.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.08%)</title><rect x="469.2" y="1715.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="472.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.08%)</title><rect x="469.2" y="1699.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="472.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="469.2" y="1683.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="472.2" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.41%)</title><rect x="470.1" y="1731.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="473.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.16%)</title><rect x="475.0" y="1731.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="478.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.16%)</title><rect x="475.0" y="1715.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="478.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.58%)</title><rect x="476.9" y="1747.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="479.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.49%)</title><rect x="477.9" y="1731.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="480.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.49%)</title><rect x="477.9" y="1715.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="480.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.49%)</title><rect x="477.9" y="1699.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.9" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.49%)</title><rect x="477.9" y="1683.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="480.9" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.58%)</title><rect x="483.8" y="1747.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="486.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.58%)</title><rect x="483.8" y="1731.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.58%)</title><rect x="483.8" y="1715.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="486.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.58%)</title><rect x="483.8" y="1699.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="486.8" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.58%)</title><rect x="483.8" y="1683.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="486.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.49%)</title><rect x="490.6" y="1747.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.6" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.49%)</title><rect x="490.6" y="1731.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="493.6" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.49%)</title><rect x="490.6" y="1715.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="493.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="495.4" y="1699.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="498.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (15 samples, 1.24%)</title><rect x="496.4" y="1827.0" width="14.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="499.4" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (15 samples, 1.24%)</title><rect x="496.4" y="1811.0" width="14.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="499.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (15 samples, 1.24%)</title><rect x="496.4" y="1795.0" width="14.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (15 samples, 1.24%)</title><rect x="496.4" y="1779.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="499.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.16%)</title><rect x="502.2" y="1763.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="505.2" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.58%)</title><rect x="504.2" y="1763.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="507.2" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.08%)</title><rect x="511.0" y="1875.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.0" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="511.0" y="1859.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="514.0" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="511.0" y="1843.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="514.0" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="511.0" y="1827.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="514.0" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="511.0" y="1811.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="514.0" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (312 samples, 25.72%)</title><rect x="512.0" y="1923.0" width="303.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="515.0" y="1934.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (41 samples, 3.38%)</title><rect x="512.9" y="1907.0" width="39.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="515.9" y="1918.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (41 samples, 3.38%)</title><rect x="512.9" y="1891.0" width="39.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="515.9" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (37 samples, 3.05%)</title><rect x="516.8" y="1875.0" width="36.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.8" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.66%)</title><rect x="518.8" y="1859.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="521.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.66%)</title><rect x="518.8" y="1843.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="521.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.66%)</title><rect x="518.8" y="1827.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="521.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.66%)</title><rect x="518.8" y="1811.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="521.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="526.6" y="1859.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="529.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="526.6" y="1843.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="529.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="526.6" y="1827.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="529.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.16%)</title><rect x="526.6" y="1811.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="529.6" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.08%)</title><rect x="527.5" y="1795.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="530.5" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (25 samples, 2.06%)</title><rect x="528.5" y="1859.0" width="24.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="531.5" y="1870.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (22 samples, 1.81%)</title><rect x="531.4" y="1843.0" width="21.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="534.4" y="1854.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.49%)</title><rect x="547.0" y="1827.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="550.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.66%)</title><rect x="552.8" y="1907.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.58%)</title><rect x="553.8" y="1891.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="556.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.58%)</title><rect x="553.8" y="1875.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="556.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (170 samples, 14.01%)</title><rect x="560.6" y="1907.0" width="165.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="563.6" y="1918.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="561.6" y="1891.0" width="4.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="564.6" y="1902.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="561.6" y="1875.0" width="4.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="564.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (161 samples, 13.27%)</title><rect x="566.4" y="1891.0" width="156.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="569.4" y="1902.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (61 samples, 5.03%)</title><rect x="575.2" y="1875.0" width="59.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="578.2" y="1886.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (31 samples, 2.56%)</title><rect x="592.7" y="1859.0" width="30.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="595.7" y="1870.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (30 samples, 2.47%)</title><rect x="593.7" y="1843.0" width="29.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="596.7" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (19 samples, 1.57%)</title><rect x="598.5" y="1827.0" width="18.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="601.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (19 samples, 1.57%)</title><rect x="598.5" y="1811.0" width="18.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="601.5" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 1.57%)</title><rect x="598.5" y="1795.0" width="18.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="601.5" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (17 samples, 1.40%)</title><rect x="598.5" y="1779.0" width="16.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="601.5" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.41%)</title><rect x="599.5" y="1763.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="602.5" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="599.5" y="1747.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="602.5" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="599.5" y="1731.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="602.5" y="1742.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="600.5" y="1747.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="603.5" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.25%)</title><rect x="601.5" y="1747.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="604.5" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.25%)</title><rect x="601.5" y="1731.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="604.5" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.16%)</title><rect x="601.5" y="1715.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="604.5" y="1726.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="602.4" y="1699.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="605.4" y="1710.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="603.4" y="1715.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="606.4" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.74%)</title><rect x="604.4" y="1763.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="607.4" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (6 samples, 0.49%)</title><rect x="607.3" y="1747.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="610.3" y="1758.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="608.3" y="1731.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="611.3" y="1742.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="608.3" y="1715.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="611.3" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.16%)</title><rect x="609.2" y="1731.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="612.2" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="610.2" y="1715.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="613.2" y="1726.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="610.2" y="1699.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="613.2" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="610.2" y="1683.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="613.2" y="1694.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="610.2" y="1667.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="613.2" y="1678.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="611.2" y="1731.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="614.2" y="1742.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="612.2" y="1731.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="615.2" y="1742.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="613.1" y="1763.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="616.1" y="1774.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.16%)</title><rect x="615.1" y="1779.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="618.1" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="615.1" y="1763.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="618.1" y="1774.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.25%)</title><rect x="617.0" y="1827.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="620.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="619.9" y="1827.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="622.9" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="620.9" y="1827.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="623.9" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="621.9" y="1827.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="624.9" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.25%)</title><rect x="622.9" y="1859.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="625.9" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 0.74%)</title><rect x="625.8" y="1859.0" width="8.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="628.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (10 samples, 0.82%)</title><rect x="634.5" y="1875.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="637.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (10 samples, 0.82%)</title><rect x="634.5" y="1859.0" width="9.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="637.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (10 samples, 0.82%)</title><rect x="634.5" y="1843.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="637.5" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (81 samples, 6.68%)</title><rect x="644.3" y="1875.0" width="78.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="647.3" y="1886.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (80 samples, 6.60%)</title><rect x="645.2" y="1859.0" width="77.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="648.2" y="1870.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.16%)</title><rect x="645.2" y="1843.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="648.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.16%)</title><rect x="645.2" y="1827.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="648.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.16%)</title><rect x="645.2" y="1811.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.16%)</title><rect x="645.2" y="1795.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="648.2" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (78 samples, 6.43%)</title><rect x="647.2" y="1843.0" width="75.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="650.2" y="1854.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (68 samples, 5.61%)</title><rect x="656.9" y="1827.0" width="66.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="659.9" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (31 samples, 2.56%)</title><rect x="692.9" y="1811.0" width="30.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="695.9" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.25%)</title><rect x="707.5" y="1795.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.91%)</title><rect x="710.4" y="1795.0" width="10.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="713.4" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="719.2" y="1779.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="722.2" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="720.1" y="1763.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="723.1" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="720.1" y="1747.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="723.1" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="720.1" y="1731.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="723.1" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="720.1" y="1715.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="723.1" y="1726.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.16%)</title><rect x="721.1" y="1795.0" width="2.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="724.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.25%)</title><rect x="723.1" y="1891.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="726.1" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (65 samples, 5.36%)</title><rect x="726.0" y="1907.0" width="63.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="729.0" y="1918.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (64 samples, 5.28%)</title><rect x="726.9" y="1891.0" width="62.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="729.9" y="1902.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/306540865.process (37 samples, 3.05%)</title><rect x="729.9" y="1875.0" width="36.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="732.9" y="1886.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (37 samples, 3.05%)</title><rect x="729.9" y="1859.0" width="36.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="732.9" y="1870.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (33 samples, 2.72%)</title><rect x="730.8" y="1843.0" width="32.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="733.8" y="1854.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (7 samples, 0.58%)</title><rect x="744.5" y="1827.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="747.5" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (7 samples, 0.58%)</title><rect x="744.5" y="1811.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="747.5" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (7 samples, 0.58%)</title><rect x="744.5" y="1795.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="747.5" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (6 samples, 0.49%)</title><rect x="745.4" y="1779.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="748.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (4 samples, 0.33%)</title><rect x="747.4" y="1763.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="750.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="750.3" y="1747.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="753.3" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (10 samples, 0.82%)</title><rect x="751.3" y="1827.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="754.3" y="1838.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="754.2" y="1811.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="757.2" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="754.2" y="1795.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="757.2" y="1806.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="755.2" y="1811.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="758.2" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.41%)</title><rect x="756.1" y="1811.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="759.1" y="1822.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="756.1" y="1795.0" width="4.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="759.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="761.0" y="1827.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="764.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="762.0" y="1827.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="765.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="762.0" y="1811.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="765.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="762.0" y="1795.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="765.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="762.0" y="1779.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="765.0" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.25%)</title><rect x="762.9" y="1843.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="765.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.25%)</title><rect x="762.9" y="1827.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="765.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.25%)</title><rect x="762.9" y="1811.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="765.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.25%)</title><rect x="762.9" y="1795.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="765.9" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.25%)</title><rect x="762.9" y="1779.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="765.9" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 0.25%)</title><rect x="765.9" y="1875.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="768.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.49%)</title><rect x="768.8" y="1875.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="771.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.49%)</title><rect x="768.8" y="1859.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="771.8" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="773.6" y="1843.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="776.6" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="773.6" y="1827.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="776.6" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="773.6" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="776.6" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.08%)</title><rect x="774.6" y="1875.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="777.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$281/1520119785.get (1 samples, 0.08%)</title><rect x="774.6" y="1859.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="777.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$72 (1 samples, 0.08%)</title><rect x="774.6" y="1843.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="777.6" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.16%)</title><rect x="775.6" y="1875.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="778.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="776.6" y="1859.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="779.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.41%)</title><rect x="777.5" y="1875.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="780.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.41%)</title><rect x="777.5" y="1859.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="780.5" y="1870.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.25%)</title><rect x="777.5" y="1843.0" width="3.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="780.5" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.16%)</title><rect x="780.5" y="1843.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="783.5" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="782.4" y="1875.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="785.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.49%)</title><rect x="783.4" y="1875.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="786.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="788.2" y="1859.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="791.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1725097059.linkToTargetMethod (1 samples, 0.08%)</title><rect x="789.2" y="1907.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="792.2" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.08%)</title><rect x="789.2" y="1891.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="792.2" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$291/908471397.get$Lambda (1 samples, 0.08%)</title><rect x="789.2" y="1875.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="792.2" y="1886.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="789.2" y="1859.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="792.2" y="1870.0"></text>
</g>
<g>
<title>Klass::is_klass() const volatile (1 samples, 0.08%)</title><rect x="789.2" y="1843.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="792.2" y="1854.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="789.2" y="1827.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="792.2" y="1838.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="789.2" y="1811.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="792.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="790.2" y="1907.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="793.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 2.06%)</title><rect x="791.2" y="1907.0" width="24.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="794.2" y="1918.0">j..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="795.0" y="1891.0" width="3.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="798.0" y="1902.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.33%)</title><rect x="795.0" y="1875.0" width="3.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="798.0" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.40%)</title><rect x="798.9" y="1891.0" width="16.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="801.9" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (17 samples, 1.40%)</title><rect x="798.9" y="1875.0" width="16.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$291/908471397.accept (17 samples, 1.40%)</title><rect x="798.9" y="1859.0" width="16.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="801.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (17 samples, 1.40%)</title><rect x="798.9" y="1843.0" width="16.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="801.9" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (17 samples, 1.40%)</title><rect x="798.9" y="1827.0" width="16.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="801.9" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (17 samples, 1.40%)</title><rect x="798.9" y="1811.0" width="16.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="801.9" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (12 samples, 0.99%)</title><rect x="803.8" y="1795.0" width="11.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="806.8" y="1806.0"></text>
</g>
<g>
<title>[vdso] (12 samples, 0.99%)</title><rect x="803.8" y="1779.0" width="11.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="806.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.24%)</title><rect x="815.5" y="1923.0" width="14.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="818.5" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (3 samples, 0.25%)</title><rect x="816.4" y="1907.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="819.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.91%)</title><rect x="819.4" y="1907.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="822.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.91%)</title><rect x="819.4" y="1891.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="822.4" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$291/908471397.accept (2 samples, 0.16%)</title><rect x="819.4" y="1875.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="822.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (2 samples, 0.16%)</title><rect x="819.4" y="1859.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="822.4" y="1870.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.16%)</title><rect x="819.4" y="1843.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.4" y="1854.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.16%)</title><rect x="819.4" y="1827.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="822.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$292/140847528.accept (9 samples, 0.74%)</title><rect x="821.3" y="1875.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="824.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (9 samples, 0.74%)</title><rect x="821.3" y="1859.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1608477091.complete (9 samples, 0.74%)</title><rect x="821.3" y="1843.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="824.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (9 samples, 0.74%)</title><rect x="821.3" y="1827.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/639405179.complete (9 samples, 0.74%)</title><rect x="821.3" y="1811.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="824.3" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (9 samples, 0.74%)</title><rect x="821.3" y="1795.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (9 samples, 0.74%)</title><rect x="821.3" y="1779.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="824.3" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.74%)</title><rect x="821.3" y="1763.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="824.3" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.74%)</title><rect x="821.3" y="1747.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.3" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 0.99%)</title><rect x="830.1" y="1923.0" width="11.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="833.1" y="1934.0"></text>
</g>
<g>
<title>[vdso] (12 samples, 0.99%)</title><rect x="830.1" y="1907.0" width="11.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="833.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.25%)</title><rect x="841.7" y="1987.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="844.7" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.25%)</title><rect x="841.7" y="1971.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="844.7" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.25%)</title><rect x="841.7" y="1955.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="844.7" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.25%)</title><rect x="841.7" y="1939.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="844.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.08%)</title><rect x="843.7" y="1923.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="846.7" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (229 samples, 18.88%)</title><rect x="844.7" y="1987.0" width="222.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="847.7" y="1998.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (229 samples, 18.88%)</title><rect x="844.7" y="1971.0" width="222.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="847.7" y="1982.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (203 samples, 16.74%)</title><rect x="870.0" y="1955.0" width="197.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="873.0" y="1966.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (16 samples, 1.32%)</title><rect x="885.5" y="1939.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="888.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.08%)</title><rect x="901.1" y="1939.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="904.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="901.1" y="1923.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="904.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="901.1" y="1907.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="904.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="901.1" y="1891.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="904.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="901.1" y="1875.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="904.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (169 samples, 13.93%)</title><rect x="902.1" y="1939.0" width="164.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="905.1" y="1950.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (158 samples, 13.03%)</title><rect x="912.8" y="1923.0" width="153.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="915.8" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="920.5" y="1907.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="923.5" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="921.5" y="1907.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="924.5" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="922.5" y="1907.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="925.5" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (137 samples, 11.29%)</title><rect x="924.4" y="1907.0" width="133.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="927.4" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="926.4" y="1891.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="929.4" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.65%)</title><rect x="928.3" y="1891.0" width="19.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.3" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.41%)</title><rect x="939.0" y="1875.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="942.0" y="1886.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.16%)</title><rect x="941.9" y="1859.0" width="2.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="944.9" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="943.9" y="1875.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="946.9" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.25%)</title><rect x="944.9" y="1875.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="947.9" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.16%)</title><rect x="947.8" y="1891.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="950.8" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="949.7" y="1891.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="952.7" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="950.7" y="1891.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="953.7" y="1902.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="951.7" y="1891.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="954.7" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (11 samples, 0.91%)</title><rect x="952.6" y="1891.0" width="10.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="955.6" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (29 samples, 2.39%)</title><rect x="963.3" y="1891.0" width="28.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="966.3" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (49 samples, 4.04%)</title><rect x="991.5" y="1891.0" width="47.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="994.5" y="1902.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.41%)</title><rect x="1039.2" y="1891.0" width="4.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1042.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.25%)</title><rect x="1044.1" y="1891.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1047.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="1047.0" y="1891.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1050.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="1048.9" y="1891.0" width="2.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1051.9" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="1050.9" y="1891.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1053.9" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.33%)</title><rect x="1051.9" y="1891.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.9" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.16%)</title><rect x="1055.8" y="1891.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1058.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (6 samples, 0.49%)</title><rect x="1057.7" y="1907.0" width="5.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1060.7" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1063.5" y="1907.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1066.5" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.16%)</title><rect x="1064.5" y="1907.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1067.5" y="1918.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="1066.5" y="1939.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1069.5" y="1950.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.08%)</title><rect x="1067.4" y="2035.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1070.4" y="2046.0"></text>
</g>
<g>
<title>start_thread (125 samples, 10.31%)</title><rect x="1068.4" y="2035.0" width="121.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1071.4" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (125 samples, 10.31%)</title><rect x="1068.4" y="2019.0" width="121.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1071.4" y="2030.0">java_start(Thre..</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.90%)</title><rect x="1068.4" y="2003.0" width="22.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.4" y="2014.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.33%)</title><rect x="1068.4" y="1987.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1071.4" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.33%)</title><rect x="1068.4" y="1971.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.4" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1068.4" y="1955.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.4" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.25%)</title><rect x="1069.4" y="1955.0" width="2.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1072.4" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.57%)</title><rect x="1072.3" y="1987.0" width="18.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1075.3" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.33%)</title><rect x="1072.3" y="1971.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1075.3" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1072.3" y="1955.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1075.3" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.25%)</title><rect x="1073.3" y="1955.0" width="2.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1076.3" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.41%)</title><rect x="1076.2" y="1971.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1079.2" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.41%)</title><rect x="1076.2" y="1955.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.2" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.16%)</title><rect x="1076.2" y="1939.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.2" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.16%)</title><rect x="1076.2" y="1923.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.2" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="1077.2" y="1907.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1080.2" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.25%)</title><rect x="1078.1" y="1939.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.1" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.25%)</title><rect x="1078.1" y="1923.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.1" y="1934.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.16%)</title><rect x="1078.1" y="1907.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.1" y="1918.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (2 samples, 0.16%)</title><rect x="1078.1" y="1891.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1081.1" y="1902.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1079.1" y="1875.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1082.1" y="1886.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1079.1" y="1859.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.1" y="1870.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.08%)</title><rect x="1080.1" y="1907.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1083.1" y="1918.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.08%)</title><rect x="1080.1" y="1891.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.1" y="1902.0"></text>
</g>
<g>
<title>frame::oopmapreg_to_location(VMRegImpl*, RegisterMap const*) const (1 samples, 0.08%)</title><rect x="1080.1" y="1875.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.1" y="1886.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (10 samples, 0.82%)</title><rect x="1081.0" y="1971.0" width="9.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.0" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (10 samples, 0.82%)</title><rect x="1081.0" y="1955.0" width="9.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.0" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (9 samples, 0.74%)</title><rect x="1081.0" y="1939.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.0" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (9 samples, 0.74%)</title><rect x="1081.0" y="1923.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.0" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (9 samples, 0.74%)</title><rect x="1081.0" y="1907.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.0" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (9 samples, 0.74%)</title><rect x="1081.0" y="1891.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.0" y="1902.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.08%)</title><rect x="1085.9" y="1875.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.9" y="1886.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.25%)</title><rect x="1086.9" y="1875.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.9" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="1086.9" y="1859.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.9" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1087.9" y="1859.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.9" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1088.8" y="1859.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.8" y="1870.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="1089.8" y="1939.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.8" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="1089.8" y="1923.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.8" y="1934.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1089.8" y="1907.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1092.8" y="1918.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.08%)</title><rect x="1089.8" y="1891.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.8" y="1902.0"></text>
</g>
<g>
<title>JavaThread::run() (98 samples, 8.08%)</title><rect x="1090.8" y="2003.0" width="95.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.8" y="2014.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (98 samples, 8.08%)</title><rect x="1090.8" y="1987.0" width="95.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.8" y="1998.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (98 samples, 8.08%)</title><rect x="1090.8" y="1971.0" width="95.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.8" y="1982.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (97 samples, 8.00%)</title><rect x="1090.8" y="1955.0" width="94.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.8" y="1966.0">CompileBrok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (97 samples, 8.00%)</title><rect x="1090.8" y="1939.0" width="94.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.8" y="1950.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (97 samples, 8.00%)</title><rect x="1090.8" y="1923.0" width="94.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.8" y="1934.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (38 samples, 3.13%)</title><rect x="1090.8" y="1907.0" width="36.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.8" y="1918.0">Com..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.16%)</title><rect x="1090.8" y="1891.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.8" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.08%)</title><rect x="1090.8" y="1875.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.8" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="1090.8" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.8" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1090.8" y="1843.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1093.8" y="1854.0"></text>
</g>
<g>
<title>loadNNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="1091.7" y="1875.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.7" y="1886.0"></text>
</g>
<g>
<title>Address::make_raw(int, int, int, int, relocInfo::relocType) (1 samples, 0.08%)</title><rect x="1091.7" y="1859.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.7" y="1870.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.08%)</title><rect x="1092.7" y="1891.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.7" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.41%)</title><rect x="1093.7" y="1891.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.7" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.41%)</title><rect x="1093.7" y="1875.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.7" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.25%)</title><rect x="1093.7" y="1859.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.7" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.08%)</title><rect x="1096.6" y="1859.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.6" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="1097.6" y="1859.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.6" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1097.6" y="1843.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1100.6" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1097.6" y="1827.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1100.6" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (30 samples, 2.47%)</title><rect x="1098.6" y="1891.0" width="29.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.6" y="1902.0">Ph..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="1098.6" y="1875.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.6" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.16%)</title><rect x="1099.5" y="1875.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.5" y="1886.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1100.5" y="1859.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.08%)</title><rect x="1101.5" y="1875.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1104.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.08%)</title><rect x="1101.5" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.16%)</title><rect x="1102.4" y="1875.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="1103.4" y="1859.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1103.4" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.4" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.08%)</title><rect x="1103.4" y="1827.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.4" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.41%)</title><rect x="1104.4" y="1875.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1105.4" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.16%)</title><rect x="1106.3" y="1859.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.3" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1108.3" y="1859.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.49%)</title><rect x="1109.3" y="1875.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.3" y="1886.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1112.2" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1115.2" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1113.1" y="1859.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.1" y="1870.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.08%)</title><rect x="1114.1" y="1859.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1115.1" y="1875.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.25%)</title><rect x="1116.1" y="1875.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.1" y="1886.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.08%)</title><rect x="1118.0" y="1859.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.16%)</title><rect x="1119.0" y="1875.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.0" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.16%)</title><rect x="1119.0" y="1859.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.0" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.16%)</title><rect x="1119.0" y="1843.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.0" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.16%)</title><rect x="1119.0" y="1827.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.0" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1120.0" y="1811.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.0" y="1822.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="1120.9" y="1875.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.16%)</title><rect x="1121.9" y="1875.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.9" y="1886.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="1122.9" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.9" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.25%)</title><rect x="1123.8" y="1875.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.8" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1125.8" y="1859.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.8" y="1870.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1126.8" y="1875.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1129.8" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (51 samples, 4.20%)</title><rect x="1127.7" y="1907.0" width="49.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.7" y="1918.0">Compi..</text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.33%)</title><rect x="1127.7" y="1891.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.7" y="1902.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1127.7" y="1875.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.7" y="1886.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1127.7" y="1859.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.7" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1127.7" y="1843.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.7" y="1854.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1127.7" y="1827.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.7" y="1838.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1128.7" y="1875.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.7" y="1886.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1128.7" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.7" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1128.7" y="1843.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.7" y="1854.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1128.7" y="1827.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.7" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (2 samples, 0.16%)</title><rect x="1129.7" y="1875.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.7" y="1886.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1130.7" y="1859.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1131.6" y="1891.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.6" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1131.6" y="1875.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (34 samples, 2.80%)</title><rect x="1132.6" y="1891.0" width="33.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.6" y="1902.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1132.6" y="1875.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.6" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1132.6" y="1859.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.6" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1132.6" y="1843.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.6" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1132.6" y="1827.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.6" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1132.6" y="1811.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.6" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1132.6" y="1795.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.6" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1132.6" y="1779.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.6" y="1790.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1132.6" y="1763.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.6" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.08%)</title><rect x="1132.6" y="1747.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.6" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1132.6" y="1731.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.6" y="1742.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1132.6" y="1715.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1135.6" y="1726.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="1133.6" y="1875.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.33%)</title><rect x="1134.6" y="1875.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.6" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1136.5" y="1859.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.5" y="1870.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1137.5" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1138.4" y="1875.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (24 samples, 1.98%)</title><rect x="1139.4" y="1875.0" width="23.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.4" y="1886.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (21 samples, 1.73%)</title><rect x="1142.3" y="1859.0" width="20.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1142.3" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (20 samples, 1.65%)</title><rect x="1143.3" y="1843.0" width="19.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.33%)</title><rect x="1158.9" y="1827.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.16%)</title><rect x="1162.8" y="1875.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.8" y="1886.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1163.7" y="1859.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1164.7" y="1875.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1164.7" y="1859.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.7" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1164.7" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.7" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1164.7" y="1827.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 0.82%)</title><rect x="1165.7" y="1891.0" width="9.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.7" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.74%)</title><rect x="1166.7" y="1875.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.7" y="1886.0"></text>
</g>
<g>
<title>CmpPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1166.7" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.7" y="1870.0"></text>
</g>
<g>
<title>LoadBNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1167.6" y="1859.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.6" y="1870.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1167.6" y="1843.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.6" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1168.6" y="1859.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.6" y="1870.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1168.6" y="1843.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.6" y="1854.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.08%)</title><rect x="1168.6" y="1827.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.6" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1168.6" y="1811.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.6" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1168.6" y="1795.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.6" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1168.6" y="1779.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.6" y="1790.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.08%)</title><rect x="1168.6" y="1763.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.6" y="1774.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.08%)</title><rect x="1169.6" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.25%)</title><rect x="1170.5" y="1859.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.5" y="1870.0"></text>
</g>
<g>
<title>Compile::set_node_notes_at(int, Node_Notes*) (1 samples, 0.08%)</title><rect x="1170.5" y="1843.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.5" y="1854.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.08%)</title><rect x="1171.5" y="1843.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1172.5" y="1843.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.5" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1173.5" y="1859.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.5" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1174.4" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1174.4" y="1843.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1827.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.4" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1811.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1795.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1779.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1763.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1747.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.4" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1731.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1715.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.4" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1699.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1683.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.4" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1667.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.4" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1651.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1635.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1619.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1603.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1587.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1571.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1555.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1539.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="1550.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1523.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="1534.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1507.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1518.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1174.4" y="1491.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.4" y="1502.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1174.4" y="1475.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="1486.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1175.4" y="1891.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.4" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1175.4" y="1875.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.4" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1175.4" y="1859.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1175.4" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.4" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1176.4" y="1891.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1176.4" y="1875.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1176.4" y="1859.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1176.4" y="1843.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="1854.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1176.4" y="1827.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.4" y="1838.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1176.4" y="1811.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.4" y="1822.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1176.4" y="1795.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.4" y="1806.0"></text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 0.08%)</title><rect x="1176.4" y="1779.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="1790.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (1 samples, 0.08%)</title><rect x="1176.4" y="1763.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="1774.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.58%)</title><rect x="1177.4" y="1907.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.58%)</title><rect x="1177.4" y="1891.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.58%)</title><rect x="1177.4" y="1875.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.58%)</title><rect x="1177.4" y="1859.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.58%)</title><rect x="1177.4" y="1843.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.58%)</title><rect x="1177.4" y="1827.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.49%)</title><rect x="1177.4" y="1811.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.49%)</title><rect x="1177.4" y="1795.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1177.4" y="1779.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1177.4" y="1763.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1177.4" y="1747.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.49%)</title><rect x="1177.4" y="1731.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.49%)</title><rect x="1177.4" y="1715.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.49%)</title><rect x="1177.4" y="1699.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1177.4" y="1683.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1177.4" y="1667.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1177.4" y="1651.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.49%)</title><rect x="1177.4" y="1635.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.49%)</title><rect x="1177.4" y="1619.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.4" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.49%)</title><rect x="1177.4" y="1603.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.49%)</title><rect x="1177.4" y="1587.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.49%)</title><rect x="1177.4" y="1571.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.49%)</title><rect x="1177.4" y="1555.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="1566.0"></text>
</g>
<g>
<title>InlineCallGenerator::is_inline() const (1 samples, 0.08%)</title><rect x="1177.4" y="1539.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.41%)</title><rect x="1178.3" y="1539.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="1550.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.08%)</title><rect x="1178.3" y="1523.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="1534.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.08%)</title><rect x="1178.3" y="1507.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="1518.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1178.3" y="1491.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.3" y="1502.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1178.3" y="1475.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="1486.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.08%)</title><rect x="1178.3" y="1459.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="1470.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.08%)</title><rect x="1178.3" y="1443.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.3" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1179.3" y="1523.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.3" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1179.3" y="1507.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1179.3" y="1491.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1179.3" y="1475.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1179.3" y="1459.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1179.3" y="1443.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.3" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1179.3" y="1427.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.3" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1179.3" y="1411.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1179.3" y="1395.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1179.3" y="1379.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1179.3" y="1363.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1179.3" y="1347.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="1358.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="1331.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.3" y="1342.0"></text>
</g>
<g>
<title>Compile::find_intrinsic(ciMethod*, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="1315.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="1326.0"></text>
</g>
<g>
<title>LibraryIntrinsic::is_virtual() const (1 samples, 0.08%)</title><rect x="1179.3" y="1299.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.3" y="1331.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.3" y="1315.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.3" y="1299.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.3" y="1283.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.3" y="1267.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.3" y="1251.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.3" y="1235.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.3" y="1219.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.3" y="1203.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.3" y="1187.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.3" y="1171.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="1182.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.08%)</title><rect x="1180.3" y="1155.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="1166.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*) (1 samples, 0.08%)</title><rect x="1180.3" y="1139.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="1150.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1180.3" y="1123.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="1134.0"></text>
</g>
<g>
<title>LShiftLNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1180.3" y="1107.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.3" y="1118.0"></text>
</g>
<g>
<title>TypeInt::get_con() const (1 samples, 0.08%)</title><rect x="1180.3" y="1091.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.16%)</title><rect x="1181.2" y="1443.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="1454.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.08%)</title><rect x="1181.2" y="1427.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="1438.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1181.2" y="1411.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="1422.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1181.2" y="1395.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="1427.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="1438.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1182.2" y="1411.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="1422.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="1395.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="1406.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.08%)</title><rect x="1182.2" y="1379.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="1390.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="1363.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="1374.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="1811.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="1795.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.2" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="1779.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="1763.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="1747.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="1731.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.2" y="1715.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.2" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="1699.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="1683.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="1667.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="1651.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="1635.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.2" y="1619.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="1603.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="1587.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="1571.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="1555.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="1539.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1183.2" y="1523.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="1507.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.2" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="1491.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.2" y="1502.0"></text>
</g>
<g>
<title>SafePointNode::next_exception() const (1 samples, 0.08%)</title><rect x="1183.2" y="1475.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.2" y="1486.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1184.2" y="1907.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1184.2" y="1891.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="1902.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.08%)</title><rect x="1185.1" y="1955.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.1" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.08%)</title><rect x="1185.1" y="1939.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.1" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.08%)</title><rect x="1185.1" y="1923.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.1" y="1934.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1185.1" y="1907.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.1" y="1918.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.08%)</title><rect x="1185.1" y="1891.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.1" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.33%)</title><rect x="1186.1" y="2003.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.1" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.33%)</title><rect x="1186.1" y="1987.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.1" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.25%)</title><rect x="1186.1" y="1971.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.1" y="1982.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.08%)</title><rect x="1187.1" y="1955.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.08%)</title><rect x="1187.1" y="1939.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="1950.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1187.1" y="1923.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.1" y="1934.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1187.1" y="1907.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="1918.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1187.1" y="1891.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="1902.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.08%)</title><rect x="1188.1" y="1955.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1191.1" y="1966.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.0" y="1971.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.0" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="1955.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="1939.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.0" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.0" y="1923.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="1934.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(bool) (1 samples, 0.08%)</title><rect x="1189.0" y="1907.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.0" y="1918.0"></text>
</g>
<g>
<title>Universe::print_heap_after_gc(outputStream*, bool) (1 samples, 0.08%)</title><rect x="1189.0" y="1891.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.0" y="1902.0"></text>
</g>
<g>
<title>MetaspaceAux::print_on(outputStream*) (1 samples, 0.08%)</title><rect x="1189.0" y="1875.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.0" y="1886.0"></text>
</g>
</g>
</svg>
