<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1253"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1253"> </text>
<g id="frames">
<g>
<title>all (367 samples, 100.00%)</title><rect x="10.0" y="1219.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.27%)</title><rect x="10.0" y="1203.0" width="3.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.27%)</title><rect x="10.0" y="1187.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (31 samples, 8.45%)</title><rect x="13.2" y="1203.0" width="99.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="1214.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.27%)</title><rect x="13.2" y="1187.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.27%)</title><rect x="13.2" y="1171.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.27%)</title><rect x="13.2" y="1155.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.27%)</title><rect x="13.2" y="1139.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.27%)</title><rect x="13.2" y="1123.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.27%)</title><rect x="13.2" y="1107.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.27%)</title><rect x="13.2" y="1091.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.27%)</title><rect x="13.2" y="1075.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.27%)</title><rect x="13.2" y="1059.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.canSendRequest (1 samples, 0.27%)</title><rect x="13.2" y="1043.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.isChannelReady (1 samples, 0.27%)</title><rect x="13.2" y="1027.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (30 samples, 8.17%)</title><rect x="16.4" y="1187.0" width="96.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.4" y="1198.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.54%)</title><rect x="16.4" y="1171.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.54%)</title><rect x="16.4" y="1155.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.54%)</title><rect x="16.4" y="1139.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.54%)</title><rect x="16.4" y="1123.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.54%)</title><rect x="16.4" y="1107.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.54%)</title><rect x="16.4" y="1091.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.54%)</title><rect x="16.4" y="1075.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.54%)</title><rect x="16.4" y="1059.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.54%)</title><rect x="16.4" y="1043.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.54%)</title><rect x="16.4" y="1027.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$262/1662317610.test (1 samples, 0.27%)</title><rect x="16.4" y="1011.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.4" y="1022.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.27%)</title><rect x="19.6" y="1011.0" width="3.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="22.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (3 samples, 0.82%)</title><rect x="22.9" y="1171.0" width="9.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (1 samples, 0.27%)</title><rect x="22.9" y="1155.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.resume (1 samples, 0.27%)</title><rect x="22.9" y="1139.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.paused (1 samples, 0.27%)</title><rect x="22.9" y="1123.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (2 samples, 0.54%)</title><rect x="26.1" y="1155.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.1" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.27%)</title><rect x="29.3" y="1139.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.27%)</title><rect x="32.5" y="1171.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.27%)</title><rect x="32.5" y="1155.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.5" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.27%)</title><rect x="32.5" y="1139.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="35.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$260/1448282536.accept (1 samples, 0.27%)</title><rect x="32.5" y="1123.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.27%)</title><rect x="32.5" y="1107.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="35.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.27%)</title><rect x="32.5" y="1091.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="35.5" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.27%)</title><rect x="32.5" y="1075.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.27%)</title><rect x="35.7" y="1171.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="38.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (12 samples, 3.27%)</title><rect x="38.9" y="1171.0" width="38.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.9" y="1182.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/546023164.accept (12 samples, 3.27%)</title><rect x="38.9" y="1155.0" width="38.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.9" y="1166.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (12 samples, 3.27%)</title><rect x="38.9" y="1139.0" width="38.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.9" y="1150.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.54%)</title><rect x="48.6" y="1123.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.54%)</title><rect x="48.6" y="1107.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.54%)</title><rect x="48.6" y="1091.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.54%)</title><rect x="48.6" y="1075.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.54%)</title><rect x="48.6" y="1059.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.54%)</title><rect x="48.6" y="1043.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.27%)</title><rect x="55.0" y="1123.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.27%)</title><rect x="55.0" y="1107.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="55.0" y="1091.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (6 samples, 1.63%)</title><rect x="58.2" y="1123.0" width="19.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 1.63%)</title><rect x="58.2" y="1107.0" width="19.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.27%)</title><rect x="71.1" y="1091.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.27%)</title><rect x="71.1" y="1075.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.1" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="74.3" y="1091.0" width="3.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="77.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.00%)</title><rect x="77.5" y="1171.0" width="35.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.5" y="1182.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.00%)</title><rect x="77.5" y="1155.0" width="35.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.5" y="1166.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 2.18%)</title><rect x="80.7" y="1139.0" width="25.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.7" y="1150.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.82%)</title><rect x="80.7" y="1123.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.82%)</title><rect x="80.7" y="1107.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.82%)</title><rect x="80.7" y="1091.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.27%)</title><rect x="80.7" y="1075.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.27%)</title><rect x="80.7" y="1059.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.27%)</title><rect x="80.7" y="1043.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.27%)</title><rect x="80.7" y="1027.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.27%)</title><rect x="80.7" y="1011.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.54%)</title><rect x="84.0" y="1075.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="84.0" y="1059.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="84.0" y="1043.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.27%)</title><rect x="84.0" y="1027.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.27%)</title><rect x="84.0" y="1011.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.27%)</title><rect x="84.0" y="995.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="87.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.27%)</title><rect x="87.2" y="1059.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.27%)</title><rect x="87.2" y="1043.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.27%)</title><rect x="87.2" y="1027.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 0.82%)</title><rect x="90.4" y="1123.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.82%)</title><rect x="90.4" y="1107.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.82%)</title><rect x="90.4" y="1091.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.82%)</title><rect x="90.4" y="1075.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.82%)</title><rect x="90.4" y="1059.0" width="9.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.54%)</title><rect x="100.0" y="1123.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="103.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.54%)</title><rect x="100.0" y="1107.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="103.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.27%)</title><rect x="100.0" y="1091.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.27%)</title><rect x="100.0" y="1075.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.27%)</title><rect x="100.0" y="1059.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="103.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.27%)</title><rect x="100.0" y="1043.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.27%)</title><rect x="100.0" y="1027.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.27%)</title><rect x="100.0" y="1011.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="103.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.27%)</title><rect x="100.0" y="995.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.27%)</title><rect x="100.0" y="979.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="103.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.27%)</title><rect x="100.0" y="963.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.27%)</title><rect x="100.0" y="947.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.27%)</title><rect x="100.0" y="931.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/1656062543.get (1 samples, 0.27%)</title><rect x="100.0" y="915.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="103.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.27%)</title><rect x="103.2" y="1091.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.2" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.27%)</title><rect x="103.2" y="1075.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.2" y="1086.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.27%)</title><rect x="103.2" y="1059.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="106.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.27%)</title><rect x="103.2" y="1043.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="106.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.27%)</title><rect x="103.2" y="1027.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.27%)</title><rect x="106.5" y="1139.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.27%)</title><rect x="106.5" y="1123.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="109.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.27%)</title><rect x="106.5" y="1107.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="109.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.27%)</title><rect x="109.7" y="1139.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="112.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="109.7" y="1123.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="112.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="109.7" y="1107.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="112.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="109.7" y="1091.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (243 samples, 66.21%)</title><rect x="112.9" y="1203.0" width="781.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="115.9" y="1214.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (243 samples, 66.21%)</title><rect x="112.9" y="1187.0" width="781.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="115.9" y="1198.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (243 samples, 66.21%)</title><rect x="112.9" y="1171.0" width="781.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.9" y="1182.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/60322792.run (232 samples, 63.22%)</title><rect x="119.3" y="1155.0" width="746.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="122.3" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/60322792.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (232 samples, 63.22%)</title><rect x="119.3" y="1139.0" width="746.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="122.3" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (232 samples, 63.22%)</title><rect x="119.3" y="1123.0" width="746.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.3" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (231 samples, 62.94%)</title><rect x="119.3" y="1107.0" width="742.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="122.3" y="1118.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.27%)</title><rect x="141.8" y="1091.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="144.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (37 samples, 10.08%)</title><rect x="145.0" y="1091.0" width="119.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="148.0" y="1102.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (37 samples, 10.08%)</title><rect x="145.0" y="1075.0" width="119.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.0" y="1086.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (37 samples, 10.08%)</title><rect x="145.0" y="1059.0" width="119.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="148.0" y="1070.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 10.08%)</title><rect x="145.0" y="1043.0" width="119.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="148.0" y="1054.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 10.08%)</title><rect x="145.0" y="1027.0" width="119.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.0" y="1038.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (37 samples, 10.08%)</title><rect x="145.0" y="1011.0" width="119.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.0" y="1022.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 2.72%)</title><rect x="145.0" y="995.0" width="32.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.0" y="1006.0">co..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.27%)</title><rect x="148.3" y="979.0" width="3.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="151.3" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="148.3" y="963.0" width="3.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="151.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.54%)</title><rect x="151.5" y="979.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="154.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.27%)</title><rect x="154.7" y="963.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="157.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.27%)</title><rect x="154.7" y="947.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="157.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.27%)</title><rect x="154.7" y="931.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="157.7" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.27%)</title><rect x="154.7" y="915.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="157.7" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.27%)</title><rect x="154.7" y="899.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="157.7" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.27%)</title><rect x="154.7" y="883.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 1.63%)</title><rect x="157.9" y="979.0" width="19.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 1.36%)</title><rect x="157.9" y="963.0" width="16.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="160.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.27%)</title><rect x="161.1" y="947.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="164.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.27%)</title><rect x="161.1" y="931.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="164.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.82%)</title><rect x="164.3" y="947.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 0.82%)</title><rect x="164.3" y="931.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="167.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.82%)</title><rect x="164.3" y="915.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="167.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.27%)</title><rect x="174.0" y="963.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="177.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (24 samples, 6.54%)</title><rect x="177.2" y="995.0" width="77.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.2" y="1006.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.27%)</title><rect x="177.2" y="979.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.27%)</title><rect x="180.4" y="979.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="183.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.27%)</title><rect x="180.4" y="963.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="183.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.27%)</title><rect x="180.4" y="947.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="183.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.54%)</title><rect x="183.6" y="979.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="186.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.27%)</title><rect x="186.8" y="963.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (19 samples, 5.18%)</title><rect x="190.1" y="979.0" width="61.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="193.1" y="990.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 1.91%)</title><rect x="190.1" y="963.0" width="22.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.1" y="974.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.82%)</title><rect x="190.1" y="947.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.82%)</title><rect x="190.1" y="931.0" width="9.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.82%)</title><rect x="190.1" y="915.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.82%)</title><rect x="190.1" y="899.0" width="9.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="193.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.54%)</title><rect x="193.3" y="883.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.09%)</title><rect x="199.7" y="947.0" width="12.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 1.09%)</title><rect x="199.7" y="931.0" width="12.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 1.09%)</title><rect x="199.7" y="915.0" width="12.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.82%)</title><rect x="202.9" y="899.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.82%)</title><rect x="202.9" y="883.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (12 samples, 3.27%)</title><rect x="212.6" y="963.0" width="38.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.6" y="974.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (12 samples, 3.27%)</title><rect x="212.6" y="947.0" width="38.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.6" y="958.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (12 samples, 3.27%)</title><rect x="212.6" y="931.0" width="38.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.6" y="942.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.54%)</title><rect x="212.6" y="915.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="215.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.27%)</title><rect x="212.6" y="899.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.27%)</title><rect x="215.8" y="899.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.09%)</title><rect x="219.0" y="915.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.82%)</title><rect x="222.2" y="899.0" width="9.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.82%)</title><rect x="222.2" y="883.0" width="9.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="225.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.82%)</title><rect x="222.2" y="867.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.2" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.82%)</title><rect x="222.2" y="851.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.82%)</title><rect x="231.9" y="915.0" width="9.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="234.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.82%)</title><rect x="231.9" y="899.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.82%)</title><rect x="231.9" y="883.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.82%)</title><rect x="231.9" y="867.0" width="9.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.9" y="878.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.82%)</title><rect x="231.9" y="851.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.82%)</title><rect x="241.5" y="915.0" width="9.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.27%)</title><rect x="247.9" y="899.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.9" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.27%)</title><rect x="247.9" y="883.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="250.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.27%)</title><rect x="251.1" y="979.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.82%)</title><rect x="254.4" y="995.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="257.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.82%)</title><rect x="254.4" y="979.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.82%)</title><rect x="254.4" y="963.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="257.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.82%)</title><rect x="254.4" y="947.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.82%)</title><rect x="254.4" y="931.0" width="9.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (174 samples, 47.41%)</title><rect x="264.0" y="1091.0" width="559.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.0" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (34 samples, 9.26%)</title><rect x="264.0" y="1075.0" width="109.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.0" y="1086.0">com/linecorp/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (33 samples, 8.99%)</title><rect x="267.2" y="1059.0" width="106.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="270.2" y="1070.0">org/slf4j/MDC..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (27 samples, 7.36%)</title><rect x="286.5" y="1043.0" width="86.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.5" y="1054.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.54%)</title><rect x="292.9" y="1027.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.54%)</title><rect x="292.9" y="1011.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.54%)</title><rect x="292.9" y="995.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.54%)</title><rect x="292.9" y="979.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.9" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.27%)</title><rect x="299.4" y="1027.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="302.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.27%)</title><rect x="299.4" y="1011.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.27%)</title><rect x="299.4" y="995.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.27%)</title><rect x="299.4" y="979.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.27%)</title><rect x="299.4" y="963.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.4" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (22 samples, 5.99%)</title><rect x="302.6" y="1027.0" width="70.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.6" y="1038.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 3.00%)</title><rect x="338.0" y="1011.0" width="35.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="341.0" y="1022.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 3.00%)</title><rect x="338.0" y="995.0" width="35.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="341.0" y="1006.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.27%)</title><rect x="366.9" y="979.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="369.9" y="990.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.27%)</title><rect x="370.1" y="979.0" width="3.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="373.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.09%)</title><rect x="373.3" y="1075.0" width="12.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.54%)</title><rect x="379.8" y="1059.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="382.8" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.54%)</title><rect x="379.8" y="1043.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="382.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (39 samples, 10.63%)</title><rect x="386.2" y="1075.0" width="125.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.2" y="1086.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (39 samples, 10.63%)</title><rect x="386.2" y="1059.0" width="125.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="389.2" y="1070.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (14 samples, 3.81%)</title><rect x="395.8" y="1043.0" width="45.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="398.8" y="1054.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 2.72%)</title><rect x="405.5" y="1027.0" width="32.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.5" y="1038.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 1.91%)</title><rect x="405.5" y="1011.0" width="22.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="408.5" y="1022.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.82%)</title><rect x="411.9" y="995.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="414.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.82%)</title><rect x="411.9" y="979.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.9" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.82%)</title><rect x="411.9" y="963.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="414.9" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.54%)</title><rect x="411.9" y="947.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="414.9" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.27%)</title><rect x="411.9" y="931.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="414.9" y="942.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.27%)</title><rect x="411.9" y="915.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="414.9" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.27%)</title><rect x="415.1" y="931.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="418.1" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.27%)</title><rect x="418.3" y="947.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="421.3" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="421.6" y="995.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="424.6" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="424.8" y="995.0" width="3.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="427.8" y="1006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.82%)</title><rect x="428.0" y="1011.0" width="9.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="431.0" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="437.6" y="1027.0" width="3.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="440.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.54%)</title><rect x="440.8" y="1043.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="443.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.82%)</title><rect x="447.3" y="1043.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="450.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.27%)</title><rect x="447.3" y="1027.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="450.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.27%)</title><rect x="447.3" y="1011.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.27%)</title><rect x="447.3" y="995.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="450.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.54%)</title><rect x="450.5" y="1027.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="453.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.54%)</title><rect x="450.5" y="1011.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="453.5" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (17 samples, 4.63%)</title><rect x="456.9" y="1043.0" width="54.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="459.9" y="1054.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (17 samples, 4.63%)</title><rect x="456.9" y="1027.0" width="54.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="459.9" y="1038.0">ch/qo..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.27%)</title><rect x="456.9" y="1011.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="459.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.27%)</title><rect x="456.9" y="995.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="459.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.27%)</title><rect x="456.9" y="979.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="459.9" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.27%)</title><rect x="456.9" y="963.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="459.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.27%)</title><rect x="456.9" y="947.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="459.9" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (16 samples, 4.36%)</title><rect x="460.1" y="1011.0" width="51.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.1" y="1022.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (16 samples, 4.36%)</title><rect x="460.1" y="995.0" width="51.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="463.1" y="1006.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 2.45%)</title><rect x="482.6" y="979.0" width="29.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="485.6" y="990.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.27%)</title><rect x="495.5" y="963.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="498.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.09%)</title><rect x="498.7" y="963.0" width="12.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.7" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="508.4" y="947.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="511.4" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="508.4" y="931.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="511.4" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="508.4" y="915.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="511.4" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="508.4" y="899.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="511.4" y="910.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.27%)</title><rect x="508.4" y="883.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="511.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (80 samples, 21.80%)</title><rect x="511.6" y="1075.0" width="257.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="514.6" y="1086.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (80 samples, 21.80%)</title><rect x="511.6" y="1059.0" width="257.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="514.6" y="1070.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/750848590.process (68 samples, 18.53%)</title><rect x="518.0" y="1043.0" width="218.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.0" y="1054.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (68 samples, 18.53%)</title><rect x="518.0" y="1027.0" width="218.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="521.0" y="1038.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (68 samples, 18.53%)</title><rect x="518.0" y="1011.0" width="218.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="521.0" y="1022.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (67 samples, 18.26%)</title><rect x="521.2" y="995.0" width="215.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="524.2" y="1006.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (67 samples, 18.26%)</title><rect x="521.2" y="979.0" width="215.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="524.2" y="990.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (54 samples, 14.71%)</title><rect x="546.9" y="963.0" width="173.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="549.9" y="974.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.09%)</title><rect x="569.5" y="947.0" width="12.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="572.5" y="958.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.27%)</title><rect x="582.3" y="947.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="585.3" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="585.5" y="947.0" width="3.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="588.5" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.82%)</title><rect x="588.7" y="947.0" width="9.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="591.7" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="595.2" y="931.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="598.2" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.54%)</title><rect x="598.4" y="947.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="601.4" y="958.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (36 samples, 9.81%)</title><rect x="604.8" y="947.0" width="115.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="607.8" y="958.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.54%)</title><rect x="637.0" y="931.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="640.0" y="942.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.54%)</title><rect x="637.0" y="915.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="640.0" y="926.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.27%)</title><rect x="643.4" y="931.0" width="3.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="646.4" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 4.36%)</title><rect x="646.6" y="931.0" width="51.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="649.6" y="942.0">__pth..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.27%)</title><rect x="698.1" y="931.0" width="3.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="701.1" y="942.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.82%)</title><rect x="701.3" y="931.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="704.3" y="942.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.27%)</title><rect x="710.9" y="931.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="713.9" y="942.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.54%)</title><rect x="714.1" y="931.0" width="6.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="717.1" y="942.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.27%)</title><rect x="720.6" y="963.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="723.6" y="974.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.54%)</title><rect x="723.8" y="963.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="726.8" y="974.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.27%)</title><rect x="730.2" y="963.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="733.2" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.27%)</title><rect x="733.4" y="963.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="736.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.27%)</title><rect x="736.6" y="1043.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="739.6" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.27%)</title><rect x="739.9" y="1043.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="742.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.27%)</title><rect x="739.9" y="1027.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="742.9" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.27%)</title><rect x="739.9" y="1011.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="742.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 1.09%)</title><rect x="743.1" y="1043.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.54%)</title><rect x="749.5" y="1027.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="752.5" y="1038.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.27%)</title><rect x="749.5" y="1011.0" width="3.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="752.5" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.27%)</title><rect x="752.7" y="1011.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="755.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (4 samples, 1.09%)</title><rect x="755.9" y="1043.0" width="12.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 4.63%)</title><rect x="768.8" y="1075.0" width="54.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="771.8" y="1086.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 4.63%)</title><rect x="768.8" y="1059.0" width="54.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="771.8" y="1070.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.09%)</title><rect x="807.4" y="1043.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="810.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$285/842780697.accept (4 samples, 1.09%)</title><rect x="807.4" y="1027.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="810.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (4 samples, 1.09%)</title><rect x="807.4" y="1011.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="810.4" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (4 samples, 1.09%)</title><rect x="807.4" y="995.0" width="12.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="810.4" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (4 samples, 1.09%)</title><rect x="807.4" y="979.0" width="12.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="810.4" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.54%)</title><rect x="810.6" y="963.0" width="6.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="813.6" y="974.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.54%)</title><rect x="810.6" y="947.0" width="6.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="813.6" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.27%)</title><rect x="817.0" y="963.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="820.0" y="974.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.27%)</title><rect x="820.2" y="1043.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="823.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 3.27%)</title><rect x="823.5" y="1091.0" width="38.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.5" y="1102.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 3.27%)</title><rect x="823.5" y="1075.0" width="38.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="826.5" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 3.27%)</title><rect x="823.5" y="1059.0" width="38.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="826.5" y="1070.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$286/1361347581.accept (12 samples, 3.27%)</title><rect x="823.5" y="1043.0" width="38.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="826.5" y="1054.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (12 samples, 3.27%)</title><rect x="823.5" y="1027.0" width="38.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="826.5" y="1038.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/1304351380.complete (12 samples, 3.27%)</title><rect x="823.5" y="1011.0" width="38.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="826.5" y="1022.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (12 samples, 3.27%)</title><rect x="823.5" y="995.0" width="38.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.5" y="1006.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1027994686.complete (12 samples, 3.27%)</title><rect x="823.5" y="979.0" width="38.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.5" y="990.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (12 samples, 3.27%)</title><rect x="823.5" y="963.0" width="38.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="826.5" y="974.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (12 samples, 3.27%)</title><rect x="823.5" y="947.0" width="38.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="826.5" y="958.0">com..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 3.27%)</title><rect x="823.5" y="931.0" width="38.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.5" y="942.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 3.27%)</title><rect x="823.5" y="915.0" width="38.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="826.5" y="926.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (12 samples, 3.27%)</title><rect x="823.5" y="899.0" width="38.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="826.5" y="910.0">ch/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.27%)</title><rect x="862.0" y="1107.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="865.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 2.45%)</title><rect x="865.3" y="1155.0" width="28.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="868.3" y="1166.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 2.45%)</title><rect x="865.3" y="1139.0" width="28.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="868.3" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 2.18%)</title><rect x="868.5" y="1123.0" width="25.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="871.5" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 2.18%)</title><rect x="868.5" y="1107.0" width="25.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="871.5" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 2.18%)</title><rect x="868.5" y="1091.0" width="25.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="871.5" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 2.18%)</title><rect x="868.5" y="1075.0" width="25.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="871.5" y="1086.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.27%)</title><rect x="894.2" y="1203.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="897.2" y="1214.0"></text>
</g>
<g>
<title>start_thread (91 samples, 24.80%)</title><rect x="897.4" y="1203.0" width="292.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="900.4" y="1214.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (91 samples, 24.80%)</title><rect x="897.4" y="1187.0" width="292.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="900.4" y="1198.0">java_start(Thread*)</text>
</g>
<g>
<title>ConcurrentG1RefineThread::run() (1 samples, 0.27%)</title><rect x="897.4" y="1171.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="900.4" y="1182.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::run_young_rs_sampling() (1 samples, 0.27%)</title><rect x="897.4" y="1155.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="900.4" y="1166.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::sample_young_list_rs_lengths() (1 samples, 0.27%)</title><rect x="897.4" y="1139.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="900.4" y="1150.0"></text>
</g>
<g>
<title>YoungList::rs_length_sampling_next() (1 samples, 0.27%)</title><rect x="897.4" y="1123.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="900.4" y="1134.0"></text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 5.45%)</title><rect x="900.6" y="1171.0" width="64.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.6" y="1182.0">GangWor..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 5.45%)</title><rect x="900.6" y="1155.0" width="64.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="903.6" y="1166.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 3.54%)</title><rect x="900.6" y="1139.0" width="41.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="903.6" y="1150.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 3.00%)</title><rect x="900.6" y="1123.0" width="35.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="903.6" y="1134.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 1.91%)</title><rect x="903.8" y="1107.0" width="22.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="906.8" y="1118.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.27%)</title><rect x="923.1" y="1091.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="926.1" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.27%)</title><rect x="926.3" y="1107.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="929.3" y="1118.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.54%)</title><rect x="929.6" y="1107.0" width="6.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="932.6" y="1118.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 0.54%)</title><rect x="936.0" y="1123.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.0" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 1.63%)</title><rect x="942.4" y="1139.0" width="19.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="945.4" y="1150.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.27%)</title><rect x="942.4" y="1123.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="945.4" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.27%)</title><rect x="945.6" y="1123.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="948.6" y="1134.0"></text>
</g>
<g>
<title>G1ParTask::G1CLDClosure&lt;(G1Mark)0&gt;::do_cld(ClassLoaderData*) (1 samples, 0.27%)</title><rect x="945.6" y="1107.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="948.6" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 1.09%)</title><rect x="948.9" y="1123.0" width="12.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="951.9" y="1134.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.82%)</title><rect x="948.9" y="1107.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="951.9" y="1118.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.27%)</title><rect x="958.5" y="1107.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.5" y="1118.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.27%)</title><rect x="958.5" y="1091.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="961.5" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.27%)</title><rect x="961.7" y="1139.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="964.7" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.27%)</title><rect x="961.7" y="1123.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="964.7" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.27%)</title><rect x="961.7" y="1107.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.7" y="1118.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.27%)</title><rect x="961.7" y="1091.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="964.7" y="1102.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.27%)</title><rect x="961.7" y="1075.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="964.7" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.27%)</title><rect x="961.7" y="1059.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="964.7" y="1070.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.27%)</title><rect x="961.7" y="1043.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="964.7" y="1054.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.27%)</title><rect x="961.7" y="1027.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.7" y="1038.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.27%)</title><rect x="961.7" y="1011.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.7" y="1022.0"></text>
</g>
<g>
<title>JavaThread::run() (70 samples, 19.07%)</title><rect x="964.9" y="1171.0" width="225.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="967.9" y="1182.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (70 samples, 19.07%)</title><rect x="964.9" y="1155.0" width="225.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="967.9" y="1166.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (70 samples, 19.07%)</title><rect x="964.9" y="1139.0" width="225.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="967.9" y="1150.0">CompileBroker::compiler_thread..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (69 samples, 18.80%)</title><rect x="964.9" y="1123.0" width="221.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="967.9" y="1134.0">CompileBroker::invoke_compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (66 samples, 17.98%)</title><rect x="964.9" y="1107.0" width="212.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="967.9" y="1118.0">C2Compiler::compile_method(c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (66 samples, 17.98%)</title><rect x="964.9" y="1091.0" width="212.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="967.9" y="1102.0">Compile::Compile(ciEnv*, C2C..</text>
</g>
<g>
<title>Compile::Code_Gen() (36 samples, 9.81%)</title><rect x="964.9" y="1075.0" width="115.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="967.9" y="1086.0">Compile::Code_..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.27%)</title><rect x="964.9" y="1059.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="967.9" y="1070.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.27%)</title><rect x="964.9" y="1043.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="967.9" y="1054.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.27%)</title><rect x="968.1" y="1059.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="971.1" y="1070.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.27%)</title><rect x="968.1" y="1043.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="971.1" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.27%)</title><rect x="968.1" y="1027.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="971.1" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.27%)</title><rect x="968.1" y="1011.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="971.1" y="1022.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.27%)</title><rect x="971.4" y="1059.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="974.4" y="1070.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.36%)</title><rect x="974.6" y="1059.0" width="16.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="977.6" y="1070.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.27%)</title><rect x="974.6" y="1043.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.6" y="1054.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.27%)</title><rect x="974.6" y="1027.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="977.6" y="1038.0"></text>
</g>
<g>
<title>LoadBNode::Opcode() const (1 samples, 0.27%)</title><rect x="974.6" y="1011.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="977.6" y="1022.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.09%)</title><rect x="977.8" y="1043.0" width="12.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="980.8" y="1054.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.54%)</title><rect x="977.8" y="1027.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="980.8" y="1038.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.54%)</title><rect x="984.2" y="1027.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="987.2" y="1038.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.54%)</title><rect x="984.2" y="1011.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.2" y="1022.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.27%)</title><rect x="984.2" y="995.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="987.2" y="1006.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.27%)</title><rect x="984.2" y="979.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.2" y="990.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.27%)</title><rect x="987.4" y="995.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="990.4" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.27%)</title><rect x="990.7" y="1059.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="993.7" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.27%)</title><rect x="990.7" y="1043.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.7" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.27%)</title><rect x="990.7" y="1027.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.7" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.27%)</title><rect x="990.7" y="1011.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="993.7" y="1022.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (1 samples, 0.27%)</title><rect x="990.7" y="995.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="993.7" y="1006.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.27%)</title><rect x="990.7" y="979.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="993.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 7.08%)</title><rect x="993.9" y="1059.0" width="83.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="996.9" y="1070.0">PhaseChai..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.27%)</title><rect x="997.1" y="1043.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1000.1" y="1054.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.27%)</title><rect x="1000.3" y="1043.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1003.3" y="1054.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.27%)</title><rect x="1003.5" y="1043.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1006.5" y="1054.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.27%)</title><rect x="1006.7" y="1043.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1009.7" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.27%)</title><rect x="1006.7" y="1027.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1009.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.54%)</title><rect x="1009.9" y="1043.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1012.9" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.54%)</title><rect x="1009.9" y="1027.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1012.9" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.27%)</title><rect x="1016.4" y="1043.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1019.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.27%)</title><rect x="1016.4" y="1027.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1019.4" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1016.4" y="1011.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1019.4" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.82%)</title><rect x="1019.6" y="1043.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1022.6" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.82%)</title><rect x="1029.2" y="1043.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1032.2" y="1054.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.27%)</title><rect x="1032.5" y="1027.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.5" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1035.7" y="1027.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1038.7" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.27%)</title><rect x="1038.9" y="1043.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1041.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.27%)</title><rect x="1038.9" y="1027.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1041.9" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.27%)</title><rect x="1042.1" y="1043.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1045.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.27%)</title><rect x="1045.3" y="1043.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.27%)</title><rect x="1045.3" y="1027.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.3" y="1038.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.82%)</title><rect x="1048.5" y="1043.0" width="9.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1051.5" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.82%)</title><rect x="1048.5" y="1027.0" width="9.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1051.5" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.82%)</title><rect x="1048.5" y="1011.0" width="9.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.5" y="1022.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.27%)</title><rect x="1048.5" y="995.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.5" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.54%)</title><rect x="1051.7" y="995.0" width="6.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.54%)</title><rect x="1058.2" y="1043.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.2" y="1054.0"></text>
</g>
<g>
<title>_init (1 samples, 0.27%)</title><rect x="1061.4" y="1027.0" width="3.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1064.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.27%)</title><rect x="1064.6" y="1043.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1067.6" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.82%)</title><rect x="1067.8" y="1043.0" width="9.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.8" y="1054.0"></text>
</g>
<g>
<title>loadBNode::out_RegMask() const (1 samples, 0.27%)</title><rect x="1077.5" y="1059.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.5" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (26 samples, 7.08%)</title><rect x="1080.7" y="1075.0" width="83.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1083.7" y="1086.0">Compile::..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.27%)</title><rect x="1080.7" y="1059.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (19 samples, 5.18%)</title><rect x="1083.9" y="1059.0" width="61.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1086.9" y="1070.0">PhaseI..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.27%)</title><rect x="1083.9" y="1043.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1086.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 4.36%)</title><rect x="1087.1" y="1043.0" width="51.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.1" y="1054.0">Phase..</text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.27%)</title><rect x="1100.0" y="1027.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1103.0" y="1038.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.27%)</title><rect x="1100.0" y="1011.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.0" y="1022.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.27%)</title><rect x="1100.0" y="995.0" width="3.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1103.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (11 samples, 3.00%)</title><rect x="1103.2" y="1027.0" width="35.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.2" y="1038.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 3.00%)</title><rect x="1103.2" y="1011.0" width="35.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.2" y="1022.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.27%)</title><rect x="1135.3" y="995.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.54%)</title><rect x="1138.6" y="1043.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.27%)</title><rect x="1141.8" y="1027.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.27%)</title><rect x="1141.8" y="1011.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.8" y="1022.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.27%)</title><rect x="1141.8" y="995.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.09%)</title><rect x="1145.0" y="1059.0" width="12.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.09%)</title><rect x="1145.0" y="1043.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.0" y="1054.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1145.0" y="1027.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.0" y="1038.0"></text>
</g>
<g>
<title>IfNode::fold_compares(PhaseGVN*) (1 samples, 0.27%)</title><rect x="1145.0" y="1011.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.0" y="1022.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.82%)</title><rect x="1148.2" y="1027.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.2" y="1038.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (3 samples, 0.82%)</title><rect x="1148.2" y="1011.0" width="9.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.2" y="1022.0"></text>
</g>
<g>
<title>RegionNode::bottom_type() const (1 samples, 0.27%)</title><rect x="1157.8" y="1059.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.8" y="1070.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.27%)</title><rect x="1161.1" y="1059.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.1" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.09%)</title><rect x="1164.3" y="1075.0" width="12.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.3" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.09%)</title><rect x="1164.3" y="1059.0" width="12.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.09%)</title><rect x="1164.3" y="1043.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.09%)</title><rect x="1164.3" y="1027.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.09%)</title><rect x="1164.3" y="1011.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.09%)</title><rect x="1164.3" y="995.0" width="12.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.3" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.09%)</title><rect x="1164.3" y="979.0" width="12.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.3" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.09%)</title><rect x="1164.3" y="963.0" width="12.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.09%)</title><rect x="1164.3" y="947.0" width="12.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.09%)</title><rect x="1164.3" y="931.0" width="12.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.09%)</title><rect x="1164.3" y="915.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.09%)</title><rect x="1164.3" y="899.0" width="12.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.3" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.3" y="883.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.3" y="867.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.3" y="878.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.27%)</title><rect x="1164.3" y="851.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.3" y="862.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.82%)</title><rect x="1167.5" y="883.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.5" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.82%)</title><rect x="1167.5" y="867.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.82%)</title><rect x="1167.5" y="851.0" width="9.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.82%)</title><rect x="1167.5" y="835.0" width="9.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.82%)</title><rect x="1167.5" y="819.0" width="9.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.82%)</title><rect x="1167.5" y="803.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.82%)</title><rect x="1167.5" y="787.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.5" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.82%)</title><rect x="1167.5" y="771.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.5" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.82%)</title><rect x="1167.5" y="755.0" width="9.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.82%)</title><rect x="1167.5" y="739.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.82%)</title><rect x="1167.5" y="723.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.82%)</title><rect x="1167.5" y="707.0" width="9.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.82%)</title><rect x="1167.5" y="691.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.82%)</title><rect x="1167.5" y="675.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.5" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.82%)</title><rect x="1167.5" y="659.0" width="9.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.82%)</title><rect x="1167.5" y="643.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.82%)</title><rect x="1167.5" y="627.0" width="9.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.82%)</title><rect x="1167.5" y="611.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.82%)</title><rect x="1167.5" y="595.0" width="9.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.82%)</title><rect x="1167.5" y="579.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.82%)</title><rect x="1167.5" y="563.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.82%)</title><rect x="1167.5" y="547.0" width="9.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.82%)</title><rect x="1167.5" y="531.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.82%)</title><rect x="1167.5" y="515.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.82%)</title><rect x="1167.5" y="499.0" width="9.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1167.5" y="483.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1167.5" y="467.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1167.5" y="451.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1167.5" y="435.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1167.5" y="419.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1167.5" y="403.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1167.5" y="387.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1167.5" y="371.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1167.5" y="355.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1167.5" y="339.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1167.5" y="323.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1167.5" y="307.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1167.5" y="291.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.5" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1167.5" y="275.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.5" y="286.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.27%)</title><rect x="1167.5" y="259.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.5" y="270.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.27%)</title><rect x="1167.5" y="243.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.5" y="254.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.27%)</title><rect x="1167.5" y="227.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="238.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1167.5" y="211.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.5" y="222.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseTransform*) (1 samples, 0.27%)</title><rect x="1167.5" y="195.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.5" y="206.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.27%)</title><rect x="1167.5" y="179.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.7" y="259.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.7" y="243.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.7" y="227.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1170.7" y="211.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.7" y="222.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.27%)</title><rect x="1170.7" y="195.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="206.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.27%)</title><rect x="1170.7" y="179.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="190.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.9" y="483.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.9" y="467.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.9" y="451.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1173.9" y="435.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1173.9" y="419.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1173.9" y="403.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1173.9" y="387.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.9" y="371.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.9" y="355.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1173.9" y="339.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1173.9" y="323.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1173.9" y="307.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1173.9" y="291.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.9" y="275.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.9" y="259.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1173.9" y="243.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1173.9" y="227.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1173.9" y="211.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1173.9" y="195.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.9" y="179.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.9" y="163.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1173.9" y="147.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1173.9" y="131.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1173.9" y="115.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1173.9" y="99.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.27%)</title><rect x="1173.9" y="83.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="94.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.27%)</title><rect x="1173.9" y="67.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="78.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.27%)</title><rect x="1173.9" y="51.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="62.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.27%)</title><rect x="1173.9" y="35.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.82%)</title><rect x="1177.1" y="1107.0" width="9.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="1118.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.82%)</title><rect x="1177.1" y="1091.0" width="9.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.82%)</title><rect x="1177.1" y="1075.0" width="9.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.82%)</title><rect x="1177.1" y="1059.0" width="9.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="1070.0"></text>
</g>
<g>
<title>Compilation::build_hir() (3 samples, 0.82%)</title><rect x="1177.1" y="1043.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="1054.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.82%)</title><rect x="1177.1" y="1027.0" width="9.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="1038.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.82%)</title><rect x="1177.1" y="1011.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 0.82%)</title><rect x="1177.1" y="995.0" width="9.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.82%)</title><rect x="1177.1" y="979.0" width="9.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.82%)</title><rect x="1177.1" y="963.0" width="9.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.82%)</title><rect x="1177.1" y="947.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.27%)</title><rect x="1177.1" y="931.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.27%)</title><rect x="1177.1" y="915.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.27%)</title><rect x="1177.1" y="899.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="910.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.54%)</title><rect x="1180.4" y="931.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.54%)</title><rect x="1180.4" y="915.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 0.54%)</title><rect x="1180.4" y="899.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="910.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.27%)</title><rect x="1180.4" y="883.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.27%)</title><rect x="1180.4" y="867.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.4" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.27%)</title><rect x="1180.4" y="851.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="862.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.27%)</title><rect x="1180.4" y="835.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.4" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.27%)</title><rect x="1183.6" y="883.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.6" y="894.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.27%)</title><rect x="1183.6" y="867.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="878.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1183.6" y="851.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="862.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.27%)</title><rect x="1183.6" y="835.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="846.0"></text>
</g>
<g>
<title>ciType::make(BasicType) (1 samples, 0.27%)</title><rect x="1183.6" y="819.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="830.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.27%)</title><rect x="1186.8" y="1123.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.8" y="1134.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.27%)</title><rect x="1186.8" y="1107.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.8" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.27%)</title><rect x="1186.8" y="1091.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.8" y="1102.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.27%)</title><rect x="1186.8" y="1075.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="1086.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.27%)</title><rect x="1186.8" y="1059.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.8" y="1070.0"></text>
</g>
</g>
</svg>
