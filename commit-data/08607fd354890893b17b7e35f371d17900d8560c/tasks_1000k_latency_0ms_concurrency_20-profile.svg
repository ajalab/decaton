<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,442 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="10.8" y="2035.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.8" y="2046.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.07%)</title><rect x="10.8" y="2019.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.8" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (285 samples, 19.76%)</title><rect x="11.6" y="2035.0" width="233.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.6" y="2046.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (284 samples, 19.69%)</title><rect x="12.5" y="2019.0" width="232.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.5" y="2030.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="12.5" y="2003.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="15.5" y="2014.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="12.5" y="1987.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="15.5" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (4 samples, 0.28%)</title><rect x="13.3" y="2003.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.3" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.28%)</title><rect x="13.3" y="1987.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.3" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.28%)</title><rect x="13.3" y="1971.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.3" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.28%)</title><rect x="13.3" y="1955.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.3" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.07%)</title><rect x="13.3" y="1939.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.3" y="1950.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.07%)</title><rect x="13.3" y="1923.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="13.3" y="1907.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.3" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="13.3" y="1891.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.3" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="13.3" y="1875.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.21%)</title><rect x="14.1" y="1939.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.1" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.21%)</title><rect x="14.1" y="1923.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="14.1" y="1907.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.1" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.14%)</title><rect x="14.1" y="1891.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.14%)</title><rect x="14.1" y="1875.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.14%)</title><rect x="14.1" y="1859.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.1" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (2 samples, 0.14%)</title><rect x="14.1" y="1843.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.1" y="1854.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="14.1" y="1827.0" width="1.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="17.1" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.07%)</title><rect x="15.7" y="1907.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="15.7" y="1891.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="15.7" y="1875.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="15.7" y="1859.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="15.7" y="1843.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.07%)</title><rect x="16.5" y="2003.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.5" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="16.5" y="1987.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.5" y="1998.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="16.5" y="1971.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.5" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="16.5" y="1955.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.5" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="16.5" y="1939.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.5" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.07%)</title><rect x="17.4" y="2003.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.4" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (8 samples, 0.55%)</title><rect x="18.2" y="2003.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.2" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (8 samples, 0.55%)</title><rect x="18.2" y="1987.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.2" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.49%)</title><rect x="19.0" y="1971.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.0" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$260/1649181109.accept (7 samples, 0.49%)</title><rect x="19.0" y="1955.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.0" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (7 samples, 0.49%)</title><rect x="19.0" y="1939.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.0" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.07%)</title><rect x="19.0" y="1923.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="22.0" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.42%)</title><rect x="19.8" y="1923.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.8" y="1934.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.28%)</title><rect x="21.5" y="1907.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.5" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="24.7" y="2003.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.7" y="2014.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="24.7" y="1987.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="27.7" y="1998.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="24.7" y="1971.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="27.7" y="1982.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (212 samples, 14.70%)</title><rect x="25.5" y="2003.0" width="173.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.5" y="2014.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/1356205958.accept (208 samples, 14.42%)</title><rect x="25.5" y="1987.0" width="170.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.5" y="1998.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (208 samples, 14.42%)</title><rect x="25.5" y="1971.0" width="170.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.5" y="1982.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (168 samples, 11.65%)</title><rect x="30.5" y="1955.0" width="137.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.5" y="1966.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (168 samples, 11.65%)</title><rect x="30.5" y="1939.0" width="137.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.5" y="1950.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (168 samples, 11.65%)</title><rect x="30.5" y="1923.0" width="137.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="33.5" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (168 samples, 11.65%)</title><rect x="30.5" y="1907.0" width="137.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.5" y="1918.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (168 samples, 11.65%)</title><rect x="30.5" y="1891.0" width="137.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.5" y="1902.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (168 samples, 11.65%)</title><rect x="30.5" y="1875.0" width="137.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.5" y="1886.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (115 samples, 7.98%)</title><rect x="67.3" y="1859.0" width="94.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.3" y="1870.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (25 samples, 1.73%)</title><rect x="67.3" y="1843.0" width="20.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="70.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (25 samples, 1.73%)</title><rect x="67.3" y="1827.0" width="20.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (25 samples, 1.73%)</title><rect x="67.3" y="1811.0" width="20.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (14 samples, 0.97%)</title><rect x="87.7" y="1843.0" width="11.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="90.7" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (14 samples, 0.97%)</title><rect x="87.7" y="1827.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.7" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="92.6" y="1811.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.6" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.07%)</title><rect x="92.6" y="1795.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="95.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (7 samples, 0.49%)</title><rect x="93.5" y="1811.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="96.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (76 samples, 5.27%)</title><rect x="99.2" y="1843.0" width="62.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.2" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (76 samples, 5.27%)</title><rect x="99.2" y="1827.0" width="62.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.2" y="1838.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (75 samples, 5.20%)</title><rect x="99.2" y="1811.0" width="61.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.2" y="1822.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (75 samples, 5.20%)</title><rect x="99.2" y="1795.0" width="61.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="102.2" y="1806.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (73 samples, 5.06%)</title><rect x="100.8" y="1779.0" width="59.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="103.8" y="1790.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 4.58%)</title><rect x="101.7" y="1763.0" width="54.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="104.7" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.21%)</title><rect x="103.3" y="1747.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="106.3" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.14%)</title><rect x="105.7" y="1747.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="108.7" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.14%)</title><rect x="107.4" y="1747.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="110.4" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (41 samples, 2.84%)</title><rect x="109.0" y="1747.0" width="33.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="112.0" y="1758.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.21%)</title><rect x="142.6" y="1747.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="145.6" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 0.90%)</title><rect x="145.0" y="1747.0" width="10.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="148.0" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.35%)</title><rect x="155.7" y="1763.0" width="4.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="158.7" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="159.8" y="1763.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="162.8" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="160.6" y="1811.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.14%)</title><rect x="161.4" y="1859.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="164.4" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.14%)</title><rect x="161.4" y="1843.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="164.4" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.14%)</title><rect x="161.4" y="1827.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="164.4" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.35%)</title><rect x="163.0" y="1859.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.0" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.35%)</title><rect x="163.0" y="1843.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="166.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="163.0" y="1827.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="163.0" y="1811.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.28%)</title><rect x="163.8" y="1827.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="166.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.07%)</title><rect x="163.8" y="1811.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.21%)</title><rect x="164.7" y="1811.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="167.7" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="167.1" y="1859.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="170.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.21%)</title><rect x="167.9" y="1955.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="170.9" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.21%)</title><rect x="167.9" y="1939.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="170.9" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.21%)</title><rect x="167.9" y="1923.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.9" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (30 samples, 2.08%)</title><rect x="170.4" y="1955.0" width="24.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="173.4" y="1966.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="171.2" y="1939.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="174.2" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="172.0" y="1939.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="175.0" y="1950.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (26 samples, 1.80%)</title><rect x="172.8" y="1939.0" width="21.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.8" y="1950.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.42%)</title><rect x="187.6" y="1923.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="190.6" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.07%)</title><rect x="187.6" y="1907.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="190.6" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.07%)</title><rect x="187.6" y="1891.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="190.6" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="187.6" y="1875.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="190.6" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="188.4" y="1907.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="191.4" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.28%)</title><rect x="189.2" y="1907.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="192.2" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="192.5" y="1923.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="195.5" y="1934.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="194.1" y="1939.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="197.1" y="1950.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="194.9" y="1955.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="197.9" y="1966.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="195.8" y="1987.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="198.8" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.21%)</title><rect x="196.6" y="1987.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="199.6" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.21%)</title><rect x="196.6" y="1971.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.21%)</title><rect x="196.6" y="1955.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.21%)</title><rect x="196.6" y="1939.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.6" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.14%)</title><rect x="197.4" y="1923.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 3.88%)</title><rect x="199.0" y="2003.0" width="45.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="202.0" y="2014.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 3.81%)</title><rect x="199.8" y="1987.0" width="45.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="202.8" y="1998.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 2.36%)</title><rect x="199.8" y="1971.0" width="27.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.8" y="1982.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="199.8" y="1955.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.8" y="1966.0"></text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (1 samples, 0.07%)</title><rect x="199.8" y="1939.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="202.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 2.29%)</title><rect x="200.7" y="1955.0" width="27.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="203.7" y="1966.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (33 samples, 2.29%)</title><rect x="200.7" y="1939.0" width="27.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.7" y="1950.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 2.01%)</title><rect x="200.7" y="1923.0" width="23.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.7" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 2.01%)</title><rect x="200.7" y="1907.0" width="23.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="203.7" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (15 samples, 1.04%)</title><rect x="201.5" y="1891.0" width="12.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.49%)</title><rect x="207.2" y="1875.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="210.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.49%)</title><rect x="207.2" y="1859.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.49%)</title><rect x="207.2" y="1843.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.49%)</title><rect x="207.2" y="1827.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.49%)</title><rect x="207.2" y="1811.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="210.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.49%)</title><rect x="207.2" y="1795.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="210.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.49%)</title><rect x="207.2" y="1779.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="210.2" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.nextOffset (1 samples, 0.07%)</title><rect x="212.9" y="1875.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.nextOffset (1 samples, 0.07%)</title><rect x="212.9" y="1859.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.lastOffset (1 samples, 0.07%)</title><rect x="212.9" y="1843.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="215.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.lastOffsetDelta (1 samples, 0.07%)</title><rect x="212.9" y="1827.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.9" y="1838.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getLong (1 samples, 0.07%)</title><rect x="212.9" y="1811.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 0.90%)</title><rect x="213.8" y="1891.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 0.83%)</title><rect x="214.6" y="1875.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (12 samples, 0.83%)</title><rect x="214.6" y="1859.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (12 samples, 0.83%)</title><rect x="214.6" y="1843.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.6" y="1854.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.21%)</title><rect x="221.9" y="1827.0" width="2.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="224.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.14%)</title><rect x="224.4" y="1923.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.14%)</title><rect x="224.4" y="1907.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="224.4" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.4" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="224.4" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="225.2" y="1891.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="225.2" y="1875.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="225.2" y="1859.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="225.2" y="1843.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.07%)</title><rect x="225.2" y="1827.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.2" y="1838.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.07%)</title><rect x="225.2" y="1811.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="228.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.14%)</title><rect x="226.0" y="1923.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="229.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.55%)</title><rect x="227.7" y="1971.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.49%)</title><rect x="227.7" y="1955.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.49%)</title><rect x="227.7" y="1939.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.7" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.14%)</title><rect x="227.7" y="1923.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/616823838.accept (2 samples, 0.14%)</title><rect x="227.7" y="1907.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="229.3" y="1923.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="232.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="229.3" y="1907.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="229.3" y="1891.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="229.3" y="1875.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="229.3" y="1859.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="229.3" y="1843.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="229.3" y="1827.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.3" y="1838.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="229.3" y="1811.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="232.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.28%)</title><rect x="230.1" y="1923.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.21%)</title><rect x="230.9" y="1907.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.9" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.21%)</title><rect x="230.9" y="1891.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.9" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.21%)</title><rect x="230.9" y="1875.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.21%)</title><rect x="230.9" y="1859.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.9" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.21%)</title><rect x="230.9" y="1843.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.9" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="230.9" y="1827.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.9" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.14%)</title><rect x="230.9" y="1811.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.9" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="231.8" y="1795.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.8" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="231.8" y="1779.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.8" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="231.8" y="1763.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="234.8" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="231.8" y="1747.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.8" y="1758.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="231.8" y="1731.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="234.8" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.07%)</title><rect x="232.6" y="1827.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.6" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="232.6" y="1811.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.6" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="232.6" y="1795.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.6" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="232.6" y="1779.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.6" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="232.6" y="1763.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.6" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="233.4" y="1955.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="233.4" y="1939.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="233.4" y="1923.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.49%)</title><rect x="234.2" y="1971.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.49%)</title><rect x="234.2" y="1955.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="237.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.14%)</title><rect x="234.2" y="1939.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.07%)</title><rect x="234.2" y="1923.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.07%)</title><rect x="234.2" y="1907.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="234.2" y="1891.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.07%)</title><rect x="234.2" y="1875.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="234.2" y="1859.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="234.2" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.07%)</title><rect x="234.2" y="1827.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.07%)</title><rect x="234.2" y="1811.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="237.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.07%)</title><rect x="234.2" y="1795.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.07%)</title><rect x="234.2" y="1779.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.2" y="1790.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.07%)</title><rect x="234.2" y="1763.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.2" y="1774.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.07%)</title><rect x="234.2" y="1747.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.2" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.07%)</title><rect x="235.0" y="1923.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.07%)</title><rect x="235.0" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.0" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="235.0" y="1891.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.0" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="235.0" y="1875.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.07%)</title><rect x="235.9" y="1939.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.07%)</title><rect x="235.9" y="1923.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.9" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.entrySet (1 samples, 0.07%)</title><rect x="235.9" y="1907.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.9" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="235.9" y="1891.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="238.9" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="235.9" y="1875.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="238.9" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="235.9" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="238.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.28%)</title><rect x="236.7" y="1939.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="236.7" y="1923.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="236.7" y="1907.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="236.7" y="1891.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.07%)</title><rect x="236.7" y="1875.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="239.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.14%)</title><rect x="237.5" y="1923.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.14%)</title><rect x="237.5" y="1907.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.14%)</title><rect x="237.5" y="1891.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.5" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="237.5" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="240.5" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="237.5" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="240.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="238.3" y="1875.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="238.3" y="1859.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="238.3" y="1843.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.3" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="238.3" y="1827.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="241.3" y="1838.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="238.3" y="1811.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="241.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="239.1" y="1923.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.1" y="1934.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="239.1" y="1907.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.1" y="1918.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="239.1" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.1" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="239.1" y="1875.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.1" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.07%)</title><rect x="239.1" y="1859.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.1" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.07%)</title><rect x="239.1" y="1843.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.1" y="1854.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.07%)</title><rect x="239.1" y="1827.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="242.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.42%)</title><rect x="239.9" y="1971.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.42%)</title><rect x="239.9" y="1955.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (5 samples, 0.35%)</title><rect x="240.8" y="1939.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.8" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.14%)</title><rect x="240.8" y="1923.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.8" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.14%)</title><rect x="240.8" y="1907.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="243.8" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.14%)</title><rect x="240.8" y="1891.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (2 samples, 0.14%)</title><rect x="240.8" y="1875.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.8" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.07%)</title><rect x="242.4" y="1923.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.07%)</title><rect x="242.4" y="1907.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.14%)</title><rect x="243.2" y="1923.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="244.0" y="1907.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.0" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="244.0" y="1891.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="244.0" y="1875.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="244.0" y="1859.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="244.0" y="1843.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.0" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="244.0" y="1827.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.0" y="1838.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="244.0" y="1811.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="247.0" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="244.0" y="1795.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.0" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="244.0" y="1779.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$253/1379853265.test (1 samples, 0.07%)</title><rect x="244.0" y="1763.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.0" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.07%)</title><rect x="244.0" y="1747.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.0" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$252/1273162183.test (1 samples, 0.07%)</title><rect x="244.0" y="1731.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="247.0" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.07%)</title><rect x="244.0" y="1715.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.0" y="1726.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="244.0" y="1699.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.0" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="244.0" y="1683.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.0" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="244.0" y="1667.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.0" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.07%)</title><rect x="244.0" y="1651.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.0" y="1662.0"></text>
</g>
<g>
<title>java/lang/Thread.run (709 samples, 49.17%)</title><rect x="244.9" y="2035.0" width="580.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.9" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (709 samples, 49.17%)</title><rect x="244.9" y="2019.0" width="580.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.9" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (709 samples, 49.17%)</title><rect x="244.9" y="2003.0" width="580.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="247.9" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1819501977.run (488 samples, 33.84%)</title><rect x="245.7" y="1987.0" width="399.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.7" y="1998.0">com/linecorp/decaton/processor/runtime/internal/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (488 samples, 33.84%)</title><rect x="245.7" y="1971.0" width="399.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.7" y="1982.0">com/linecorp/decaton/processor/runtime/internal/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (488 samples, 33.84%)</title><rect x="245.7" y="1955.0" width="399.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="248.7" y="1966.0">com/linecorp/decaton/processor/runtime/internal/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (480 samples, 33.29%)</title><rect x="245.7" y="1939.0" width="392.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="248.7" y="1950.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (158 samples, 10.96%)</title><rect x="254.7" y="1923.0" width="129.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.7" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.69%)</title><rect x="262.9" y="1907.0" width="8.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="265.9" y="1918.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.42%)</title><rect x="266.1" y="1891.0" width="4.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="269.1" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (138 samples, 9.57%)</title><rect x="271.0" y="1907.0" width="113.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.0" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (138 samples, 9.57%)</title><rect x="271.0" y="1891.0" width="113.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.0" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (138 samples, 9.57%)</title><rect x="271.0" y="1875.0" width="113.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.0" y="1886.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (138 samples, 9.57%)</title><rect x="271.0" y="1859.0" width="113.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.0" y="1870.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (138 samples, 9.57%)</title><rect x="271.0" y="1843.0" width="113.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.0" y="1854.0">com/fasterxml/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="271.0" y="1827.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="274.0" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="271.0" y="1811.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="274.0" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="271.0" y="1795.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="274.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (30 samples, 2.08%)</title><rect x="271.9" y="1827.0" width="24.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.9" y="1838.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (9 samples, 0.62%)</title><rect x="271.9" y="1811.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (9 samples, 0.62%)</title><rect x="271.9" y="1795.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (9 samples, 0.62%)</title><rect x="271.9" y="1779.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.62%)</title><rect x="271.9" y="1763.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (9 samples, 0.62%)</title><rect x="271.9" y="1747.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.9" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="278.4" y="1731.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.4" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.07%)</title><rect x="278.4" y="1715.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 1.46%)</title><rect x="279.2" y="1811.0" width="17.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.2" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="279.2" y="1795.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="282.2" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="279.2" y="1779.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="282.2" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="279.2" y="1763.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="282.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.14%)</title><rect x="279.2" y="1747.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="282.2" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="279.2" y="1731.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="282.2" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="279.2" y="1715.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="282.2" y="1726.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="279.2" y="1699.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="282.2" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="279.2" y="1683.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="282.2" y="1694.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="280.0" y="1731.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="283.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (19 samples, 1.32%)</title><rect x="280.9" y="1795.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.9" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="280.9" y="1779.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="283.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.35%)</title><rect x="281.7" y="1779.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.35%)</title><rect x="281.7" y="1763.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="284.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (13 samples, 0.90%)</title><rect x="285.8" y="1779.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (13 samples, 0.90%)</title><rect x="285.8" y="1763.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (12 samples, 0.83%)</title><rect x="285.8" y="1747.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.07%)</title><rect x="295.6" y="1747.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (96 samples, 6.66%)</title><rect x="296.4" y="1827.0" width="78.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="299.4" y="1838.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (6 samples, 0.42%)</title><rect x="296.4" y="1811.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (6 samples, 0.42%)</title><rect x="296.4" y="1795.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (6 samples, 0.42%)</title><rect x="296.4" y="1779.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="299.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (6 samples, 0.42%)</title><rect x="296.4" y="1763.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (6 samples, 0.42%)</title><rect x="296.4" y="1747.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="299.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.14%)</title><rect x="297.2" y="1731.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.2" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (3 samples, 0.21%)</title><rect x="298.9" y="1731.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.9" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (3 samples, 0.21%)</title><rect x="298.9" y="1715.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.35%)</title><rect x="301.3" y="1811.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.35%)</title><rect x="301.3" y="1795.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.14%)</title><rect x="303.8" y="1779.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="306.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.62%)</title><rect x="305.4" y="1811.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="308.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.49%)</title><rect x="307.0" y="1795.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.42%)</title><rect x="307.9" y="1779.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.42%)</title><rect x="307.9" y="1763.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.21%)</title><rect x="310.3" y="1747.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="313.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.62%)</title><rect x="312.8" y="1811.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="315.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (8 samples, 0.55%)</title><rect x="313.6" y="1795.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (67 samples, 4.65%)</title><rect x="320.1" y="1811.0" width="54.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.1" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.18%)</title><rect x="321.0" y="1795.0" width="13.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="324.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.35%)</title><rect x="329.1" y="1779.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.35%)</title><rect x="329.1" y="1763.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.35%)</title><rect x="329.1" y="1747.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.14%)</title><rect x="333.2" y="1779.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="336.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (49 samples, 3.40%)</title><rect x="334.9" y="1795.0" width="40.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="337.9" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (49 samples, 3.40%)</title><rect x="334.9" y="1779.0" width="40.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.9" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="334.9" y="1763.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="337.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (48 samples, 3.33%)</title><rect x="335.7" y="1763.0" width="39.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="338.7" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.76%)</title><rect x="339.8" y="1747.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="342.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.14%)</title><rect x="346.3" y="1731.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="349.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.14%)</title><rect x="346.3" y="1715.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.14%)</title><rect x="346.3" y="1699.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="349.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="347.1" y="1683.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="350.1" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="348.0" y="1731.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="348.0" y="1715.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="351.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (10 samples, 0.69%)</title><rect x="348.8" y="1747.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.55%)</title><rect x="350.4" y="1731.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="353.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.55%)</title><rect x="350.4" y="1715.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.55%)</title><rect x="350.4" y="1699.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="353.4" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.55%)</title><rect x="350.4" y="1683.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.4" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="357.0" y="1747.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.49%)</title><rect x="357.8" y="1747.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.49%)</title><rect x="357.8" y="1731.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="360.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.49%)</title><rect x="357.8" y="1715.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="360.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.49%)</title><rect x="357.8" y="1699.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="360.8" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.49%)</title><rect x="357.8" y="1683.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="360.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="362.7" y="1667.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.7" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.42%)</title><rect x="363.5" y="1747.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="366.5" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.42%)</title><rect x="363.5" y="1731.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="366.5" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.42%)</title><rect x="363.5" y="1715.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="366.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="367.6" y="1699.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.6" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (8 samples, 0.55%)</title><rect x="368.4" y="1747.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="371.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (4 samples, 0.28%)</title><rect x="371.7" y="1731.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="374.7" y="1742.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.21%)</title><rect x="371.7" y="1715.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="374.7" y="1726.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (3 samples, 0.21%)</title><rect x="371.7" y="1699.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="374.7" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="372.5" y="1683.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="375.5" y="1694.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.14%)</title><rect x="372.5" y="1667.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="375.5" y="1678.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="373.3" y="1651.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="376.3" y="1662.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="374.1" y="1715.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="377.1" y="1726.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="374.1" y="1699.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="377.1" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="374.1" y="1683.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="377.1" y="1694.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="374.1" y="1667.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="377.1" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.76%)</title><rect x="375.0" y="1827.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="378.0" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.76%)</title><rect x="375.0" y="1811.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.76%)</title><rect x="375.0" y="1795.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 0.76%)</title><rect x="375.0" y="1779.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="378.0" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.76%)</title><rect x="375.0" y="1763.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="378.0" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (288 samples, 19.97%)</title><rect x="384.0" y="1923.0" width="235.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="387.0" y="1934.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (39 samples, 2.70%)</title><rect x="384.0" y="1907.0" width="31.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.0" y="1918.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (38 samples, 2.64%)</title><rect x="384.8" y="1891.0" width="31.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.8" y="1902.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (36 samples, 2.50%)</title><rect x="385.6" y="1875.0" width="29.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="388.6" y="1886.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.62%)</title><rect x="390.5" y="1859.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="393.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.62%)</title><rect x="390.5" y="1843.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (9 samples, 0.62%)</title><rect x="390.5" y="1827.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="393.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (9 samples, 0.62%)</title><rect x="390.5" y="1811.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="393.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (9 samples, 0.62%)</title><rect x="390.5" y="1795.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="393.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="397.9" y="1859.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="397.9" y="1843.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="400.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="397.9" y="1827.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="400.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.07%)</title><rect x="397.9" y="1811.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="400.9" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.07%)</title><rect x="397.9" y="1795.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.9" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (20 samples, 1.39%)</title><rect x="398.7" y="1859.0" width="16.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="401.7" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (16 samples, 1.11%)</title><rect x="402.0" y="1843.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="405.0" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.07%)</title><rect x="402.8" y="1827.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="405.8" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.49%)</title><rect x="403.6" y="1827.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="406.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (7 samples, 0.49%)</title><rect x="403.6" y="1811.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.6" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.49%)</title><rect x="409.3" y="1827.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="412.3" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.07%)</title><rect x="415.1" y="1875.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="418.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.21%)</title><rect x="415.9" y="1907.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="418.9" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.14%)</title><rect x="416.7" y="1891.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="419.7" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.14%)</title><rect x="416.7" y="1875.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (166 samples, 11.51%)</title><rect x="418.3" y="1907.0" width="135.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="421.3" y="1918.0">com/linecorp/deca..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="418.3" y="1891.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="421.3" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="418.3" y="1875.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="421.3" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="418.3" y="1859.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="421.3" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="418.3" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="421.3" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="418.3" y="1827.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="421.3" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="418.3" y="1811.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="421.3" y="1822.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="418.3" y="1795.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="421.3" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="418.3" y="1779.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="421.3" y="1790.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="418.3" y="1763.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="421.3" y="1774.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="418.3" y="1747.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="421.3" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (165 samples, 11.44%)</title><rect x="419.2" y="1891.0" width="135.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.2" y="1902.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (78 samples, 5.41%)</title><rect x="426.5" y="1875.0" width="63.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="429.5" y="1886.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="440.4" y="1859.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="443.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="440.4" y="1843.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="443.4" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="440.4" y="1827.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="443.4" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="440.4" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="443.4" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.07%)</title><rect x="440.4" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="443.4" y="1806.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (40 samples, 2.77%)</title><rect x="441.2" y="1859.0" width="32.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="444.2" y="1870.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (38 samples, 2.64%)</title><rect x="442.9" y="1843.0" width="31.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="445.9" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (19 samples, 1.32%)</title><rect x="450.2" y="1827.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="453.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (19 samples, 1.32%)</title><rect x="450.2" y="1811.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.2" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 1.32%)</title><rect x="450.2" y="1795.0" width="15.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="453.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (17 samples, 1.18%)</title><rect x="450.2" y="1779.0" width="14.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="453.2" y="1790.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="450.2" y="1763.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="453.2" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (8 samples, 0.55%)</title><rect x="451.1" y="1763.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="454.1" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="451.1" y="1747.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="454.1" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="451.1" y="1731.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="454.1" y="1742.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="451.9" y="1747.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="454.9" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (6 samples, 0.42%)</title><rect x="452.7" y="1747.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="455.7" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (6 samples, 0.42%)</title><rect x="452.7" y="1731.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="455.7" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="452.7" y="1715.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="455.7" y="1726.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (3 samples, 0.21%)</title><rect x="453.5" y="1715.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="456.5" y="1726.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="456.0" y="1715.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="459.0" y="1726.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="456.8" y="1715.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="459.8" y="1726.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.14%)</title><rect x="457.6" y="1763.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="460.6" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.42%)</title><rect x="459.3" y="1763.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="462.3" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.14%)</title><rect x="462.5" y="1747.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="465.5" y="1758.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="463.3" y="1731.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="466.3" y="1742.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (2 samples, 0.14%)</title><rect x="464.2" y="1779.0" width="1.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="467.2" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.42%)</title><rect x="465.8" y="1827.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="468.8" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="470.7" y="1827.0" width="1.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="473.7" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="472.3" y="1827.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="475.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.14%)</title><rect x="474.0" y="1859.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="477.0" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="474.0" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="477.0" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="474.8" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="477.8" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="474.8" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="477.8" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="475.6" y="1859.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="478.6" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (17 samples, 1.18%)</title><rect x="476.4" y="1859.0" width="13.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="479.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.28%)</title><rect x="490.3" y="1875.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="493.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.28%)</title><rect x="493.6" y="1875.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="496.6" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.28%)</title><rect x="493.6" y="1859.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="496.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.28%)</title><rect x="493.6" y="1843.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="496.6" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (70 samples, 4.85%)</title><rect x="496.9" y="1875.0" width="57.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="499.9" y="1886.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (68 samples, 4.72%)</title><rect x="498.5" y="1859.0" width="55.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="501.5" y="1870.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (19 samples, 1.32%)</title><rect x="505.9" y="1843.0" width="15.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="508.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (19 samples, 1.32%)</title><rect x="505.9" y="1827.0" width="15.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="508.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (19 samples, 1.32%)</title><rect x="505.9" y="1811.0" width="15.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="508.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (19 samples, 1.32%)</title><rect x="505.9" y="1795.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="508.9" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (19 samples, 1.32%)</title><rect x="505.9" y="1779.0" width="15.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="508.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="521.4" y="1843.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="524.4" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="521.4" y="1827.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="524.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="521.4" y="1811.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="524.4" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.07%)</title><rect x="521.4" y="1795.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="524.4" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="521.4" y="1779.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="524.4" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (39 samples, 2.70%)</title><rect x="522.3" y="1843.0" width="31.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="525.3" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (34 samples, 2.36%)</title><rect x="526.4" y="1827.0" width="27.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="529.4" y="1838.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.14%)</title><rect x="528.8" y="1811.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="531.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.14%)</title><rect x="528.8" y="1795.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="531.8" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (29 samples, 2.01%)</title><rect x="530.4" y="1811.0" width="23.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="533.4" y="1822.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.07%)</title><rect x="544.4" y="1795.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="547.4" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.62%)</title><rect x="545.2" y="1795.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="548.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="550.9" y="1779.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="553.9" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="550.9" y="1763.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="553.9" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="550.9" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="553.9" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="550.9" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="553.9" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="550.9" y="1715.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="553.9" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="550.9" y="1699.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="553.9" y="1710.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="550.9" y="1683.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="553.9" y="1694.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.07%)</title><rect x="551.7" y="1779.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="554.7" y="1790.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.14%)</title><rect x="552.5" y="1795.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="555.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (41 samples, 2.84%)</title><rect x="554.2" y="1907.0" width="33.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="557.2" y="1918.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (41 samples, 2.84%)</title><rect x="554.2" y="1891.0" width="33.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="557.2" y="1902.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1014288372.process (20 samples, 1.39%)</title><rect x="559.1" y="1875.0" width="16.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="562.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (20 samples, 1.39%)</title><rect x="559.1" y="1859.0" width="16.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="562.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.11%)</title><rect x="559.9" y="1843.0" width="13.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="562.9" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.14%)</title><rect x="565.6" y="1827.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="568.6" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.14%)</title><rect x="565.6" y="1811.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="568.6" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.14%)</title><rect x="565.6" y="1795.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="568.6" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.14%)</title><rect x="565.6" y="1779.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="568.6" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.14%)</title><rect x="565.6" y="1763.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="568.6" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.07%)</title><rect x="566.4" y="1747.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="569.4" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.49%)</title><rect x="567.3" y="1827.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="570.3" y="1838.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="567.3" y="1811.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="570.3" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="567.3" y="1795.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="570.3" y="1806.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.42%)</title><rect x="568.1" y="1811.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="571.1" y="1822.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.42%)</title><rect x="568.1" y="1795.0" width="4.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="571.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.21%)</title><rect x="573.0" y="1843.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="576.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.21%)</title><rect x="573.0" y="1827.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="576.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="573.8" y="1811.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="576.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="573.8" y="1795.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="576.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.14%)</title><rect x="575.5" y="1875.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="578.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.14%)</title><rect x="575.5" y="1859.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="578.5" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.69%)</title><rect x="577.1" y="1875.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="580.1" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.35%)</title><rect x="581.2" y="1859.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="584.2" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="581.2" y="1843.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="584.2" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.28%)</title><rect x="582.0" y="1843.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="585.0" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.21%)</title><rect x="585.3" y="1875.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.14%)</title><rect x="586.1" y="1859.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="589.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.07%)</title><rect x="587.7" y="1907.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="590.7" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="587.7" y="1891.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="590.7" y="1902.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.07%)</title><rect x="587.7" y="1875.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="590.7" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (38 samples, 2.64%)</title><rect x="588.5" y="1907.0" width="31.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="591.5" y="1918.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (38 samples, 2.64%)</title><rect x="588.5" y="1891.0" width="31.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="591.5" y="1902.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="600.0" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="603.0" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="600.0" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="603.0" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="600.0" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="603.0" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="600.0" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="603.0" y="1838.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="600.0" y="1811.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="603.0" y="1822.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="600.8" y="1875.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="603.8" y="1886.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.55%)</title><rect x="601.6" y="1875.0" width="6.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="604.6" y="1886.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.49%)</title><rect x="602.5" y="1859.0" width="5.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="605.5" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 0.90%)</title><rect x="608.2" y="1875.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="611.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$285/1190778407.accept (13 samples, 0.90%)</title><rect x="608.2" y="1859.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="611.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (13 samples, 0.90%)</title><rect x="608.2" y="1843.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="611.2" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (3 samples, 0.21%)</title><rect x="608.2" y="1827.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="611.2" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.21%)</title><rect x="608.2" y="1811.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="611.2" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.21%)</title><rect x="608.2" y="1795.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="611.2" y="1806.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (10 samples, 0.69%)</title><rect x="610.6" y="1827.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="613.6" y="1838.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (10 samples, 0.69%)</title><rect x="610.6" y="1811.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="613.6" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.35%)</title><rect x="614.7" y="1795.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="617.7" y="1806.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="614.7" y="1779.0" width="4.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="617.7" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="618.8" y="1875.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="621.8" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.11%)</title><rect x="619.6" y="1923.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="622.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 1.11%)</title><rect x="619.6" y="1907.0" width="13.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="622.6" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.11%)</title><rect x="619.6" y="1891.0" width="13.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="622.6" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$285/1190778407.accept (3 samples, 0.21%)</title><rect x="619.6" y="1875.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="622.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (3 samples, 0.21%)</title><rect x="619.6" y="1859.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="622.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (3 samples, 0.21%)</title><rect x="619.6" y="1843.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="622.6" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.21%)</title><rect x="619.6" y="1827.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="622.6" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.21%)</title><rect x="619.6" y="1811.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="622.6" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="621.3" y="1795.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="624.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$286/1837834466.accept (13 samples, 0.90%)</title><rect x="622.1" y="1875.0" width="10.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="625.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (13 samples, 0.90%)</title><rect x="622.1" y="1859.0" width="10.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="625.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/318624172.complete (13 samples, 0.90%)</title><rect x="622.1" y="1843.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="625.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (13 samples, 0.90%)</title><rect x="622.1" y="1827.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="625.1" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1108982514.complete (13 samples, 0.90%)</title><rect x="622.1" y="1811.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="625.1" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (13 samples, 0.90%)</title><rect x="622.1" y="1795.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="625.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (13 samples, 0.90%)</title><rect x="622.1" y="1779.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="625.1" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 0.90%)</title><rect x="622.1" y="1763.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="625.1" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 0.90%)</title><rect x="622.1" y="1747.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="625.1" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (13 samples, 0.90%)</title><rect x="622.1" y="1731.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="625.1" y="1742.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.49%)</title><rect x="632.7" y="1923.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="635.7" y="1934.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.49%)</title><rect x="632.7" y="1907.0" width="5.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="635.7" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (8 samples, 0.55%)</title><rect x="638.5" y="1939.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="641.5" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.28%)</title><rect x="640.9" y="1923.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="643.9" y="1934.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="640.9" y="1907.0" width="3.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="643.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="644.2" y="1923.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.28%)</title><rect x="645.0" y="1987.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="648.0" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.28%)</title><rect x="645.0" y="1971.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="648.0" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.28%)</title><rect x="645.0" y="1955.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.0" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.28%)</title><rect x="645.0" y="1939.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="648.0" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.07%)</title><rect x="647.5" y="1923.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="650.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (216 samples, 14.98%)</title><rect x="648.3" y="1987.0" width="176.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="651.3" y="1998.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (216 samples, 14.98%)</title><rect x="648.3" y="1971.0" width="176.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="651.3" y="1982.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (188 samples, 13.04%)</title><rect x="648.3" y="1955.0" width="153.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="651.3" y="1966.0">java/util/concurren..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (28 samples, 1.94%)</title><rect x="652.4" y="1939.0" width="22.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="655.4" y="1950.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.07%)</title><rect x="675.3" y="1939.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="678.3" y="1950.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="675.3" y="1923.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="678.3" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="675.3" y="1907.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="678.3" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="675.3" y="1891.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="678.3" y="1902.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="675.3" y="1875.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="678.3" y="1886.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="675.3" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="678.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 0.83%)</title><rect x="676.1" y="1939.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.83%)</title><rect x="676.1" y="1923.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="679.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.83%)</title><rect x="676.1" y="1907.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="679.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.83%)</title><rect x="676.1" y="1891.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="679.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (142 samples, 9.85%)</title><rect x="685.9" y="1939.0" width="116.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="688.9" y="1950.0">java/util/conc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (142 samples, 9.85%)</title><rect x="685.9" y="1923.0" width="116.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="688.9" y="1934.0">sun/misc/Unsaf..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="693.3" y="1907.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="696.3" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (3 samples, 0.21%)</title><rect x="694.1" y="1907.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="697.1" y="1918.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.07%)</title><rect x="696.6" y="1907.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="699.6" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.14%)</title><rect x="697.4" y="1907.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="700.4" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (119 samples, 8.25%)</title><rect x="699.0" y="1907.0" width="97.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="702.0" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.35%)</title><rect x="702.3" y="1891.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="705.3" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.07%)</title><rect x="706.4" y="1891.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="709.4" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 1.60%)</title><rect x="707.2" y="1891.0" width="18.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="710.2" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.35%)</title><rect x="717.0" y="1875.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="720.0" y="1886.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="720.3" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="723.3" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="721.1" y="1875.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="724.1" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.28%)</title><rect x="721.9" y="1875.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="724.9" y="1886.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="725.2" y="1875.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="728.2" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.21%)</title><rect x="726.0" y="1891.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="729.0" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.62%)</title><rect x="728.5" y="1891.0" width="7.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="731.5" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (28 samples, 1.94%)</title><rect x="735.8" y="1891.0" width="23.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="738.8" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (33 samples, 2.29%)</title><rect x="758.8" y="1891.0" width="27.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="761.8" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.49%)</title><rect x="785.8" y="1891.0" width="5.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="788.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="791.5" y="1891.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="794.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="792.3" y="1891.0" width="0.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="795.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.14%)</title><rect x="793.1" y="1891.0" width="1.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="796.1" y="1902.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="794.8" y="1891.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="797.8" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="795.6" y="1891.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="798.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.28%)</title><rect x="796.4" y="1907.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="799.4" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="799.7" y="1907.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="802.7" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.14%)</title><rect x="800.5" y="1907.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="803.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (28 samples, 1.94%)</title><rect x="802.1" y="1955.0" width="22.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="805.1" y="1966.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 1.94%)</title><rect x="802.1" y="1939.0" width="22.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="805.1" y="1950.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (28 samples, 1.94%)</title><rect x="802.1" y="1923.0" width="22.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="805.1" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 1.94%)</title><rect x="802.1" y="1907.0" width="22.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="805.1" y="1918.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="825.0" y="2035.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="828.0" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="825.0" y="2019.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="828.0" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="825.0" y="2003.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="828.0" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="825.0" y="1987.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="828.0" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleInitiateApiVersionRequests (1 samples, 0.07%)</title><rect x="825.0" y="1971.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="828.0" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.07%)</title><rect x="825.0" y="1955.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="828.0" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="825.0" y="1939.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="828.0" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="825.0" y="1923.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="828.0" y="1934.0"></text>
</g>
<g>
<title>start_thread (445 samples, 30.86%)</title><rect x="825.9" y="2035.0" width="364.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="828.9" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (445 samples, 30.86%)</title><rect x="825.9" y="2019.0" width="364.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="828.9" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 1.73%)</title><rect x="825.9" y="2003.0" width="20.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="828.9" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (9 samples, 0.62%)</title><rect x="825.9" y="1987.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="828.9" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.62%)</title><rect x="825.9" y="1971.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="828.9" y="1982.0"></text>
</g>
<g>
<title>SpinPause (8 samples, 0.55%)</title><rect x="825.9" y="1955.0" width="6.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="828.9" y="1966.0"></text>
</g>
<g>
<title>os::yield() (1 samples, 0.07%)</title><rect x="832.4" y="1955.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="835.4" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.11%)</title><rect x="833.2" y="1987.0" width="13.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="836.2" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.14%)</title><rect x="833.2" y="1971.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="836.2" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="833.2" y="1955.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="836.2" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="833.2" y="1939.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="836.2" y="1950.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="834.0" y="1955.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="837.0" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.49%)</title><rect x="834.9" y="1971.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="837.9" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="834.9" y="1955.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="837.9" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.07%)</title><rect x="834.9" y="1939.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="837.9" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="834.9" y="1923.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="837.9" y="1934.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="834.9" y="1907.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="837.9" y="1918.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="834.9" y="1891.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="837.9" y="1902.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.07%)</title><rect x="834.9" y="1875.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="837.9" y="1886.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (6 samples, 0.42%)</title><rect x="835.7" y="1955.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="838.7" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.35%)</title><rect x="835.7" y="1939.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="838.7" y="1950.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="838.9" y="1923.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="841.9" y="1934.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="838.9" y="1907.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="841.9" y="1918.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="839.8" y="1939.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="842.8" y="1950.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.07%)</title><rect x="839.8" y="1923.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="842.8" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.49%)</title><rect x="840.6" y="1971.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="843.6" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.49%)</title><rect x="840.6" y="1955.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="843.6" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.42%)</title><rect x="840.6" y="1939.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="843.6" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.42%)</title><rect x="840.6" y="1923.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="843.6" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.42%)</title><rect x="840.6" y="1907.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="843.6" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.42%)</title><rect x="840.6" y="1891.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="843.6" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.35%)</title><rect x="841.4" y="1875.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="844.4" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.07%)</title><rect x="842.2" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="845.2" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.07%)</title><rect x="843.0" y="1859.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="846.0" y="1870.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.07%)</title><rect x="843.0" y="1843.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="846.0" y="1854.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.14%)</title><rect x="843.9" y="1859.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="846.9" y="1870.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.07%)</title><rect x="844.7" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="847.7" y="1854.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="845.5" y="1939.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="848.5" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.07%)</title><rect x="845.5" y="1923.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="848.5" y="1934.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.07%)</title><rect x="845.5" y="1907.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="848.5" y="1918.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.07%)</title><rect x="845.5" y="1891.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="848.5" y="1902.0"></text>
</g>
<g>
<title>JavaThread::run() (417 samples, 28.92%)</title><rect x="846.3" y="2003.0" width="341.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.3" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (417 samples, 28.92%)</title><rect x="846.3" y="1987.0" width="341.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="849.3" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (416 samples, 28.85%)</title><rect x="846.3" y="1971.0" width="340.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="849.3" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (416 samples, 28.85%)</title><rect x="846.3" y="1955.0" width="340.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.3" y="1966.0">CompileBroker::invoke_compiler_on_method(Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (416 samples, 28.85%)</title><rect x="846.3" y="1939.0" width="340.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="849.3" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (416 samples, 28.85%)</title><rect x="846.3" y="1923.0" width="340.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="849.3" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod..</text>
</g>
<g>
<title>Compile::Code_Gen() (156 samples, 10.82%)</title><rect x="846.3" y="1907.0" width="127.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="849.3" y="1918.0">Compile::Code_Ge..</text>
</g>
<g>
<title>Compile::Output() (8 samples, 0.55%)</title><rect x="846.3" y="1891.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="849.3" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (5 samples, 0.35%)</title><rect x="846.3" y="1875.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="849.3" y="1886.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (3 samples, 0.21%)</title><rect x="847.9" y="1859.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="850.9" y="1870.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (3 samples, 0.21%)</title><rect x="847.9" y="1843.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="850.9" y="1854.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.21%)</title><rect x="850.4" y="1875.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="853.4" y="1886.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.07%)</title><rect x="850.4" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="853.4" y="1870.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.07%)</title><rect x="850.4" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="853.4" y="1854.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.07%)</title><rect x="850.4" y="1827.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="853.4" y="1838.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="850.4" y="1811.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="853.4" y="1822.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="851.2" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="854.2" y="1870.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::ValueRecorder(Arena*) (1 samples, 0.07%)</title><rect x="851.2" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="854.2" y="1854.0"></text>
</g>
<g>
<title>Node::size(PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="852.0" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="855.0" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (9 samples, 0.62%)</title><rect x="852.9" y="1891.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="855.9" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.28%)</title><rect x="852.9" y="1875.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="855.9" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (4 samples, 0.28%)</title><rect x="852.9" y="1859.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="855.9" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.28%)</title><rect x="852.9" y="1843.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="855.9" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (4 samples, 0.28%)</title><rect x="856.1" y="1875.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="859.1" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.28%)</title><rect x="856.1" y="1859.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="859.1" y="1870.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.07%)</title><rect x="859.4" y="1875.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="862.4" y="1886.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.07%)</title><rect x="859.4" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="862.4" y="1870.0"></text>
</g>
<g>
<title>Assembler::emit_operand(RegisterImpl*, RegisterImpl*, RegisterImpl*, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.07%)</title><rect x="859.4" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="862.4" y="1854.0"></text>
</g>
<g>
<title>Matcher::match() (18 samples, 1.25%)</title><rect x="860.2" y="1891.0" width="14.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="863.2" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.14%)</title><rect x="860.2" y="1875.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="863.2" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (15 samples, 1.04%)</title><rect x="861.9" y="1875.0" width="12.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="864.9" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (6 samples, 0.42%)</title><rect x="864.3" y="1859.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="867.3" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.14%)</title><rect x="869.2" y="1859.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="872.2" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="870.0" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="873.0" y="1854.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="870.0" y="1827.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="873.0" y="1838.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="870.0" y="1811.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="873.0" y="1822.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.21%)</title><rect x="870.9" y="1859.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="873.9" y="1870.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.07%)</title><rect x="870.9" y="1843.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="873.9" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="871.7" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="874.7" y="1854.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="871.7" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="874.7" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="871.7" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="874.7" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="871.7" y="1795.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="874.7" y="1806.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="871.7" y="1779.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="874.7" y="1790.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="871.7" y="1763.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="874.7" y="1774.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="872.5" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="875.5" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.07%)</title><rect x="872.5" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.5" y="1838.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.07%)</title><rect x="872.5" y="1811.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="875.5" y="1822.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="873.3" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="876.3" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.07%)</title><rect x="874.1" y="1875.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="877.1" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.55%)</title><rect x="875.0" y="1891.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="878.0" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.07%)</title><rect x="875.0" y="1875.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="878.0" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.49%)</title><rect x="875.8" y="1875.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="878.8" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="875.8" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="878.8" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (4 samples, 0.28%)</title><rect x="876.6" y="1859.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="879.6" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="876.6" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="879.6" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.07%)</title><rect x="877.4" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="880.4" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.14%)</title><rect x="878.2" y="1843.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="881.2" y="1854.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.07%)</title><rect x="879.0" y="1827.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="882.0" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="879.0" y="1811.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="882.0" y="1822.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="879.0" y="1795.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="882.0" y="1806.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="879.0" y="1779.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="882.0" y="1790.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="879.9" y="1859.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="882.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (2 samples, 0.14%)</title><rect x="881.5" y="1891.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="884.5" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (111 samples, 7.70%)</title><rect x="883.1" y="1891.0" width="90.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="886.1" y="1902.0">PhaseChait..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="884.0" y="1875.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="887.0" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.21%)</title><rect x="884.8" y="1875.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="887.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.28%)</title><rect x="887.2" y="1875.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="890.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.21%)</title><rect x="888.0" y="1859.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.21%)</title><rect x="888.0" y="1843.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="891.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (10 samples, 0.69%)</title><rect x="890.5" y="1875.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="893.5" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="891.3" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="894.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.21%)</title><rect x="892.1" y="1859.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="895.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (5 samples, 0.35%)</title><rect x="894.6" y="1859.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="897.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="895.4" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="898.4" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.21%)</title><rect x="896.2" y="1843.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="899.2" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (19 samples, 1.32%)</title><rect x="898.7" y="1875.0" width="15.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="901.7" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="910.1" y="1859.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="913.1" y="1870.0"></text>
</g>
<g>
<title>r15_RegPOper::type() const (1 samples, 0.07%)</title><rect x="910.1" y="1843.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="913.1" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (3 samples, 0.21%)</title><rect x="911.0" y="1859.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="914.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (2 samples, 0.14%)</title><rect x="911.0" y="1843.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="914.0" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.07%)</title><rect x="911.8" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="914.8" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="912.6" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.6" y="1854.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.07%)</title><rect x="913.4" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="916.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (22 samples, 1.53%)</title><rect x="914.2" y="1875.0" width="18.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="917.2" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (3 samples, 0.21%)</title><rect x="921.6" y="1859.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="924.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="924.0" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="927.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (9 samples, 0.62%)</title><rect x="924.9" y="1859.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="927.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="930.6" y="1843.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="933.6" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="932.2" y="1875.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="935.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="932.2" y="1859.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="935.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.49%)</title><rect x="933.1" y="1875.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="936.1" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.21%)</title><rect x="935.5" y="1859.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="938.5" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="938.0" y="1859.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="941.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="938.8" y="1875.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="941.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (8 samples, 0.55%)</title><rect x="939.6" y="1875.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.35%)</title><rect x="942.1" y="1859.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="945.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (9 samples, 0.62%)</title><rect x="946.1" y="1875.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="949.1" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="946.1" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="949.1" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (8 samples, 0.55%)</title><rect x="947.0" y="1859.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="950.0" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (8 samples, 0.55%)</title><rect x="947.0" y="1843.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="950.0" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.07%)</title><rect x="947.0" y="1827.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="950.0" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (6 samples, 0.42%)</title><rect x="947.8" y="1827.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="950.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.07%)</title><rect x="952.7" y="1827.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="955.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.14%)</title><rect x="953.5" y="1875.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="956.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (7 samples, 0.49%)</title><rect x="955.1" y="1875.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="958.1" y="1886.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="958.4" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="959.2" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="962.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="960.1" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="963.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.14%)</title><rect x="960.9" y="1875.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="963.9" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.14%)</title><rect x="960.9" y="1859.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="963.9" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (11 samples, 0.76%)</title><rect x="962.5" y="1875.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.5" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.14%)</title><rect x="966.6" y="1859.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="969.6" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.28%)</title><rect x="968.2" y="1859.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="971.2" y="1870.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="971.5" y="1875.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.5" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="972.3" y="1875.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="975.3" y="1886.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="973.1" y="1875.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="976.1" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (244 samples, 16.92%)</title><rect x="974.0" y="1907.0" width="199.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="977.0" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="974.0" y="1891.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="977.0" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="974.0" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="977.0" y="1886.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="974.8" y="1891.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="977.8" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.07%)</title><rect x="974.8" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="977.8" y="1886.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.07%)</title><rect x="974.8" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="977.8" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="974.8" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="977.8" y="1854.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="974.8" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="977.8" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.35%)</title><rect x="975.6" y="1891.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="978.6" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.35%)</title><rect x="975.6" y="1875.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.6" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.07%)</title><rect x="975.6" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.6" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.07%)</title><rect x="975.6" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="978.6" y="1854.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.07%)</title><rect x="975.6" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.6" y="1838.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="975.6" y="1811.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="978.6" y="1822.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="975.6" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="978.6" y="1806.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.07%)</title><rect x="975.6" y="1779.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="978.6" y="1790.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.07%)</title><rect x="975.6" y="1763.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="978.6" y="1774.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="975.6" y="1747.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="978.6" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="975.6" y="1731.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="978.6" y="1742.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="975.6" y="1715.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="978.6" y="1726.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="975.6" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="978.6" y="1710.0"></text>
</g>
<g>
<title>ciSymbol::ciSymbol(Symbol*, vmSymbols::SID) (1 samples, 0.07%)</title><rect x="975.6" y="1683.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="978.6" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.28%)</title><rect x="976.4" y="1859.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="979.4" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="976.4" y="1843.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.4" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.4" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1811.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.4" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1795.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1779.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="979.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1763.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1747.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1731.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.4" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1715.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="979.4" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1699.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.4" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1683.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="979.4" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1667.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="979.4" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1651.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.4" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1635.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.4" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1619.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="979.4" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1603.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.4" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1587.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.4" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1571.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.4" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1555.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.4" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1539.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.4" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1523.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.4" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.4" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1491.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.4" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1475.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="979.4" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1459.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.4" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1443.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="979.4" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1427.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.4" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1411.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.4" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1395.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="979.4" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1379.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.4" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1363.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.4" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1347.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.4" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1331.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.4" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1315.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.4" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1299.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="979.4" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1283.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="979.4" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1267.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="979.4" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1251.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.4" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1235.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.4" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1219.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1203.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="979.4" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1187.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1171.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1155.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="979.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1139.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1123.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="979.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1107.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1091.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="979.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1075.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="979.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1059.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="979.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1043.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1027.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="979.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="1011.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="979.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="995.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="976.4" y="979.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="979.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="977.2" y="1827.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="980.2" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="977.2" y="1811.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.2" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="977.2" y="1795.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="980.2" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="977.2" y="1779.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.2" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="977.2" y="1763.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="980.2" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1747.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1731.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.2" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1715.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.2" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1699.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="980.2" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1683.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="980.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1667.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.2" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1651.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1635.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.2" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1619.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="980.2" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1603.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="980.2" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1587.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.2" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1571.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.2" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1555.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.2" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1539.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.2" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1523.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="980.2" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1507.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.2" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1491.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.2" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1475.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.2" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1459.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.2" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1443.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.2" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1427.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="980.2" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1411.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="980.2" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1395.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.2" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1379.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.2" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1363.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="980.2" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1347.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="980.2" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1331.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1315.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="980.2" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1299.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="980.2" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1283.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="980.2" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1267.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.2" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1251.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.2" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1235.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.2" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1219.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="980.2" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1203.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="980.2" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1187.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.2" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1171.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="980.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1155.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.2" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1139.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1123.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="980.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1107.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1091.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="980.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1075.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1059.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1043.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="980.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1027.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="1011.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="980.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="995.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="979.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="980.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="963.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="947.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="931.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="915.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="980.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="899.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="883.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="867.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="851.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="835.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="819.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="980.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="803.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="787.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="771.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="755.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="739.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="980.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="723.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="707.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="691.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="675.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="980.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="659.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="980.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="643.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="980.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="627.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="980.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="611.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="980.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="595.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="579.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="563.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="547.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="531.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="515.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="499.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="483.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="980.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="467.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="451.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="980.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="435.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="419.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="403.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="387.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="371.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.2" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="355.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="980.2" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="339.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.2" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="323.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.2" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="307.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.2" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="291.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="980.2" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="275.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="980.2" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="259.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.2" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="243.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.2" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="227.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="980.2" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="211.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.2" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="195.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.2" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="179.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.2" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="163.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.2" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="147.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.2" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="131.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.2" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="115.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.2" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="99.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.2" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="977.2" y="83.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="980.2" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.07%)</title><rect x="977.2" y="67.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.2" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1747.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="981.1" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1731.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.1" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1715.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.1" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1699.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.1" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1683.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.1" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1667.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.1" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1651.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.1" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1635.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.1" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1619.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="981.1" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1603.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="981.1" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1587.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="981.1" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1571.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.1" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1555.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.1" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1539.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="981.1" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1523.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.1" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1507.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.1" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1491.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.1" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1475.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.1" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1459.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="981.1" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1443.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.1" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1427.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="981.1" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1411.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="981.1" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1395.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.1" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1379.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="981.1" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1363.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.1" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1347.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.1" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1331.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.1" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1315.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.1" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1299.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="981.1" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1283.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.1" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1267.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.1" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1251.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.1" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1235.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.1" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1219.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.1" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1203.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.1" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1187.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.1" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1171.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1155.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1139.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1123.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1107.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1091.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1075.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="981.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1059.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1043.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1027.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="1011.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="995.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="979.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="963.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="981.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="947.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="931.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="915.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="899.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="883.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="867.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="851.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="835.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="819.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="981.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="803.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="787.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="771.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="755.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="739.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="723.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="707.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="691.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="675.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="659.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="643.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="611.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="595.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="579.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="563.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="547.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="981.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="531.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="515.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="981.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="499.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="483.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="467.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="981.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="451.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="435.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="419.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="403.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="371.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="981.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="355.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="339.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="323.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="981.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="307.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.1" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="291.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.1" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.1" y="275.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.1" y="286.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="978.1" y="259.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.1" y="270.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="978.1" y="243.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.1" y="254.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="978.1" y="227.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="981.1" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.9" y="1763.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.9" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.9" y="1747.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.9" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.9" y="1731.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="981.9" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.9" y="1715.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.9" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="978.9" y="1699.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.9" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="978.9" y="1683.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.9" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.07%)</title><rect x="979.7" y="1891.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="982.7" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="979.7" y="1875.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="982.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (209 samples, 14.49%)</title><rect x="980.5" y="1891.0" width="171.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="983.5" y="1902.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="981.3" y="1875.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="984.3" y="1886.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="981.3" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="984.3" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1875.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.1" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.1" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1843.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.1" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1827.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.1" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1811.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.1" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1795.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="985.1" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1779.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.1" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1763.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.1" y="1774.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1747.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.1" y="1758.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1731.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.1" y="1742.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1715.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.1" y="1726.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1699.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="985.1" y="1710.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1683.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="985.1" y="1694.0"></text>
</g>
<g>
<title>IdealLoopTree::check_safepts(VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="982.1" y="1667.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.1" y="1678.0"></text>
</g>
<g>
<title>CatchNode::Opcode() const (1 samples, 0.07%)</title><rect x="982.1" y="1651.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.1" y="1662.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.0" y="1875.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="986.0" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.0" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="986.0" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.0" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.0" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.0" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="986.0" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.0" y="1811.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="986.0" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="983.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="986.0" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="983.0" y="1779.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="986.0" y="1790.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.07%)</title><rect x="983.0" y="1763.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="986.0" y="1774.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="983.0" y="1747.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="986.0" y="1758.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="983.8" y="1875.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="986.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (11 samples, 0.76%)</title><rect x="984.6" y="1875.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="987.6" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (4 samples, 0.28%)</title><rect x="990.3" y="1859.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="993.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.28%)</title><rect x="993.6" y="1875.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="996.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.14%)</title><rect x="994.4" y="1859.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="997.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="995.2" y="1843.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="998.2" y="1854.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="996.1" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="999.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (177 samples, 12.27%)</title><rect x="996.9" y="1875.0" width="144.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="999.9" y="1886.0">PhaseIdealLoop::bu..</text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.07%)</title><rect x="1005.1" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1008.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (166 samples, 11.51%)</title><rect x="1005.9" y="1859.0" width="135.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1008.9" y="1870.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (8 samples, 0.55%)</title><rect x="1009.2" y="1843.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1012.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (153 samples, 10.61%)</title><rect x="1015.7" y="1843.0" width="125.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1018.7" y="1854.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.14%)</title><rect x="1110.6" y="1827.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.6" y="1838.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.14%)</title><rect x="1110.6" y="1811.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.6" y="1822.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.14%)</title><rect x="1110.6" y="1795.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.6" y="1806.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.07%)</title><rect x="1111.4" y="1779.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.4" y="1790.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1111.4" y="1763.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.4" y="1774.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.07%)</title><rect x="1111.4" y="1747.0" width="0.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1114.4" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (31 samples, 2.15%)</title><rect x="1112.3" y="1827.0" width="25.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.3" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (4 samples, 0.28%)</title><rect x="1137.6" y="1827.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1140.1" y="1811.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.1" y="1822.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1140.9" y="1843.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1143.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.14%)</title><rect x="1141.7" y="1875.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.14%)</title><rect x="1141.7" y="1859.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.28%)</title><rect x="1143.4" y="1875.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.07%)</title><rect x="1145.0" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.07%)</title><rect x="1145.0" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1145.8" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.07%)</title><rect x="1145.8" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.07%)</title><rect x="1145.8" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.35%)</title><rect x="1146.6" y="1875.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.35%)</title><rect x="1146.6" y="1859.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.6" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1146.6" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.6" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1146.6" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.6" y="1838.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1147.4" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.4" y="1854.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.07%)</title><rect x="1147.4" y="1827.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.4" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1148.3" y="1843.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1148.3" y="1827.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1148.3" y="1811.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.3" y="1822.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1149.1" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.1" y="1838.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1149.9" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.9" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1149.9" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.9" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.9" y="1811.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.9" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.9" y="1795.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.9" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.9" y="1779.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.9" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.9" y="1763.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.9" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.9" y="1747.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.9" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.9" y="1731.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.9" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.9" y="1715.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.9" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.9" y="1699.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.9" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1149.9" y="1683.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.9" y="1694.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1149.9" y="1667.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.9" y="1678.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1149.9" y="1651.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.9" y="1662.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1150.7" y="1875.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1153.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (24 samples, 1.66%)</title><rect x="1151.5" y="1891.0" width="19.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.5" y="1902.0"></text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.07%)</title><rect x="1151.5" y="1875.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (23 samples, 1.60%)</title><rect x="1152.4" y="1875.0" width="18.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.4" y="1886.0"></text>
</g>
<g>
<title>CallDynamicJavaNode::Opcode() const (1 samples, 0.07%)</title><rect x="1152.4" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.4" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1153.2" y="1859.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.2" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (2 samples, 0.14%)</title><rect x="1153.2" y="1843.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.2" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.14%)</title><rect x="1153.2" y="1827.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.2" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="1153.2" y="1811.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.2" y="1822.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1154.8" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.8" y="1870.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1154.8" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.8" y="1854.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1154.8" y="1827.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.8" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1154.8" y="1811.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.14%)</title><rect x="1155.6" y="1859.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (8 samples, 0.55%)</title><rect x="1157.3" y="1859.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.3" y="1870.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1160.5" y="1843.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.5" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.14%)</title><rect x="1161.4" y="1843.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1163.0" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.0" y="1854.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.07%)</title><rect x="1163.0" y="1827.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.0" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1163.8" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.8" y="1870.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1163.8" y="1843.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.8" y="1854.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1163.8" y="1827.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.8" y="1838.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.07%)</title><rect x="1163.8" y="1811.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.8" y="1822.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (5 samples, 0.35%)</title><rect x="1164.6" y="1859.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1164.6" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1164.6" y="1827.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.6" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1164.6" y="1811.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.6" y="1822.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.14%)</title><rect x="1165.5" y="1843.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.5" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.14%)</title><rect x="1167.1" y="1843.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.1" y="1854.0"></text>
</g>
<g>
<title>SafePointNode::Opcode() const (1 samples, 0.07%)</title><rect x="1168.7" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.7" y="1870.0"></text>
</g>
<g>
<title>StoreCMNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1169.5" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.5" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1169.5" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.5" y="1854.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1169.5" y="1827.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.5" y="1838.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1170.4" y="1859.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.4" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1170.4" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.4" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.4" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1811.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.4" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1795.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.4" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1779.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.4" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1763.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.4" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1747.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.4" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1731.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.4" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1715.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.4" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1699.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.4" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1683.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.4" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1667.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.4" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1651.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.4" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1635.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.4" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1619.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.4" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1603.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.4" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1587.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.4" y="1598.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.4" y="1571.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.4" y="1582.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1170.4" y="1555.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.4" y="1566.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1171.2" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.2" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1171.2" y="1875.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.2" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.2" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.2" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.07%)</title><rect x="1171.2" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.2" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1172.0" y="1891.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1172.0" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1172.0" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.0" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1172.0" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.0" y="1854.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1172.0" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.0" y="1838.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.07%)</title><rect x="1172.0" y="1811.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.0" y="1822.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1172.8" y="1891.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.8" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.97%)</title><rect x="1173.6" y="1907.0" width="11.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.6" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.97%)</title><rect x="1173.6" y="1891.0" width="11.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.6" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.90%)</title><rect x="1173.6" y="1875.0" width="10.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.6" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.90%)</title><rect x="1173.6" y="1859.0" width="10.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 0.90%)</title><rect x="1173.6" y="1843.0" width="10.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.6" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.90%)</title><rect x="1173.6" y="1827.0" width="10.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1173.6" y="1811.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.6" y="1822.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1173.6" y="1795.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.6" y="1806.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1173.6" y="1779.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.6" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1173.6" y="1763.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.6" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1173.6" y="1747.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.6" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.6" y="1731.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.6" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1173.6" y="1715.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.6" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1173.6" y="1699.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.6" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_ldc(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1173.6" y="1683.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_constant() (1 samples, 0.07%)</title><rect x="1173.6" y="1667.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.6" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index(constantPoolHandle, int, int, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1173.6" y="1651.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.6" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index_impl(constantPoolHandle, int, int, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1173.6" y="1635.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.6" y="1646.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.07%)</title><rect x="1173.6" y="1619.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.55%)</title><rect x="1174.5" y="1811.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.55%)</title><rect x="1174.5" y="1795.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.5" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.55%)</title><rect x="1174.5" y="1779.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.55%)</title><rect x="1174.5" y="1763.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.55%)</title><rect x="1174.5" y="1747.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.55%)</title><rect x="1174.5" y="1731.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.35%)</title><rect x="1174.5" y="1715.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.5" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.35%)</title><rect x="1174.5" y="1699.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.5" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.35%)</title><rect x="1174.5" y="1683.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.5" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.35%)</title><rect x="1174.5" y="1667.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.35%)</title><rect x="1174.5" y="1651.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.35%)</title><rect x="1174.5" y="1635.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.5" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.35%)</title><rect x="1174.5" y="1619.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.35%)</title><rect x="1174.5" y="1603.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.35%)</title><rect x="1174.5" y="1587.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.35%)</title><rect x="1174.5" y="1571.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.35%)</title><rect x="1174.5" y="1555.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1174.5" y="1539.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.5" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1174.5" y="1523.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1174.5" y="1507.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1174.5" y="1491.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1174.5" y="1475.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1174.5" y="1459.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1174.5" y="1443.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.5" y="1427.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.5" y="1411.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.5" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.5" y="1395.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.5" y="1379.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.5" y="1363.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.5" y="1347.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.5" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.5" y="1331.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.5" y="1315.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.5" y="1299.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.5" y="1283.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.5" y="1267.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1174.5" y="1251.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1174.5" y="1235.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1174.5" y="1219.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1174.5" y="1203.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1174.5" y="1187.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1174.5" y="1171.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1174.5" y="1155.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1174.5" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="1150.0"></text>
</g>
<g>
<title>Parse::push_constant(ciConstant, bool, bool, Type const*) (1 samples, 0.07%)</title><rect x="1174.5" y="1123.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.5" y="1134.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="1174.5" y="1107.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.5" y="1118.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.07%)</title><rect x="1174.5" y="1091.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.3" y="1427.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.3" y="1411.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.3" y="1395.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.3" y="1379.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.3" y="1363.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.3" y="1347.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1175.3" y="1331.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.3" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.3" y="1315.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.3" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.3" y="1299.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.3" y="1283.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.3" y="1267.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.3" y="1251.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1175.3" y="1235.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.3" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1175.3" y="1219.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.3" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1175.3" y="1203.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1175.3" y="1187.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1175.3" y="1171.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1175.3" y="1155.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1175.3" y="1139.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.3" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1175.3" y="1123.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1175.3" y="1107.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1175.3" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1175.3" y="1075.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1175.3" y="1059.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1175.3" y="1043.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.3" y="1054.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.07%)</title><rect x="1175.3" y="1027.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.3" y="1038.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1175.3" y="1011.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="1022.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1175.3" y="995.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="1006.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1175.3" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="990.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1175.3" y="963.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1176.1" y="1139.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1176.1" y="1123.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.1" y="1134.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1176.1" y="1107.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="1118.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1176.1" y="1091.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="1102.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1176.1" y="1075.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.1" y="1086.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1176.9" y="1427.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="1438.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1176.9" y="1411.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="1422.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1176.9" y="1395.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="1406.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1176.9" y="1379.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.9" y="1390.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1176.9" y="1363.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1177.7" y="1539.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.7" y="1550.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1177.7" y="1523.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="1534.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1177.7" y="1507.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="1518.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1178.5" y="1715.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1178.5" y="1699.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1178.5" y="1683.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1178.5" y="1667.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.5" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1178.5" y="1651.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.5" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1178.5" y="1635.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1178.5" y="1619.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.5" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1178.5" y="1603.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1178.5" y="1587.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1178.5" y="1571.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1178.5" y="1555.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1178.5" y="1539.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.5" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1178.5" y="1523.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.5" y="1534.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.5" y="1507.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.5" y="1518.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1178.5" y="1491.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="1502.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1178.5" y="1475.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.5" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1178.5" y="1459.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.5" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1178.5" y="1443.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.5" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1178.5" y="1427.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.5" y="1438.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1178.5" y="1411.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="1422.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1178.5" y="1395.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="1406.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.07%)</title><rect x="1178.5" y="1379.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="1390.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.4" y="1507.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.4" y="1491.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.4" y="1475.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.4" y="1459.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.4" y="1443.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.4" y="1427.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.4" y="1411.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.4" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.4" y="1395.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.4" y="1379.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1179.4" y="1363.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1179.4" y="1347.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1179.4" y="1331.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1179.4" y="1315.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1179.4" y="1299.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1179.4" y="1283.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.4" y="1267.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.4" y="1251.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.4" y="1235.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1219.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.4" y="1203.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.4" y="1187.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.4" y="1171.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.4" y="1155.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.4" y="1139.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.4" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.4" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.4" y="1091.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.4" y="1075.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.4" y="1059.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.4" y="1043.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1027.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.4" y="1011.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.4" y="995.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.4" y="979.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.4" y="963.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.4" y="947.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="931.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.4" y="915.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.4" y="899.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.4" y="883.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.4" y="867.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.4" y="851.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="862.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="835.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="846.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.07%)</title><rect x="1179.4" y="819.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="830.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1179.4" y="803.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="814.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1179.4" y="787.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="798.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1179.4" y="771.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="782.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.07%)</title><rect x="1179.4" y="755.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="766.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.07%)</title><rect x="1179.4" y="739.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="750.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1179.4" y="723.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="734.0"></text>
</g>
<g>
<title>TypeNarrowPtr::singleton() const (1 samples, 0.07%)</title><rect x="1179.4" y="707.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="718.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1180.2" y="1267.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="1278.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1181.0" y="1811.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.28%)</title><rect x="1181.0" y="1795.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.28%)</title><rect x="1181.0" y="1779.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.28%)</title><rect x="1181.0" y="1763.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.28%)</title><rect x="1181.0" y="1747.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.28%)</title><rect x="1181.0" y="1731.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1181.0" y="1715.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1181.0" y="1699.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1181.0" y="1683.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1181.0" y="1667.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1181.0" y="1651.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1181.0" y="1635.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1181.0" y="1619.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="1630.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1181.0" y="1603.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="1614.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1181.0" y="1587.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="1598.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1181.0" y="1571.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.0" y="1582.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1181.0" y="1555.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="1566.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1181.0" y="1539.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="1550.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1181.0" y="1523.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.0" y="1534.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1181.0" y="1507.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.0" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1181.0" y="1491.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.0" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1181.0" y="1475.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="1486.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1181.0" y="1459.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="1470.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1181.0" y="1443.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.0" y="1454.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1181.0" y="1427.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="1438.0"></text>
</g>
<g>
<title>FieldType::basic_type(Symbol*) (1 samples, 0.07%)</title><rect x="1181.0" y="1411.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.8" y="1603.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.8" y="1587.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.8" y="1571.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.8" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.8" y="1555.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.8" y="1539.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.8" y="1523.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.8" y="1507.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.8" y="1491.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.8" y="1475.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.8" y="1459.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.8" y="1443.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.8" y="1427.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.8" y="1411.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.8" y="1395.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.8" y="1379.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.8" y="1363.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.8" y="1347.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.8" y="1331.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.8" y="1315.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.8" y="1299.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.8" y="1283.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.8" y="1267.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.8" y="1251.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.8" y="1235.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="1246.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1181.8" y="1219.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="1230.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1181.8" y="1203.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1182.6" y="1235.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.6" y="1246.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1182.6" y="1219.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.6" y="1230.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1182.6" y="1203.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="1214.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.07%)</title><rect x="1182.6" y="1187.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="1198.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1182.6" y="1171.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="1182.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.5" y="1699.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.5" y="1710.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.5" y="1683.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.5" y="1694.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.5" y="1667.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.5" y="1678.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.5" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.5" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.5" y="1635.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.5" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.5" y="1619.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.5" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.5" y="1603.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.5" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.5" y="1587.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.5" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.5" y="1571.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.5" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.5" y="1539.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.5" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.5" y="1523.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.5" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.5" y="1507.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.5" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.5" y="1491.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.5" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.5" y="1475.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.5" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.5" y="1459.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.5" y="1443.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.5" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.5" y="1427.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.5" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.5" y="1411.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.5" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.5" y="1395.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.5" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.5" y="1379.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.5" y="1363.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.5" y="1347.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.5" y="1331.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.5" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.5" y="1315.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.5" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.5" y="1299.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.5" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.5" y="1283.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.5" y="1267.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.5" y="1251.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.5" y="1235.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.5" y="1246.0"></text>
</g>
<g>
<title>GraphKit::load_array_length(Node*) (1 samples, 0.07%)</title><rect x="1183.5" y="1219.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.5" y="1230.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1183.5" y="1203.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.5" y="1214.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1183.5" y="1187.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.5" y="1198.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1183.5" y="1171.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.5" y="1182.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1183.5" y="1155.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="1166.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1183.5" y="1139.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1184.3" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="1886.0"></text>
</g>
<g>
<title>GraphKit::use_exception_state(SafePointNode*) (1 samples, 0.07%)</title><rect x="1184.3" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.3" y="1870.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1184.3" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.3" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1184.3" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="1838.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1185.1" y="1907.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.1" y="1918.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1185.9" y="1907.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.9" y="1918.0"></text>
</g>
<g>
<title>CodeBuffer::free_blob() (1 samples, 0.07%)</title><rect x="1185.9" y="1891.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.9" y="1902.0"></text>
</g>
<g>
<title>BufferBlob::free(BufferBlob*) (1 samples, 0.07%)</title><rect x="1185.9" y="1875.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.9" y="1886.0"></text>
</g>
<g>
<title>CodeHeap::deallocate(void*) (1 samples, 0.07%)</title><rect x="1185.9" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="1870.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1186.7" y="1971.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1186.7" y="1955.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.7" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1186.7" y="1939.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1186.7" y="1923.0" width="0.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1189.7" y="1934.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.07%)</title><rect x="1186.7" y="1907.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1186.7" y="1891.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.21%)</title><rect x="1187.5" y="2003.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.5" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.21%)</title><rect x="1187.5" y="1987.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.5" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1187.5" y="1971.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.5" y="1982.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.07%)</title><rect x="1187.5" y="1955.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.5" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.07%)</title><rect x="1187.5" y="1939.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.5" y="1950.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1187.5" y="1923.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.5" y="1934.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1187.5" y="1907.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.5" y="1918.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="1187.5" y="1891.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.5" y="1902.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.07%)</title><rect x="1187.5" y="1875.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.5" y="1886.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="1187.5" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.5" y="1870.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="1187.5" y="1843.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.5" y="1854.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.14%)</title><rect x="1188.4" y="1971.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.4" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.14%)</title><rect x="1188.4" y="1955.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.4" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.14%)</title><rect x="1188.4" y="1939.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.4" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.14%)</title><rect x="1188.4" y="1923.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.4" y="1934.0"></text>
</g>
<g>
<title>CardTableRS::prepare_for_younger_refs_iterate(bool) (1 samples, 0.07%)</title><rect x="1188.4" y="1907.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.4" y="1918.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1189.2" y="1907.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.2" y="1918.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.07%)</title><rect x="1189.2" y="1891.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.2" y="1902.0"></text>
</g>
</g>
</svg>
