<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (384 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (31 samples, 8.07%)</title><rect x="10.0" y="931.0" width="95.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.26%)</title><rect x="10.0" y="915.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.26%)</title><rect x="10.0" y="899.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.commitReadyOffsets (1 samples, 0.26%)</title><rect x="10.0" y="883.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.26%)</title><rect x="10.0" y="867.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.26%)</title><rect x="10.0" y="851.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (30 samples, 7.81%)</title><rect x="13.1" y="915.0" width="92.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.1" y="926.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.26%)</title><rect x="13.1" y="899.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.26%)</title><rect x="13.1" y="883.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.1" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.26%)</title><rect x="13.1" y="867.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.1" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.26%)</title><rect x="13.1" y="851.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.1" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.26%)</title><rect x="13.1" y="835.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.26%)</title><rect x="13.1" y="819.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.26%)</title><rect x="13.1" y="803.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.26%)</title><rect x="13.1" y="787.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.26%)</title><rect x="13.1" y="771.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.1" y="782.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.26%)</title><rect x="13.1" y="755.0" width="3.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="16.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.26%)</title><rect x="16.1" y="899.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.26%)</title><rect x="16.1" y="883.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.26%)</title><rect x="16.1" y="867.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$264/1649181109.accept (1 samples, 0.26%)</title><rect x="16.1" y="851.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.26%)</title><rect x="16.1" y="835.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (12 samples, 3.12%)</title><rect x="19.2" y="899.0" width="36.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.2" y="910.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$263/1356205958.accept (11 samples, 2.86%)</title><rect x="19.2" y="883.0" width="33.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.2" y="894.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (11 samples, 2.86%)</title><rect x="19.2" y="867.0" width="33.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.2" y="878.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (6 samples, 1.56%)</title><rect x="19.2" y="851.0" width="18.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (6 samples, 1.56%)</title><rect x="19.2" y="835.0" width="18.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (6 samples, 1.56%)</title><rect x="19.2" y="819.0" width="18.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (6 samples, 1.56%)</title><rect x="19.2" y="803.0" width="18.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 1.56%)</title><rect x="19.2" y="787.0" width="18.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (6 samples, 1.56%)</title><rect x="19.2" y="771.0" width="18.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.26%)</title><rect x="25.4" y="755.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.26%)</title><rect x="25.4" y="739.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.26%)</title><rect x="25.4" y="723.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.4" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.78%)</title><rect x="28.4" y="755.0" width="9.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="31.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (5 samples, 1.30%)</title><rect x="37.7" y="851.0" width="15.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.7" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.04%)</title><rect x="37.7" y="835.0" width="12.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.7" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.04%)</title><rect x="37.7" y="819.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.7" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.78%)</title><rect x="37.7" y="803.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.7" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.78%)</title><rect x="37.7" y="787.0" width="9.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.7" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.78%)</title><rect x="37.7" y="771.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.7" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.26%)</title><rect x="46.9" y="803.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.9" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="49.9" y="835.0" width="3.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="52.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.26%)</title><rect x="53.0" y="883.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.26%)</title><rect x="53.0" y="867.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.26%)</title><rect x="53.0" y="851.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.26%)</title><rect x="53.0" y="835.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.26%)</title><rect x="56.1" y="899.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 3.91%)</title><rect x="59.2" y="899.0" width="46.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.2" y="910.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 3.91%)</title><rect x="59.2" y="883.0" width="46.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.2" y="894.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (12 samples, 3.12%)</title><rect x="59.2" y="867.0" width="36.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.2" y="878.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.26%)</title><rect x="59.2" y="851.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="62.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.26%)</title><rect x="59.2" y="835.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.2" y="846.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.26%)</title><rect x="59.2" y="819.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="62.2" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.26%)</title><rect x="59.2" y="803.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="62.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.04%)</title><rect x="62.2" y="851.0" width="12.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="65.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.04%)</title><rect x="62.2" y="835.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="65.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.26%)</title><rect x="62.2" y="819.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.78%)</title><rect x="65.3" y="819.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.26%)</title><rect x="65.3" y="803.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.26%)</title><rect x="65.3" y="787.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.26%)</title><rect x="65.3" y="771.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.26%)</title><rect x="65.3" y="755.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.52%)</title><rect x="68.4" y="803.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.52%)</title><rect x="68.4" y="787.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="71.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.26%)</title><rect x="68.4" y="771.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.26%)</title><rect x="68.4" y="755.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.26%)</title><rect x="68.4" y="739.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.26%)</title><rect x="68.4" y="723.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.4" y="734.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.26%)</title><rect x="68.4" y="707.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.4" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.26%)</title><rect x="68.4" y="691.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.4" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.26%)</title><rect x="68.4" y="675.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.4" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.26%)</title><rect x="68.4" y="659.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.4" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.26%)</title><rect x="68.4" y="643.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.4" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.26%)</title><rect x="68.4" y="627.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="71.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.26%)</title><rect x="71.5" y="771.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.26%)</title><rect x="71.5" y="755.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.26%)</title><rect x="71.5" y="739.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.5" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeAccess (1 samples, 0.26%)</title><rect x="71.5" y="723.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 1.82%)</title><rect x="74.5" y="851.0" width="21.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.5" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 1.56%)</title><rect x="74.5" y="835.0" width="18.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.30%)</title><rect x="74.5" y="819.0" width="15.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.30%)</title><rect x="74.5" y="803.0" width="15.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="77.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.52%)</title><rect x="74.5" y="787.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.26%)</title><rect x="74.5" y="771.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.26%)</title><rect x="74.5" y="755.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.26%)</title><rect x="74.5" y="739.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="77.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.26%)</title><rect x="74.5" y="723.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="77.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.26%)</title><rect x="74.5" y="707.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.26%)</title><rect x="74.5" y="691.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.26%)</title><rect x="74.5" y="675.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="77.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.26%)</title><rect x="77.6" y="771.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.26%)</title><rect x="77.6" y="755.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 0.78%)</title><rect x="80.7" y="787.0" width="9.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 0.78%)</title><rect x="80.7" y="771.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.52%)</title><rect x="80.7" y="755.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.7" y="766.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.52%)</title><rect x="80.7" y="739.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.26%)</title><rect x="86.8" y="755.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.8" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.26%)</title><rect x="86.8" y="739.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.26%)</title><rect x="89.9" y="819.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.26%)</title><rect x="89.9" y="803.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="89.9" y="787.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="89.9" y="771.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="89.9" y="755.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.26%)</title><rect x="89.9" y="739.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.9" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.26%)</title><rect x="89.9" y="723.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="92.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.26%)</title><rect x="93.0" y="835.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.26%)</title><rect x="93.0" y="819.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="96.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.26%)</title><rect x="93.0" y="803.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.52%)</title><rect x="96.0" y="867.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.52%)</title><rect x="96.0" y="851.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.26%)</title><rect x="96.0" y="835.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.26%)</title><rect x="96.0" y="819.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.26%)</title><rect x="99.1" y="835.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.1" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.26%)</title><rect x="99.1" y="819.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.26%)</title><rect x="99.1" y="803.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.26%)</title><rect x="99.1" y="787.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="102.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.26%)</title><rect x="99.1" y="771.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.26%)</title><rect x="99.1" y="755.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.26%)</title><rect x="99.1" y="739.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="102.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.26%)</title><rect x="99.1" y="723.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="102.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.26%)</title><rect x="99.1" y="707.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.1" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method_ic_miss(JavaThread*) (1 samples, 0.26%)</title><rect x="99.1" y="691.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="102.1" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::handle_ic_miss_helper(JavaThread*, Thread*) (1 samples, 0.26%)</title><rect x="99.1" y="675.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="102.1" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.26%)</title><rect x="99.1" y="659.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="102.1" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.26%)</title><rect x="99.1" y="643.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="102.1" y="654.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.26%)</title><rect x="99.1" y="627.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="102.1" y="638.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.26%)</title><rect x="99.1" y="611.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="102.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.26%)</title><rect x="102.2" y="867.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.26%)</title><rect x="102.2" y="851.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.26%)</title><rect x="102.2" y="835.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.26%)</title><rect x="102.2" y="819.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="105.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.26%)</title><rect x="102.2" y="803.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="105.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.26%)</title><rect x="102.2" y="787.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="105.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.26%)</title><rect x="102.2" y="771.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="105.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.26%)</title><rect x="102.2" y="755.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.2" y="766.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.26%)</title><rect x="102.2" y="739.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="105.2" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.26%)</title><rect x="102.2" y="723.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="105.2" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.26%)</title><rect x="102.2" y="707.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="105.2" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.26%)</title><rect x="102.2" y="691.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="105.2" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.26%)</title><rect x="102.2" y="675.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.2" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.run (254 samples, 66.15%)</title><rect x="105.3" y="931.0" width="780.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="108.3" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (254 samples, 66.15%)</title><rect x="105.3" y="915.0" width="780.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="108.3" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (254 samples, 66.15%)</title><rect x="105.3" y="899.0" width="780.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="108.3" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1819501977.run (235 samples, 61.20%)</title><rect x="108.3" y="883.0" width="722.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.3" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/1819501977.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (235 samples, 61.20%)</title><rect x="108.3" y="867.0" width="722.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="111.3" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (235 samples, 61.20%)</title><rect x="108.3" y="851.0" width="722.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="111.3" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (232 samples, 60.42%)</title><rect x="108.3" y="835.0" width="713.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="111.3" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.52%)</title><rect x="120.6" y="819.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="123.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (49 samples, 12.76%)</title><rect x="126.8" y="819.0" width="150.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="129.8" y="830.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (49 samples, 12.76%)</title><rect x="126.8" y="803.0" width="150.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="129.8" y="814.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (49 samples, 12.76%)</title><rect x="126.8" y="787.0" width="150.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="129.8" y="798.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (49 samples, 12.76%)</title><rect x="126.8" y="771.0" width="150.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="129.8" y="782.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (49 samples, 12.76%)</title><rect x="126.8" y="755.0" width="150.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="129.8" y="766.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (49 samples, 12.76%)</title><rect x="126.8" y="739.0" width="150.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="129.8" y="750.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (17 samples, 4.43%)</title><rect x="126.8" y="723.0" width="52.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="129.8" y="734.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.52%)</title><rect x="139.1" y="707.0" width="6.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="142.1" y="718.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.52%)</title><rect x="139.1" y="691.0" width="6.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="142.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.78%)</title><rect x="145.2" y="707.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.78%)</title><rect x="145.2" y="691.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.78%)</title><rect x="145.2" y="675.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.78%)</title><rect x="145.2" y="659.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="148.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.78%)</title><rect x="145.2" y="643.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.2" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.78%)</title><rect x="145.2" y="627.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.2" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.78%)</title><rect x="145.2" y="611.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 2.08%)</title><rect x="154.4" y="707.0" width="24.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.4" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.52%)</title><rect x="172.9" y="691.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.26%)</title><rect x="172.9" y="675.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.26%)</title><rect x="172.9" y="659.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="175.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.26%)</title><rect x="175.9" y="675.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.26%)</title><rect x="175.9" y="659.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.26%)</title><rect x="175.9" y="643.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="178.9" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="175.9" y="627.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="178.9" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="175.9" y="611.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="178.9" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="175.9" y="595.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="178.9" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.26%)</title><rect x="175.9" y="579.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="178.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (29 samples, 7.55%)</title><rect x="179.0" y="723.0" width="89.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="182.0" y="734.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.26%)</title><rect x="182.1" y="707.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 1.04%)</title><rect x="185.2" y="707.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.78%)</title><rect x="188.2" y="691.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="191.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.04%)</title><rect x="197.4" y="707.0" width="12.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.78%)</title><rect x="200.5" y="691.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.52%)</title><rect x="200.5" y="675.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.26%)</title><rect x="203.6" y="659.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.6" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="203.6" y="643.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="206.6" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="203.6" y="627.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="206.6" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="203.6" y="611.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="206.6" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="203.6" y="595.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="206.6" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.26%)</title><rect x="203.6" y="579.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="206.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.26%)</title><rect x="206.7" y="675.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.26%)</title><rect x="206.7" y="659.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.26%)</title><rect x="209.7" y="707.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.26%)</title><rect x="209.7" y="691.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (17 samples, 4.43%)</title><rect x="212.8" y="707.0" width="52.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.8" y="718.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.30%)</title><rect x="212.8" y="691.0" width="15.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.26%)</title><rect x="222.0" y="675.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.26%)</title><rect x="222.0" y="659.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.26%)</title><rect x="222.0" y="643.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.26%)</title><rect x="225.1" y="675.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (12 samples, 3.12%)</title><rect x="228.2" y="691.0" width="36.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.2" y="702.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (12 samples, 3.12%)</title><rect x="228.2" y="675.0" width="36.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.2" y="686.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (12 samples, 3.12%)</title><rect x="228.2" y="659.0" width="36.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.2" y="670.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.52%)</title><rect x="237.4" y="643.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.26%)</title><rect x="237.4" y="627.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.26%)</title><rect x="237.4" y="611.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.26%)</title><rect x="237.4" y="595.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.26%)</title><rect x="237.4" y="579.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.26%)</title><rect x="240.5" y="627.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.04%)</title><rect x="243.5" y="643.0" width="12.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 1.04%)</title><rect x="243.5" y="627.0" width="12.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 1.04%)</title><rect x="243.5" y="611.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 1.04%)</title><rect x="243.5" y="595.0" width="12.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.5" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 1.04%)</title><rect x="243.5" y="579.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.52%)</title><rect x="255.8" y="643.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.52%)</title><rect x="255.8" y="627.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.52%)</title><rect x="255.8" y="611.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.52%)</title><rect x="255.8" y="595.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.8" y="606.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.52%)</title><rect x="255.8" y="579.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.8" y="590.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.52%)</title><rect x="255.8" y="563.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.8" y="574.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (2 samples, 0.52%)</title><rect x="255.8" y="547.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.26%)</title><rect x="262.0" y="643.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="262.0" y="627.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="262.0" y="611.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.26%)</title><rect x="265.1" y="707.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="268.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.78%)</title><rect x="268.1" y="723.0" width="9.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="271.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.78%)</title><rect x="268.1" y="707.0" width="9.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.78%)</title><rect x="268.1" y="691.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="271.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.78%)</title><rect x="268.1" y="675.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="271.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.78%)</title><rect x="268.1" y="659.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (164 samples, 42.71%)</title><rect x="277.3" y="819.0" width="504.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.3" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (28 samples, 7.29%)</title><rect x="308.1" y="803.0" width="86.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="311.1" y="814.0">com/lineco..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (28 samples, 7.29%)</title><rect x="308.1" y="787.0" width="86.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="311.1" y="798.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (22 samples, 5.73%)</title><rect x="326.5" y="771.0" width="67.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="329.5" y="782.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 1.56%)</title><rect x="344.9" y="755.0" width="18.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="347.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 1.56%)</title><rect x="344.9" y="739.0" width="18.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="347.9" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 1.56%)</title><rect x="344.9" y="723.0" width="18.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="347.9" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 1.56%)</title><rect x="344.9" y="707.0" width="18.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="347.9" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 1.56%)</title><rect x="344.9" y="691.0" width="18.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="347.9" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 2.60%)</title><rect x="363.4" y="755.0" width="30.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="366.4" y="766.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 2.34%)</title><rect x="366.5" y="739.0" width="27.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="369.5" y="750.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.26%)</title><rect x="369.5" y="723.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.5" y="734.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.26%)</title><rect x="369.5" y="707.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 1.82%)</title><rect x="372.6" y="723.0" width="21.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="375.6" y="734.0">j..</text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (7 samples, 1.82%)</title><rect x="372.6" y="707.0" width="21.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="375.6" y="718.0">o..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.26%)</title><rect x="394.1" y="803.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.26%)</title><rect x="394.1" y="787.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.1" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.26%)</title><rect x="394.1" y="771.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="397.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (28 samples, 7.29%)</title><rect x="397.2" y="803.0" width="86.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="400.2" y="814.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (28 samples, 7.29%)</title><rect x="397.2" y="787.0" width="86.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="400.2" y="798.0">com/lineco..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="397.2" y="771.0" width="3.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="400.2" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="397.2" y="755.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="400.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (13 samples, 3.39%)</title><rect x="400.3" y="771.0" width="39.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.3" y="782.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 2.60%)</title><rect x="406.4" y="755.0" width="30.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="409.4" y="766.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 2.60%)</title><rect x="406.4" y="739.0" width="30.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.4" y="750.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 1.82%)</title><rect x="409.5" y="723.0" width="21.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="412.5" y="734.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 1.82%)</title><rect x="409.5" y="707.0" width="21.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.5" y="718.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 1.82%)</title><rect x="409.5" y="691.0" width="21.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.5" y="702.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.04%)</title><rect x="418.7" y="675.0" width="12.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="421.7" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.26%)</title><rect x="418.7" y="659.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="421.7" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.26%)</title><rect x="418.7" y="643.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="421.7" y="654.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.26%)</title><rect x="418.7" y="627.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="421.7" y="638.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.26%)</title><rect x="418.7" y="611.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="421.7" y="622.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.26%)</title><rect x="418.7" y="595.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="421.7" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.78%)</title><rect x="421.8" y="659.0" width="9.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="424.8" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="421.8" y="643.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="424.8" y="654.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.26%)</title><rect x="421.8" y="627.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="424.8" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.26%)</title><rect x="424.8" y="643.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="427.8" y="654.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.26%)</title><rect x="427.9" y="643.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="430.9" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.26%)</title><rect x="431.0" y="723.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="434.0" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="434.1" y="723.0" width="3.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="437.1" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="437.1" y="755.0" width="3.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="440.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.78%)</title><rect x="440.2" y="771.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.78%)</title><rect x="440.2" y="755.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.78%)</title><rect x="440.2" y="739.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="443.2" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 2.86%)</title><rect x="449.4" y="771.0" width="33.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="452.4" y="782.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 2.86%)</title><rect x="449.4" y="755.0" width="33.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="452.4" y="766.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.26%)</title><rect x="449.4" y="739.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="452.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.26%)</title><rect x="449.4" y="723.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.4" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.26%)</title><rect x="449.4" y="707.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="452.4" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.26%)</title><rect x="449.4" y="691.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="452.4" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.26%)</title><rect x="449.4" y="675.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="452.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.52%)</title><rect x="452.5" y="739.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="455.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.52%)</title><rect x="452.5" y="723.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.52%)</title><rect x="452.5" y="707.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="455.5" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.52%)</title><rect x="452.5" y="691.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="455.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.52%)</title><rect x="452.5" y="675.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="455.5" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 2.08%)</title><rect x="458.6" y="739.0" width="24.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="461.6" y="750.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 1.82%)</title><rect x="461.7" y="723.0" width="21.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="464.7" y="734.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.30%)</title><rect x="467.9" y="707.0" width="15.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="470.9" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.78%)</title><rect x="467.9" y="691.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="470.9" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="474.0" y="675.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="477.0" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="474.0" y="659.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="477.0" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="474.0" y="643.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="477.0" y="654.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.52%)</title><rect x="477.1" y="691.0" width="6.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="480.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (92 samples, 23.96%)</title><rect x="483.2" y="803.0" width="282.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="486.2" y="814.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (90 samples, 23.44%)</title><rect x="489.4" y="787.0" width="276.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="492.4" y="798.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1014288372.process (72 samples, 18.75%)</title><rect x="495.5" y="771.0" width="221.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="498.5" y="782.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (72 samples, 18.75%)</title><rect x="495.5" y="755.0" width="221.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.5" y="766.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (71 samples, 18.49%)</title><rect x="498.6" y="739.0" width="218.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="501.6" y="750.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.52%)</title><rect x="501.7" y="723.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="504.7" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.52%)</title><rect x="501.7" y="707.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="504.7" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.52%)</title><rect x="501.7" y="691.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="504.7" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.52%)</title><rect x="501.7" y="675.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="504.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.52%)</title><rect x="501.7" y="659.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="504.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (68 samples, 17.71%)</title><rect x="507.8" y="723.0" width="209.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="510.8" y="734.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task.getProcessLatency (1 samples, 0.26%)</title><rect x="507.8" y="707.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="510.8" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (67 samples, 17.45%)</title><rect x="510.9" y="707.0" width="205.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="513.9" y="718.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (55 samples, 14.32%)</title><rect x="538.5" y="691.0" width="169.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="541.5" y="702.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.30%)</title><rect x="550.8" y="675.0" width="15.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="553.8" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.78%)</title><rect x="566.2" y="675.0" width="9.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="569.2" y="686.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.52%)</title><rect x="569.3" y="659.0" width="6.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="572.3" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.78%)</title><rect x="575.4" y="675.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="578.4" y="686.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (40 samples, 10.42%)</title><rect x="584.6" y="675.0" width="123.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="587.6" y="686.0">os::sleep(Threa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.26%)</title><rect x="621.5" y="659.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="624.5" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="624.6" y="659.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="627.6" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="624.6" y="643.0" width="3.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="627.6" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 1.82%)</title><rect x="627.7" y="659.0" width="21.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="630.7" y="670.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 3.91%)</title><rect x="649.2" y="659.0" width="46.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="652.2" y="670.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.26%)</title><rect x="695.3" y="659.0" width="3.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="698.3" y="670.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.52%)</title><rect x="698.3" y="659.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="701.3" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.26%)</title><rect x="704.5" y="659.0" width="3.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="707.5" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.78%)</title><rect x="707.6" y="691.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="710.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.52%)</title><rect x="716.8" y="771.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="719.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$285/1624514212.complete (3 samples, 0.78%)</title><rect x="722.9" y="771.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="725.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$73 (3 samples, 0.78%)</title><rect x="722.9" y="755.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="725.9" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.26%)</title><rect x="732.1" y="771.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="735.1" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.26%)</title><rect x="732.1" y="755.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="735.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$285/1624514212.get$Lambda (1 samples, 0.26%)</title><rect x="732.1" y="739.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="735.1" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 1.04%)</title><rect x="735.2" y="771.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="738.2" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 1.04%)</title><rect x="735.2" y="755.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="738.2" y="766.0"></text>
</g>
<g>
<title>itable stub (4 samples, 1.04%)</title><rect x="735.2" y="739.0" width="12.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="738.2" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.26%)</title><rect x="747.5" y="771.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="750.5" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.26%)</title><rect x="747.5" y="755.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="750.5" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.26%)</title><rect x="747.5" y="739.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="750.5" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.26%)</title><rect x="747.5" y="723.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="750.5" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.26%)</title><rect x="750.6" y="771.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="753.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (4 samples, 1.04%)</title><rect x="753.6" y="771.0" width="12.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.30%)</title><rect x="765.9" y="803.0" width="15.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="768.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.30%)</title><rect x="765.9" y="787.0" width="15.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="768.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.30%)</title><rect x="765.9" y="771.0" width="15.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="768.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$286/144844125.accept (5 samples, 1.30%)</title><rect x="765.9" y="755.0" width="15.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="768.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (5 samples, 1.30%)</title><rect x="765.9" y="739.0" width="15.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="768.9" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 1.30%)</title><rect x="765.9" y="723.0" width="15.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="768.9" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (5 samples, 1.30%)</title><rect x="765.9" y="707.0" width="15.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="768.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 3.39%)</title><rect x="781.3" y="819.0" width="39.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="784.3" y="830.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 3.39%)</title><rect x="781.3" y="803.0" width="39.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="784.3" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 3.12%)</title><rect x="784.4" y="787.0" width="36.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="787.4" y="798.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$287/757279519.accept (12 samples, 3.12%)</title><rect x="784.4" y="771.0" width="36.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="787.4" y="782.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (12 samples, 3.12%)</title><rect x="784.4" y="755.0" width="36.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.4" y="766.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/318624172.complete (12 samples, 3.12%)</title><rect x="784.4" y="739.0" width="36.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.4" y="750.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (12 samples, 3.12%)</title><rect x="784.4" y="723.0" width="36.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="787.4" y="734.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/1108982514.complete (12 samples, 3.12%)</title><rect x="784.4" y="707.0" width="36.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="787.4" y="718.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (12 samples, 3.12%)</title><rect x="784.4" y="691.0" width="36.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="787.4" y="702.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (12 samples, 3.12%)</title><rect x="784.4" y="675.0" width="36.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="787.4" y="686.0">com..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 3.12%)</title><rect x="784.4" y="659.0" width="36.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="787.4" y="670.0">ch/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (3 samples, 0.78%)</title><rect x="821.2" y="835.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="824.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.26%)</title><rect x="830.5" y="883.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="833.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.26%)</title><rect x="830.5" y="867.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="833.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.26%)</title><rect x="830.5" y="851.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="833.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.26%)</title><rect x="830.5" y="835.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="833.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (17 samples, 4.43%)</title><rect x="833.5" y="883.0" width="52.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="836.5" y="894.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (13 samples, 3.39%)</title><rect x="845.8" y="867.0" width="40.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="848.8" y="878.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 2.08%)</title><rect x="861.2" y="851.0" width="24.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="864.2" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 2.08%)</title><rect x="861.2" y="835.0" width="24.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="864.2" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 2.08%)</title><rect x="861.2" y="819.0" width="24.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="864.2" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 2.08%)</title><rect x="861.2" y="803.0" width="24.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="864.2" y="814.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.26%)</title><rect x="885.8" y="931.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="888.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.26%)</title><rect x="885.8" y="915.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="888.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.26%)</title><rect x="885.8" y="899.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="888.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.26%)</title><rect x="885.8" y="883.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="888.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.26%)</title><rect x="885.8" y="867.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="888.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.26%)</title><rect x="885.8" y="851.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="888.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.26%)</title><rect x="885.8" y="835.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="888.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.26%)</title><rect x="885.8" y="819.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="888.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.26%)</title><rect x="885.8" y="803.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="888.8" y="814.0"></text>
</g>
<g>
<title>start_thread (98 samples, 25.52%)</title><rect x="888.9" y="931.0" width="301.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="891.9" y="942.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (98 samples, 25.52%)</title><rect x="888.9" y="915.0" width="301.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="891.9" y="926.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 3.39%)</title><rect x="888.9" y="899.0" width="39.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.9" y="910.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 3.39%)</title><rect x="888.9" y="883.0" width="39.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="891.9" y="894.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 2.86%)</title><rect x="888.9" y="867.0" width="33.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="891.9" y="878.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 2.86%)</title><rect x="888.9" y="851.0" width="33.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.9" y="862.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.30%)</title><rect x="907.3" y="835.0" width="15.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="910.3" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.26%)</title><rect x="919.6" y="819.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="922.6" y="830.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.26%)</title><rect x="919.6" y="803.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="922.6" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.52%)</title><rect x="922.7" y="867.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.7" y="878.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.52%)</title><rect x="922.7" y="851.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="925.7" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.52%)</title><rect x="922.7" y="835.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="925.7" y="846.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.52%)</title><rect x="922.7" y="819.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="925.7" y="830.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.52%)</title><rect x="922.7" y="803.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="925.7" y="814.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.52%)</title><rect x="922.7" y="787.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="925.7" y="798.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.52%)</title><rect x="922.7" y="771.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="925.7" y="782.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (2 samples, 0.52%)</title><rect x="922.7" y="755.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="925.7" y="766.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (2 samples, 0.52%)</title><rect x="922.7" y="739.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="925.7" y="750.0"></text>
</g>
<g>
<title>JavaThread::run() (83 samples, 21.61%)</title><rect x="928.8" y="899.0" width="255.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="931.8" y="910.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (83 samples, 21.61%)</title><rect x="928.8" y="883.0" width="255.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="931.8" y="894.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (83 samples, 21.61%)</title><rect x="928.8" y="867.0" width="255.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="931.8" y="878.0">CompileBroker::compiler_thread_loo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (82 samples, 21.35%)</title><rect x="928.8" y="851.0" width="252.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="931.8" y="862.0">CompileBroker::invoke_compiler_on..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (79 samples, 20.57%)</title><rect x="928.8" y="835.0" width="242.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.8" y="846.0">C2Compiler::compile_method(ciEnv..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (79 samples, 20.57%)</title><rect x="928.8" y="819.0" width="242.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="931.8" y="830.0">Compile::Compile(ciEnv*, C2Compi..</text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.26%)</title><rect x="928.8" y="803.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="931.8" y="814.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.26%)</title><rect x="928.8" y="787.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="931.8" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.26%)</title><rect x="928.8" y="771.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="931.8" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.26%)</title><rect x="928.8" y="755.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="931.8" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.26%)</title><rect x="928.8" y="739.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="931.8" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="928.8" y="723.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="931.8" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="928.8" y="707.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="931.8" y="718.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (38 samples, 9.90%)</title><rect x="931.9" y="803.0" width="116.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="934.9" y="814.0">Compile::Code_..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.52%)</title><rect x="931.9" y="787.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="934.9" y="798.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.26%)</title><rect x="931.9" y="771.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="934.9" y="782.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.26%)</title><rect x="934.9" y="771.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="937.9" y="782.0"></text>
</g>
<g>
<title>Node::size(PhaseRegAlloc*) const (1 samples, 0.26%)</title><rect x="934.9" y="755.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="937.9" y="766.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.52%)</title><rect x="938.0" y="787.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="941.0" y="798.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.26%)</title><rect x="938.0" y="771.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="941.0" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.26%)</title><rect x="938.0" y="755.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="941.0" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.26%)</title><rect x="938.0" y="739.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="941.0" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.26%)</title><rect x="941.1" y="771.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.1" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.26%)</title><rect x="941.1" y="755.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="944.1" y="766.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.04%)</title><rect x="944.2" y="787.0" width="12.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.2" y="798.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.04%)</title><rect x="944.2" y="771.0" width="12.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.2" y="782.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.52%)</title><rect x="944.2" y="755.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="947.2" y="766.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.26%)</title><rect x="950.3" y="755.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="953.3" y="766.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.26%)</title><rect x="950.3" y="739.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="953.3" y="750.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.26%)</title><rect x="950.3" y="723.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="953.3" y="734.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.26%)</title><rect x="953.4" y="755.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="956.4" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.26%)</title><rect x="956.5" y="787.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="959.5" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.26%)</title><rect x="956.5" y="771.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="959.5" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.26%)</title><rect x="956.5" y="755.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="959.5" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (29 samples, 7.55%)</title><rect x="959.5" y="787.0" width="89.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="962.5" y="798.0">PhaseChait..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.26%)</title><rect x="962.6" y="771.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="965.6" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.78%)</title><rect x="965.7" y="771.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="968.7" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (3 samples, 0.78%)</title><rect x="965.7" y="755.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="968.7" y="766.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.26%)</title><rect x="971.8" y="739.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="974.8" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.52%)</title><rect x="974.9" y="771.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="977.9" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.52%)</title><rect x="974.9" y="755.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="977.9" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="978.0" y="739.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.04%)</title><rect x="981.0" y="771.0" width="12.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.0" y="782.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.26%)</title><rect x="990.3" y="755.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="993.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.04%)</title><rect x="993.3" y="771.0" width="12.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.52%)</title><rect x="996.4" y="755.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="999.4" y="766.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.26%)</title><rect x="1002.6" y="755.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1005.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.52%)</title><rect x="1005.6" y="771.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1008.6" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.52%)</title><rect x="1005.6" y="755.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1008.6" y="766.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.26%)</title><rect x="1008.7" y="739.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1011.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.26%)</title><rect x="1011.8" y="771.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1014.8" y="782.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.26%)</title><rect x="1011.8" y="755.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1014.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.52%)</title><rect x="1014.8" y="771.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1017.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.26%)</title><rect x="1017.9" y="755.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1020.9" y="766.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.04%)</title><rect x="1021.0" y="771.0" width="12.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1024.0" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.04%)</title><rect x="1021.0" y="755.0" width="12.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1024.0" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.26%)</title><rect x="1021.0" y="739.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1024.0" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.78%)</title><rect x="1024.1" y="739.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1027.1" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.52%)</title><rect x="1027.1" y="723.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1030.1" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.26%)</title><rect x="1033.3" y="771.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.3" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="1033.3" y="755.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.3" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.26%)</title><rect x="1036.4" y="771.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1039.4" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.52%)</title><rect x="1039.4" y="771.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1042.4" y="782.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.52%)</title><rect x="1039.4" y="755.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.4" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="1042.5" y="739.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1045.5" y="750.0"></text>
</g>
<g>
<title>storePNode::oper_input_base() const (1 samples, 0.26%)</title><rect x="1045.6" y="771.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.6" y="782.0"></text>
</g>
<g>
<title>Compile::Optimize() (35 samples, 9.11%)</title><rect x="1048.6" y="803.0" width="107.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.6" y="814.0">Compile::Opti..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.26%)</title><rect x="1048.6" y="787.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1051.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.26%)</title><rect x="1051.7" y="787.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1054.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.26%)</title><rect x="1051.7" y="771.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1054.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1051.7" y="755.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.26%)</title><rect x="1051.7" y="739.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1054.7" y="750.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.26%)</title><rect x="1051.7" y="723.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.7" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.26%)</title><rect x="1054.8" y="787.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.8" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.26%)</title><rect x="1054.8" y="771.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.8" y="782.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 0.26%)</title><rect x="1054.8" y="755.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1057.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (25 samples, 6.51%)</title><rect x="1057.9" y="787.0" width="76.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1060.9" y="798.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.78%)</title><rect x="1057.9" y="771.0" width="9.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1060.9" y="782.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.26%)</title><rect x="1064.0" y="755.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1067.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 4.95%)</title><rect x="1067.1" y="771.0" width="58.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.1" y="782.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (18 samples, 4.69%)</title><rect x="1070.2" y="755.0" width="55.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.2" y="766.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (18 samples, 4.69%)</title><rect x="1070.2" y="739.0" width="55.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1073.2" y="750.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 1.30%)</title><rect x="1110.1" y="723.0" width="15.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.78%)</title><rect x="1125.5" y="771.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.26%)</title><rect x="1128.5" y="755.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.26%)</title><rect x="1128.5" y="739.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.5" y="750.0"></text>
</g>
<g>
<title>hashptr(void const*) (1 samples, 0.26%)</title><rect x="1128.5" y="723.0" width="3.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1131.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.26%)</title><rect x="1131.6" y="755.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.6" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.26%)</title><rect x="1131.6" y="739.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.6" y="750.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.26%)</title><rect x="1131.6" y="723.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.6" y="734.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.26%)</title><rect x="1131.6" y="707.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.6" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 1.56%)</title><rect x="1134.7" y="787.0" width="18.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.7" y="798.0"></text>
</g>
<g>
<title>MulNode::hash() const (1 samples, 0.26%)</title><rect x="1134.7" y="771.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.7" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.30%)</title><rect x="1137.8" y="771.0" width="15.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.8" y="782.0"></text>
</g>
<g>
<title>CountedLoopNode::Opcode() const (1 samples, 0.26%)</title><rect x="1137.8" y="755.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.8" y="766.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.26%)</title><rect x="1140.8" y="755.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.8" y="766.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.26%)</title><rect x="1140.8" y="739.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.8" y="750.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.26%)</title><rect x="1140.8" y="723.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.8" y="734.0"></text>
</g>
<g>
<title>MultiNode::hash() const (1 samples, 0.26%)</title><rect x="1143.9" y="755.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.9" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.26%)</title><rect x="1147.0" y="755.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.0" y="766.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1150.1" y="755.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.1" y="766.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1150.1" y="739.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.1" y="750.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.26%)</title><rect x="1150.1" y="723.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.1" y="734.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.26%)</title><rect x="1150.1" y="707.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.1" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.26%)</title><rect x="1150.1" y="691.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.1" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.26%)</title><rect x="1150.1" y="675.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.1" y="686.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.26%)</title><rect x="1150.1" y="659.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.1" y="670.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.26%)</title><rect x="1150.1" y="643.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.1" y="654.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.26%)</title><rect x="1153.1" y="787.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.1" y="798.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.26%)</title><rect x="1153.1" y="771.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.04%)</title><rect x="1156.2" y="803.0" width="12.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.2" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.04%)</title><rect x="1156.2" y="787.0" width="12.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.04%)</title><rect x="1156.2" y="771.0" width="12.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.04%)</title><rect x="1156.2" y="755.0" width="12.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.04%)</title><rect x="1156.2" y="739.0" width="12.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.04%)</title><rect x="1156.2" y="723.0" width="12.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.04%)</title><rect x="1156.2" y="707.0" width="12.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.2" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.04%)</title><rect x="1156.2" y="691.0" width="12.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.04%)</title><rect x="1156.2" y="675.0" width="12.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.04%)</title><rect x="1156.2" y="659.0" width="12.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.04%)</title><rect x="1156.2" y="643.0" width="12.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.04%)</title><rect x="1156.2" y="627.0" width="12.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1156.2" y="611.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1156.2" y="595.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1156.2" y="579.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1156.2" y="563.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1156.2" y="547.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1156.2" y="531.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1156.2" y="515.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.2" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1156.2" y="499.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1156.2" y="483.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1156.2" y="467.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1156.2" y="451.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1156.2" y="435.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.2" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1156.2" y="419.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.2" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1156.2" y="403.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1156.2" y="387.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1156.2" y="371.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1156.2" y="355.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1156.2" y="339.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1156.2" y="323.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1156.2" y="307.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1156.2" y="291.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1156.2" y="275.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1156.2" y="259.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.26%)</title><rect x="1156.2" y="243.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.2" y="254.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.26%)</title><rect x="1156.2" y="227.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.2" y="238.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.26%)</title><rect x="1156.2" y="211.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.2" y="222.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.26%)</title><rect x="1156.2" y="195.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.2" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.78%)</title><rect x="1159.3" y="611.0" width="9.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.78%)</title><rect x="1159.3" y="595.0" width="9.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.78%)</title><rect x="1159.3" y="579.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1159.3" y="563.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1159.3" y="547.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1159.3" y="531.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1159.3" y="515.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.3" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1159.3" y="499.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.3" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1159.3" y="483.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1159.3" y="467.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1159.3" y="451.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1159.3" y="435.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1159.3" y="419.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.3" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1159.3" y="403.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.3" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1159.3" y="387.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1159.3" y="371.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1159.3" y="355.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1159.3" y="339.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1159.3" y="323.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.3" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1159.3" y="307.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.3" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1159.3" y="291.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1159.3" y="275.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1159.3" y="259.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1159.3" y="243.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1159.3" y="227.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.3" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1159.3" y="211.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.3" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1159.3" y="195.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1159.3" y="179.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1159.3" y="163.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1159.3" y="147.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1159.3" y="131.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.3" y="142.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1159.3" y="115.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.3" y="126.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.26%)</title><rect x="1159.3" y="99.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.3" y="110.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.26%)</title><rect x="1159.3" y="83.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.3" y="94.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.26%)</title><rect x="1159.3" y="67.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.3" y="78.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.26%)</title><rect x="1159.3" y="51.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.3" y="62.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1162.3" y="115.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.3" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1162.3" y="99.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.3" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1162.3" y="83.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.3" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1162.3" y="67.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.3" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1162.3" y="51.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.3" y="62.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.26%)</title><rect x="1162.3" y="35.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.26%)</title><rect x="1165.4" y="563.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.4" y="574.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1165.4" y="547.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.4" y="558.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.26%)</title><rect x="1168.5" y="803.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.5" y="814.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.26%)</title><rect x="1168.5" y="787.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.5" y="798.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.26%)</title><rect x="1168.5" y="771.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.5" y="782.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.78%)</title><rect x="1171.6" y="835.0" width="9.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.6" y="846.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.78%)</title><rect x="1171.6" y="819.0" width="9.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.6" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.78%)</title><rect x="1171.6" y="803.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.6" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.52%)</title><rect x="1171.6" y="787.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.6" y="798.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.26%)</title><rect x="1171.6" y="771.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.6" y="782.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.26%)</title><rect x="1171.6" y="755.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.6" y="766.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.26%)</title><rect x="1171.6" y="739.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.6" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.26%)</title><rect x="1171.6" y="723.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.6" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.26%)</title><rect x="1171.6" y="707.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.6" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.26%)</title><rect x="1171.6" y="691.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.6" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.26%)</title><rect x="1171.6" y="675.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.6" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.26%)</title><rect x="1171.6" y="659.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.6" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1171.6" y="643.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1171.6" y="627.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.6" y="638.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1171.6" y="611.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.6" y="622.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.26%)</title><rect x="1171.6" y="595.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.6" y="606.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.26%)</title><rect x="1174.6" y="771.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.6" y="782.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.26%)</title><rect x="1174.6" y="755.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.6" y="766.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.26%)</title><rect x="1174.6" y="739.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.6" y="750.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.26%)</title><rect x="1174.6" y="723.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.6" y="734.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.26%)</title><rect x="1174.6" y="707.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.6" y="718.0"></text>
</g>
<g>
<title>OopMap::OopMap(int, int) (1 samples, 0.26%)</title><rect x="1174.6" y="691.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.6" y="702.0"></text>
</g>
<g>
<title>CompressedWriteStream::CompressedWriteStream(int) (1 samples, 0.26%)</title><rect x="1174.6" y="675.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.6" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.26%)</title><rect x="1174.6" y="659.0" width="3.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1177.6" y="670.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.26%)</title><rect x="1177.7" y="787.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.7" y="798.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.26%)</title><rect x="1177.7" y="771.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="782.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.26%)</title><rect x="1177.7" y="755.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="766.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.26%)</title><rect x="1177.7" y="739.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="750.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.26%)</title><rect x="1177.7" y="723.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="734.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.26%)</title><rect x="1180.8" y="851.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.26%)</title><rect x="1180.8" y="835.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="846.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.26%)</title><rect x="1180.8" y="819.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="830.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.26%)</title><rect x="1180.8" y="803.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="814.0"></text>
</g>
<g>
<title>NMethodSweeper::release_nmethod(nmethod*) (1 samples, 0.26%)</title><rect x="1180.8" y="787.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.8" y="798.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.26%)</title><rect x="1180.8" y="771.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.8" y="782.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.26%)</title><rect x="1183.9" y="899.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="910.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.26%)</title><rect x="1186.9" y="899.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.9" y="910.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.26%)</title><rect x="1186.9" y="883.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.9" y="894.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.26%)</title><rect x="1186.9" y="867.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.9" y="878.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.26%)</title><rect x="1186.9" y="851.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="862.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.26%)</title><rect x="1186.9" y="835.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.9" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.26%)</title><rect x="1186.9" y="819.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.9" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.26%)</title><rect x="1186.9" y="803.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.9" y="814.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.26%)</title><rect x="1186.9" y="787.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="798.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.26%)</title><rect x="1186.9" y="771.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.9" y="782.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.26%)</title><rect x="1186.9" y="755.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="766.0"></text>
</g>
</g>
</svg>
