<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="709"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="709"> </text>
<g id="frames">
<g>
<title>all (1,238 samples, 100.00%)</title><rect x="10.0" y="675.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="686.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="10.0" y="659.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="10.0" y="643.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (295 samples, 23.83%)</title><rect x="11.0" y="659.0" width="281.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="670.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (291 samples, 23.51%)</title><rect x="14.8" y="643.0" width="277.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.8" y="654.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.24%)</title><rect x="14.8" y="627.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.08%)</title><rect x="14.8" y="611.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.8" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.16%)</title><rect x="15.7" y="611.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="15.7" y="595.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.7" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="15.7" y="579.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="15.7" y="563.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="15.7" y="547.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="15.7" y="531.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.7" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="15.7" y="515.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.7" y="526.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="16.7" y="515.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.08%)</title><rect x="16.7" y="499.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.7" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.08%)</title><rect x="17.6" y="627.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="17.6" y="611.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="17.6" y="595.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="17.6" y="579.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.6" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="17.6" y="563.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="17.6" y="547.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.6" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="17.6" y="531.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="17.6" y="515.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.6" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="17.6" y="499.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.6" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="17.6" y="483.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$264/810847098.test (1 samples, 0.08%)</title><rect x="17.6" y="467.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.6" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (6 samples, 0.48%)</title><rect x="18.6" y="627.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (6 samples, 0.48%)</title><rect x="18.6" y="611.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.48%)</title><rect x="18.6" y="595.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$260/1035076264.accept (5 samples, 0.40%)</title><rect x="19.5" y="579.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.5" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.40%)</title><rect x="19.5" y="563.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.40%)</title><rect x="19.5" y="547.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.5" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.40%)</title><rect x="19.5" y="531.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.5" y="542.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (220 samples, 17.77%)</title><rect x="24.3" y="627.0" width="209.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.3" y="638.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$259/1919132017.accept (213 samples, 17.21%)</title><rect x="24.3" y="611.0" width="203.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.3" y="622.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (213 samples, 17.21%)</title><rect x="24.3" y="595.0" width="203.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.3" y="606.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (163 samples, 13.17%)</title><rect x="26.2" y="579.0" width="155.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.2" y="590.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (163 samples, 13.17%)</title><rect x="26.2" y="563.0" width="155.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.2" y="574.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (163 samples, 13.17%)</title><rect x="26.2" y="547.0" width="155.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.2" y="558.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (163 samples, 13.17%)</title><rect x="26.2" y="531.0" width="155.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.2" y="542.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (163 samples, 13.17%)</title><rect x="26.2" y="515.0" width="155.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.2" y="526.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (163 samples, 13.17%)</title><rect x="26.2" y="499.0" width="155.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.2" y="510.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (102 samples, 8.24%)</title><rect x="71.0" y="483.0" width="97.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.0" y="494.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (18 samples, 1.45%)</title><rect x="71.0" y="467.0" width="17.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (18 samples, 1.45%)</title><rect x="71.0" y="451.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (18 samples, 1.45%)</title><rect x="71.0" y="435.0" width="17.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.89%)</title><rect x="88.2" y="467.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (11 samples, 0.89%)</title><rect x="88.2" y="451.0" width="10.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="91.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (5 samples, 0.40%)</title><rect x="91.0" y="435.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="94.0" y="446.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (5 samples, 0.40%)</title><rect x="91.0" y="419.0" width="4.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="94.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.24%)</title><rect x="95.8" y="435.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="98.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (73 samples, 5.90%)</title><rect x="98.6" y="467.0" width="69.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="101.6" y="478.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (73 samples, 5.90%)</title><rect x="98.6" y="451.0" width="69.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="101.6" y="462.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (70 samples, 5.65%)</title><rect x="99.6" y="435.0" width="66.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.6" y="446.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (69 samples, 5.57%)</title><rect x="100.5" y="419.0" width="65.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="103.5" y="430.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (66 samples, 5.33%)</title><rect x="103.4" y="403.0" width="62.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="106.4" y="414.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (61 samples, 4.93%)</title><rect x="104.4" y="387.0" width="58.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="107.4" y="398.0">Unsafe..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="105.3" y="371.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="108.3" y="382.0"></text>
</g>
<g>
<title>__pthread_cond_signal (41 samples, 3.31%)</title><rect x="106.3" y="371.0" width="39.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="109.3" y="382.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.40%)</title><rect x="145.3" y="371.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="148.3" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.05%)</title><rect x="150.1" y="371.0" width="12.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="153.1" y="382.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.24%)</title><rect x="162.5" y="387.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="165.5" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="165.4" y="387.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="168.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.16%)</title><rect x="166.3" y="435.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 1.05%)</title><rect x="168.2" y="483.0" width="12.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="171.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.05%)</title><rect x="168.2" y="467.0" width="12.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="171.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.73%)</title><rect x="168.2" y="451.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.32%)</title><rect x="176.8" y="451.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="176.8" y="435.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="177.8" y="435.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.16%)</title><rect x="178.7" y="435.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.7" y="446.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="180.6" y="483.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="183.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.08%)</title><rect x="181.6" y="579.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.08%)</title><rect x="181.6" y="563.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.6" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.24%)</title><rect x="182.5" y="579.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="185.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.24%)</title><rect x="182.5" y="563.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.24%)</title><rect x="182.5" y="547.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.5" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (44 samples, 3.55%)</title><rect x="185.4" y="579.0" width="41.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.4" y="590.0">com..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="185.4" y="563.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.4" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (42 samples, 3.39%)</title><rect x="186.3" y="563.0" width="40.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.3" y="574.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (17 samples, 1.37%)</title><rect x="201.6" y="547.0" width="16.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.6" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (13 samples, 1.05%)</title><rect x="201.6" y="531.0" width="12.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.6" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (13 samples, 1.05%)</title><rect x="201.6" y="515.0" width="12.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.6" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 1.05%)</title><rect x="201.6" y="499.0" width="12.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.6" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.32%)</title><rect x="210.2" y="483.0" width="3.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="213.2" y="494.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.16%)</title><rect x="214.0" y="531.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.16%)</title><rect x="215.9" y="531.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.9" y="542.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.16%)</title><rect x="217.8" y="547.0" width="1.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="220.8" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.57%)</title><rect x="219.7" y="547.0" width="6.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="222.7" y="558.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="226.4" y="563.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="229.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.57%)</title><rect x="227.3" y="611.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.57%)</title><rect x="227.3" y="595.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.57%)</title><rect x="227.3" y="579.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.57%)</title><rect x="227.3" y="563.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 4.93%)</title><rect x="234.0" y="627.0" width="58.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.0" y="638.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (61 samples, 4.93%)</title><rect x="234.0" y="611.0" width="58.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.0" y="622.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.08%)</title><rect x="234.0" y="595.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.08%)</title><rect x="234.0" y="579.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="234.0" y="563.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (33 samples, 2.67%)</title><rect x="234.9" y="595.0" width="31.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.9" y="606.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (3 samples, 0.24%)</title><rect x="234.9" y="579.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.9" y="590.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (3 samples, 0.24%)</title><rect x="234.9" y="563.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="237.9" y="574.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.08%)</title><rect x="235.9" y="547.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="238.9" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.08%)</title><rect x="236.8" y="547.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="239.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (29 samples, 2.34%)</title><rect x="237.8" y="579.0" width="27.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.8" y="590.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (28 samples, 2.26%)</title><rect x="237.8" y="563.0" width="26.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.8" y="574.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.10%)</title><rect x="237.8" y="547.0" width="24.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="240.8" y="558.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.10%)</title><rect x="237.8" y="531.0" width="24.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.8" y="542.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.13%)</title><rect x="238.8" y="515.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.08%)</title><rect x="243.5" y="499.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.08%)</title><rect x="243.5" y="483.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.5" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="243.5" y="467.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.5" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="243.5" y="451.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.5" y="462.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="243.5" y="435.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.65%)</title><rect x="244.5" y="499.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.65%)</title><rect x="244.5" y="483.0" width="7.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="247.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.65%)</title><rect x="244.5" y="467.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.65%)</title><rect x="244.5" y="451.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.65%)</title><rect x="244.5" y="435.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.65%)</title><rect x="244.5" y="419.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.65%)</title><rect x="244.5" y="403.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 0.89%)</title><rect x="252.1" y="515.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="252.1" y="499.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.81%)</title><rect x="253.1" y="499.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (10 samples, 0.81%)</title><rect x="253.1" y="483.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.1" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (10 samples, 0.81%)</title><rect x="253.1" y="467.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.1" y="478.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (7 samples, 0.57%)</title><rect x="255.9" y="451.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.9" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (7 samples, 0.57%)</title><rect x="255.9" y="435.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.9" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (7 samples, 0.57%)</title><rect x="255.9" y="419.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.9" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (7 samples, 0.57%)</title><rect x="255.9" y="403.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="258.9" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="259.7" y="387.0" width="2.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="262.7" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.16%)</title><rect x="262.6" y="547.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.16%)</title><rect x="262.6" y="531.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="262.6" y="515.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="262.6" y="499.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="262.6" y="483.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="263.5" y="467.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.08%)</title><rect x="264.5" y="563.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="264.5" y="547.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="264.5" y="531.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.5" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="264.5" y="515.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.5" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="264.5" y="499.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.08%)</title><rect x="265.4" y="579.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="265.4" y="563.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.4" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.08%)</title><rect x="265.4" y="547.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="268.4" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.08%)</title><rect x="265.4" y="531.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="268.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (13 samples, 1.05%)</title><rect x="266.4" y="595.0" width="12.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (12 samples, 0.97%)</title><rect x="266.4" y="579.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (10 samples, 0.81%)</title><rect x="266.4" y="563.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.4" y="574.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.24%)</title><rect x="266.4" y="547.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$227/1995810799.accept (3 samples, 0.24%)</title><rect x="266.4" y="531.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.24%)</title><rect x="266.4" y="515.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="266.4" y="499.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="266.4" y="483.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="269.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="266.4" y="467.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.4" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="266.4" y="451.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.4" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="266.4" y="435.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="269.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (2 samples, 0.16%)</title><rect x="267.4" y="499.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="267.4" y="483.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="268.3" y="483.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="268.3" y="467.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.3" y="478.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="268.3" y="451.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.3" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="268.3" y="435.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.16%)</title><rect x="269.3" y="547.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.16%)</title><rect x="269.3" y="531.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.3" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="270.2" y="515.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.2" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="270.2" y="499.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.2" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="270.2" y="483.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.2" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="270.2" y="467.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.2" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="270.2" y="451.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.2" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="270.2" y="435.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="271.2" y="547.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="274.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="271.2" y="531.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.2" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="271.2" y="515.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.2" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.08%)</title><rect x="271.2" y="499.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.2" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="271.2" y="483.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.32%)</title><rect x="272.1" y="547.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.32%)</title><rect x="272.1" y="531.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.1" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="274.0" y="515.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="274.0" y="499.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.0" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="274.0" y="483.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="277.0" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="274.0" y="467.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="274.0" y="451.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.0" y="462.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="274.0" y="435.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.0" y="446.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="274.0" y="419.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="274.0" y="403.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="277.0" y="414.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="275.0" y="435.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="275.0" y="419.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="275.0" y="403.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.0" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="275.0" y="387.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.0" y="398.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$55/568221876.get (1 samples, 0.08%)</title><rect x="275.0" y="371.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.16%)</title><rect x="275.9" y="563.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.9" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.16%)</title><rect x="275.9" y="547.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.9" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="275.9" y="531.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="278.9" y="542.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.16%)</title><rect x="275.9" y="515.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.9" y="526.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.16%)</title><rect x="275.9" y="499.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.9" y="510.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/317071334.get (1 samples, 0.08%)</title><rect x="276.9" y="483.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="277.8" y="579.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="280.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="277.8" y="563.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.08%)</title><rect x="277.8" y="547.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="277.8" y="531.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="277.8" y="515.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="277.8" y="499.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.8" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="277.8" y="483.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.8" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="277.8" y="467.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.57%)</title><rect x="278.8" y="595.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.48%)</title><rect x="278.8" y="579.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.48%)</title><rect x="278.8" y="563.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.40%)</title><rect x="278.8" y="547.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.16%)</title><rect x="278.8" y="531.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.16%)</title><rect x="278.8" y="515.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.8" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="278.8" y="499.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="281.8" y="510.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="278.8" y="483.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="281.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.24%)</title><rect x="280.7" y="531.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="283.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.24%)</title><rect x="280.7" y="515.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.24%)</title><rect x="280.7" y="499.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.24%)</title><rect x="280.7" y="483.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.24%)</title><rect x="280.7" y="467.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.24%)</title><rect x="280.7" y="451.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.7" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="280.7" y="435.0" width="1.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="283.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="282.6" y="435.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.08%)</title><rect x="282.6" y="419.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.08%)</title><rect x="282.6" y="403.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.08%)</title><rect x="282.6" y="387.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="285.6" y="398.0"></text>
</g>
<g>
<title>__read (1 samples, 0.08%)</title><rect x="282.6" y="371.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="285.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.08%)</title><rect x="283.6" y="547.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.08%)</title><rect x="283.6" y="531.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="286.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="284.5" y="579.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="284.5" y="563.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="284.5" y="547.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="287.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="284.5" y="531.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="284.5" y="515.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="287.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="284.5" y="499.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="287.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="284.5" y="483.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.08%)</title><rect x="284.5" y="467.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="287.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.08%)</title><rect x="284.5" y="451.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="287.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.08%)</title><rect x="284.5" y="435.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getFieldOrDefault (1 samples, 0.08%)</title><rect x="284.5" y="419.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.48%)</title><rect x="285.5" y="595.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.40%)</title><rect x="285.5" y="579.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.5" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="285.5" y="563.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$251/859327121.accept (1 samples, 0.08%)</title><rect x="285.5" y="547.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="285.5" y="531.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="285.5" y="515.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="285.5" y="499.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.5" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="285.5" y="483.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.5" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="285.5" y="467.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="286.4" y="563.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="289.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="286.4" y="547.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="286.4" y="531.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="286.4" y="515.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="286.4" y="499.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.24%)</title><rect x="287.4" y="563.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.24%)</title><rect x="287.4" y="547.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.4" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="287.4" y="531.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.4" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="287.4" y="515.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.4" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.16%)</title><rect x="287.4" y="499.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.4" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.16%)</title><rect x="287.4" y="483.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.4" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.16%)</title><rect x="287.4" y="467.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.4" y="478.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="287.4" y="451.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.4" y="462.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.16%)</title><rect x="287.4" y="435.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.4" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.16%)</title><rect x="287.4" y="419.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.4" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="288.3" y="403.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.3" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="288.3" y="387.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.3" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="288.3" y="371.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.3" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.08%)</title><rect x="288.3" y="355.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.3" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.08%)</title><rect x="289.3" y="531.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.forConsumer (1 samples, 0.08%)</title><rect x="290.2" y="579.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="291.2" y="595.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="291.2" y="579.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="291.2" y="563.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="291.2" y="547.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.2" y="558.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="291.2" y="531.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="294.2" y="542.0"></text>
</g>
<g>
<title>java/lang/Thread.run (795 samples, 64.22%)</title><rect x="292.1" y="659.0" width="757.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.1" y="670.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (795 samples, 64.22%)</title><rect x="292.1" y="643.0" width="757.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.1" y="654.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (795 samples, 64.22%)</title><rect x="292.1" y="627.0" width="757.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.1" y="638.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279/278098223.run (553 samples, 44.67%)</title><rect x="295.9" y="611.0" width="527.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.9" y="622.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$279..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$66 (553 samples, 44.67%)</title><rect x="295.9" y="595.0" width="527.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.9" y="606.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (553 samples, 44.67%)</title><rect x="295.9" y="579.0" width="527.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.9" y="590.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (542 samples, 43.78%)</title><rect x="295.9" y="563.0" width="516.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.9" y="574.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.schedul..</text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="315.0" y="547.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="318.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (185 samples, 14.94%)</title><rect x="316.0" y="547.0" width="176.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.0" y="558.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (185 samples, 14.94%)</title><rect x="316.0" y="531.0" width="176.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.0" y="542.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (185 samples, 14.94%)</title><rect x="316.0" y="515.0" width="176.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.0" y="526.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (185 samples, 14.94%)</title><rect x="316.0" y="499.0" width="176.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="319.0" y="510.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (185 samples, 14.94%)</title><rect x="316.0" y="483.0" width="176.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.0" y="494.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (185 samples, 14.94%)</title><rect x="316.0" y="467.0" width="176.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.0" y="478.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (57 samples, 4.60%)</title><rect x="316.0" y="451.0" width="54.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.0" y="462.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (33 samples, 2.67%)</title><rect x="316.0" y="435.0" width="31.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.0" y="446.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (32 samples, 2.58%)</title><rect x="316.0" y="419.0" width="30.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="319.0" y="430.0">co..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="332.2" y="403.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="335.2" y="414.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.57%)</title><rect x="333.1" y="403.0" width="6.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="336.1" y="414.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="336.0" y="387.0" width="3.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="339.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="339.8" y="403.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="342.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.48%)</title><rect x="340.7" y="403.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="343.7" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.48%)</title><rect x="340.7" y="387.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="343.7" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.48%)</title><rect x="340.7" y="371.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="343.7" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.48%)</title><rect x="340.7" y="355.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="343.7" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 0.48%)</title><rect x="340.7" y="339.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="343.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="346.5" y="419.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="349.5" y="430.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.08%)</title><rect x="346.5" y="403.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.5" y="414.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.08%)</title><rect x="346.5" y="387.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="349.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (24 samples, 1.94%)</title><rect x="347.4" y="435.0" width="22.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="350.4" y="446.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (2 samples, 0.16%)</title><rect x="347.4" y="419.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="350.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 1.78%)</title><rect x="349.3" y="419.0" width="21.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.16%)</title><rect x="353.1" y="403.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.08%)</title><rect x="355.0" y="403.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.08%)</title><rect x="355.0" y="387.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="358.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (8 samples, 0.65%)</title><rect x="356.0" y="403.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="359.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (8 samples, 0.65%)</title><rect x="356.0" y="387.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="359.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.08%)</title><rect x="356.0" y="371.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="359.0" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="356.0" y="355.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="359.0" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="356.0" y="339.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="359.0" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="356.0" y="323.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="359.0" y="334.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="356.0" y="307.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="359.0" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (6 samples, 0.48%)</title><rect x="356.9" y="371.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="359.9" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="362.7" y="371.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="365.7" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="362.7" y="355.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="365.7" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="362.7" y="339.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="365.7" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="362.7" y="323.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="365.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (7 samples, 0.57%)</title><rect x="363.6" y="403.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="366.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="369.3" y="387.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="372.3" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="369.3" y="371.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="372.3" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="369.3" y="355.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="372.3" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="369.3" y="339.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="372.3" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="369.3" y="323.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="372.3" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="369.3" y="307.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="372.3" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="369.3" y="291.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="372.3" y="302.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="369.3" y="275.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="372.3" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="369.3" y="259.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="372.3" y="270.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="369.3" y="243.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="372.3" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (110 samples, 8.89%)</title><rect x="370.3" y="451.0" width="104.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="373.3" y="462.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (6 samples, 0.48%)</title><rect x="370.3" y="435.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="373.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (6 samples, 0.48%)</title><rect x="370.3" y="419.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.40%)</title><rect x="371.2" y="403.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="374.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 0.32%)</title><rect x="372.2" y="387.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="375.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.40%)</title><rect x="376.0" y="435.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.40%)</title><rect x="376.0" y="419.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="377.0" y="403.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="380.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.08%)</title><rect x="377.9" y="403.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="380.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.16%)</title><rect x="378.9" y="403.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="381.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.81%)</title><rect x="380.8" y="435.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="383.8" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.73%)</title><rect x="381.7" y="419.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.32%)</title><rect x="386.5" y="403.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="389.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.32%)</title><rect x="386.5" y="387.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="389.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="389.4" y="371.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="392.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.73%)</title><rect x="390.3" y="435.0" width="8.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (9 samples, 0.73%)</title><rect x="390.3" y="419.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="393.3" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.24%)</title><rect x="391.3" y="403.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="394.3" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.24%)</title><rect x="391.3" y="387.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="394.3" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.24%)</title><rect x="391.3" y="371.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="394.3" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.24%)</title><rect x="391.3" y="355.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="394.3" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="391.3" y="339.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="394.3" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="391.3" y="323.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="394.3" y="334.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="391.3" y="307.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="394.3" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="391.3" y="291.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="394.3" y="302.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="391.3" y="275.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="394.3" y="286.0"></text>
</g>
<g>
<title>AbsSeq::dsd() const (1 samples, 0.08%)</title><rect x="391.3" y="259.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="394.3" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="392.2" y="339.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="395.2" y="350.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="393.2" y="339.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="396.2" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.40%)</title><rect x="394.1" y="403.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="397.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (80 samples, 6.46%)</title><rect x="398.9" y="435.0" width="76.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="401.9" y="446.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.05%)</title><rect x="399.8" y="419.0" width="12.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="402.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.08%)</title><rect x="399.8" y="403.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="402.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.08%)</title><rect x="399.8" y="387.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="402.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.08%)</title><rect x="399.8" y="371.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="402.8" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.81%)</title><rect x="400.8" y="403.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="410.3" y="403.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="413.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="410.3" y="387.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="413.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="411.3" y="403.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (66 samples, 5.33%)</title><rect x="412.2" y="419.0" width="62.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="415.2" y="430.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (65 samples, 5.25%)</title><rect x="413.2" y="403.0" width="61.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="416.2" y="414.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (65 samples, 5.25%)</title><rect x="413.2" y="387.0" width="61.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="416.2" y="398.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 1.70%)</title><rect x="415.1" y="371.0" width="20.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="418.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.65%)</title><rect x="417.9" y="355.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="420.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.65%)</title><rect x="417.9" y="339.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.9" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.65%)</title><rect x="417.9" y="323.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="420.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.32%)</title><rect x="421.8" y="307.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="424.8" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.40%)</title><rect x="425.6" y="355.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (5 samples, 0.40%)</title><rect x="430.3" y="355.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="433.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (5 samples, 0.40%)</title><rect x="430.3" y="339.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="433.3" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.16%)</title><rect x="433.2" y="323.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="436.2" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.65%)</title><rect x="435.1" y="371.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="438.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.65%)</title><rect x="435.1" y="355.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="438.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.65%)</title><rect x="435.1" y="339.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="438.1" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.65%)</title><rect x="435.1" y="323.0" width="7.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="438.1" y="334.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.65%)</title><rect x="435.1" y="307.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="438.1" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.24%)</title><rect x="442.7" y="371.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.7" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.65%)</title><rect x="445.6" y="371.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="448.6" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.65%)</title><rect x="445.6" y="355.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="448.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.65%)</title><rect x="445.6" y="339.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.65%)</title><rect x="445.6" y="323.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.6" y="334.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.65%)</title><rect x="445.6" y="307.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="448.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (10 samples, 0.81%)</title><rect x="453.2" y="371.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="456.2" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.81%)</title><rect x="453.2" y="355.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="456.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.81%)</title><rect x="453.2" y="339.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="456.2" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.16%)</title><rect x="460.8" y="323.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="463.8" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (13 samples, 1.05%)</title><rect x="462.7" y="371.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="465.7" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (18 samples, 1.45%)</title><rect x="475.1" y="451.0" width="17.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="478.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (18 samples, 1.45%)</title><rect x="475.1" y="435.0" width="17.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="478.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (18 samples, 1.45%)</title><rect x="475.1" y="419.0" width="17.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="478.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.16%)</title><rect x="478.0" y="403.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (6 samples, 0.48%)</title><rect x="479.9" y="403.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="482.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (3 samples, 0.24%)</title><rect x="485.6" y="403.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="488.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.32%)</title><rect x="488.5" y="403.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="491.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.32%)</title><rect x="488.5" y="387.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="491.5" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (309 samples, 24.96%)</title><rect x="492.3" y="547.0" width="294.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="495.3" y="558.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (71 samples, 5.74%)</title><rect x="492.3" y="531.0" width="67.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="495.3" y="542.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (71 samples, 5.74%)</title><rect x="492.3" y="515.0" width="67.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="495.3" y="526.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (68 samples, 5.49%)</title><rect x="493.2" y="499.0" width="64.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.2" y="510.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.73%)</title><rect x="496.1" y="483.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.1" y="494.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (2 samples, 0.16%)</title><rect x="498.0" y="467.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="501.0" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.40%)</title><rect x="499.9" y="467.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="502.9" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.32%)</title><rect x="500.9" y="451.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="503.9" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.32%)</title><rect x="500.9" y="435.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.9" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.08%)</title><rect x="504.7" y="483.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="507.7" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (20 samples, 1.62%)</title><rect x="505.6" y="483.0" width="19.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="508.6" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.48%)</title><rect x="519.0" y="467.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="522.0" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.48%)</title><rect x="519.0" y="451.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="522.0" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (35 samples, 2.83%)</title><rect x="524.7" y="483.0" width="33.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="527.7" y="494.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (18 samples, 1.45%)</title><rect x="538.0" y="467.0" width="17.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="541.0" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (18 samples, 1.45%)</title><rect x="538.0" y="451.0" width="17.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="541.0" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.24%)</title><rect x="555.2" y="467.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="558.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (2 samples, 0.16%)</title><rect x="558.1" y="499.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="561.1" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.24%)</title><rect x="560.0" y="531.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="563.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.16%)</title><rect x="560.9" y="515.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="563.9" y="526.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.16%)</title><rect x="560.9" y="499.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="563.9" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (168 samples, 13.57%)</title><rect x="562.8" y="531.0" width="160.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="565.8" y="542.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.57%)</title><rect x="565.7" y="515.0" width="6.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="568.7" y="526.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.57%)</title><rect x="565.7" y="499.0" width="6.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="568.7" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (157 samples, 12.68%)</title><rect x="572.4" y="515.0" width="149.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="575.4" y="526.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (63 samples, 5.09%)</title><rect x="576.2" y="499.0" width="60.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="579.2" y="510.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (39 samples, 3.15%)</title><rect x="592.4" y="483.0" width="37.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="595.4" y="494.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (34 samples, 2.75%)</title><rect x="597.1" y="467.0" width="32.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="600.1" y="478.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (23 samples, 1.86%)</title><rect x="602.9" y="451.0" width="21.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="605.9" y="462.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (23 samples, 1.86%)</title><rect x="602.9" y="435.0" width="21.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.9" y="446.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 1.86%)</title><rect x="602.9" y="419.0" width="21.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="605.9" y="430.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.81%)</title><rect x="609.5" y="403.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="612.5" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.24%)</title><rect x="609.5" y="387.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="612.5" y="398.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="609.5" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="612.5" y="382.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="610.5" y="371.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="613.5" y="382.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.16%)</title><rect x="610.5" y="355.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="613.5" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="610.5" y="339.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="613.5" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="610.5" y="323.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="613.5" y="334.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="611.4" y="339.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="614.4" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.48%)</title><rect x="612.4" y="387.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="615.4" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.32%)</title><rect x="614.3" y="371.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="617.3" y="382.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="614.3" y="355.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="617.3" y="366.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="614.3" y="339.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="617.3" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.16%)</title><rect x="615.3" y="355.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="618.3" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.16%)</title><rect x="615.3" y="339.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="618.3" y="350.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="615.3" y="323.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="618.3" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="615.3" y="307.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="618.3" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.08%)</title><rect x="615.3" y="291.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="618.3" y="302.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::used() const (1 samples, 0.08%)</title><rect x="616.2" y="323.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="619.2" y="334.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="617.2" y="355.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="620.2" y="366.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.08%)</title><rect x="618.1" y="387.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="621.1" y="398.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="619.1" y="403.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="622.1" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="619.1" y="387.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="622.1" y="398.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.08%)</title><rect x="620.0" y="403.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="623.0" y="414.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.32%)</title><rect x="621.0" y="403.0" width="3.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="624.0" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.08%)</title><rect x="624.8" y="451.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="627.8" y="462.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="625.7" y="451.0" width="2.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="628.7" y="462.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="628.6" y="451.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="631.6" y="462.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.16%)</title><rect x="629.5" y="483.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="632.5" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="629.5" y="467.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="632.5" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="629.5" y="451.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="632.5" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="629.5" y="435.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="632.5" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="629.5" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="632.5" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="629.5" y="403.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="632.5" y="414.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="629.5" y="387.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="632.5" y="398.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="630.5" y="419.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="633.5" y="430.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.16%)</title><rect x="631.5" y="483.0" width="1.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="634.5" y="494.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="633.4" y="483.0" width="2.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="636.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (13 samples, 1.05%)</title><rect x="636.2" y="499.0" width="12.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="639.2" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.toString (13 samples, 1.05%)</title><rect x="636.2" y="483.0" width="12.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="639.2" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.16%)</title><rect x="636.2" y="467.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="639.2" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.16%)</title><rect x="636.2" y="451.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="639.2" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="636.2" y="435.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="639.2" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="636.2" y="419.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="639.2" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="637.2" y="435.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="640.2" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (11 samples, 0.89%)</title><rect x="638.1" y="467.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="641.1" y="478.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (77 samples, 6.22%)</title><rect x="648.6" y="499.0" width="73.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="651.6" y="510.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (77 samples, 6.22%)</title><rect x="648.6" y="483.0" width="73.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="651.6" y="494.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.40%)</title><rect x="648.6" y="467.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="651.6" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.40%)</title><rect x="648.6" y="451.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="651.6" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.40%)</title><rect x="648.6" y="435.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="651.6" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.40%)</title><rect x="648.6" y="419.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="651.6" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="653.4" y="467.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="656.4" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="653.4" y="451.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="656.4" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="653.4" y="435.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="656.4" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.16%)</title><rect x="653.4" y="419.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="656.4" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="654.3" y="403.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="657.3" y="414.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (70 samples, 5.65%)</title><rect x="655.3" y="467.0" width="66.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.3" y="478.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (62 samples, 5.01%)</title><rect x="662.9" y="451.0" width="59.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="665.9" y="462.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (26 samples, 2.10%)</title><rect x="697.2" y="435.0" width="24.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="700.2" y="446.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.32%)</title><rect x="707.7" y="419.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="710.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.48%)</title><rect x="711.5" y="419.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="714.5" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="715.3" y="403.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="718.3" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="715.3" y="387.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="718.3" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="715.3" y="371.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="718.3" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="716.3" y="355.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="719.3" y="366.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.40%)</title><rect x="717.2" y="419.0" width="4.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="720.2" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="722.0" y="515.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="725.0" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (50 samples, 4.04%)</title><rect x="723.0" y="531.0" width="47.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="726.0" y="542.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="723.0" y="515.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="726.0" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (49 samples, 3.96%)</title><rect x="723.9" y="515.0" width="46.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="726.9" y="526.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$206/1863560181.process (18 samples, 1.45%)</title><rect x="725.8" y="499.0" width="17.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="728.8" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (18 samples, 1.45%)</title><rect x="725.8" y="483.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="728.8" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (15 samples, 1.21%)</title><rect x="726.8" y="467.0" width="14.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="729.8" y="478.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="727.7" y="451.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="730.7" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="727.7" y="435.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="730.7" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="727.7" y="419.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="730.7" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.16%)</title><rect x="727.7" y="403.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="730.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="728.7" y="387.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="731.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="728.7" y="371.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="731.7" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.40%)</title><rect x="729.6" y="451.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="732.6" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.32%)</title><rect x="730.6" y="435.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="733.6" y="446.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="730.6" y="419.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="733.6" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.57%)</title><rect x="734.4" y="451.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="737.4" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="740.1" y="435.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="743.1" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="740.1" y="419.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="743.1" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.16%)</title><rect x="741.1" y="467.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="744.1" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="741.1" y="451.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="744.1" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="742.0" y="435.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="745.0" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="742.0" y="419.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="745.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 0.24%)</title><rect x="743.0" y="499.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="746.0" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.40%)</title><rect x="745.8" y="499.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="748.8" y="510.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.40%)</title><rect x="745.8" y="483.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="748.8" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.08%)</title><rect x="750.6" y="499.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="753.6" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$281/933109682.get (1 samples, 0.08%)</title><rect x="750.6" y="483.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$72 (1 samples, 0.08%)</title><rect x="750.6" y="467.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="753.6" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (2 samples, 0.16%)</title><rect x="751.6" y="499.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="754.6" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (2 samples, 0.16%)</title><rect x="751.6" y="483.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="754.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$282/552453641.get$Lambda (2 samples, 0.16%)</title><rect x="751.6" y="467.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="754.6" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.16%)</title><rect x="753.5" y="499.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="756.5" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="754.4" y="483.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.4" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.65%)</title><rect x="755.4" y="499.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="758.4" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.57%)</title><rect x="756.3" y="483.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="759.3" y="494.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.32%)</title><rect x="756.3" y="467.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="759.3" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.24%)</title><rect x="760.1" y="467.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.1" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.65%)</title><rect x="763.0" y="499.0" width="7.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="766.0" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="769.7" y="483.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="772.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="770.6" y="531.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="773.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.29%)</title><rect x="771.6" y="531.0" width="15.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="774.6" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="776.3" y="515.0" width="1.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="779.3" y="526.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="776.3" y="499.0" width="1.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="779.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 0.73%)</title><rect x="778.2" y="515.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="781.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.57%)</title><rect x="780.1" y="499.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="783.1" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$285/1506519480.accept (6 samples, 0.48%)</title><rect x="780.1" y="483.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="783.1" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (6 samples, 0.48%)</title><rect x="780.1" y="467.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.1" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="780.1" y="451.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="783.1" y="462.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="780.1" y="435.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="783.1" y="446.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="780.1" y="419.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="783.1" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="780.1" y="403.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="783.1" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="780.1" y="387.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="783.1" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="780.1" y="371.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="783.1" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="780.1" y="355.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="783.1" y="366.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 0.40%)</title><rect x="781.1" y="451.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="784.1" y="462.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (5 samples, 0.40%)</title><rect x="781.1" y="435.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="784.1" y="446.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="784.0" y="419.0" width="1.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="787.0" y="430.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="784.9" y="403.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="787.9" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/255379728.accept (1 samples, 0.08%)</title><rect x="785.9" y="483.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="788.9" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="785.9" y="467.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="788.9" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="785.9" y="451.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="788.9" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="785.9" y="435.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="788.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.62%)</title><rect x="786.8" y="547.0" width="19.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="789.8" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (3 samples, 0.24%)</title><rect x="786.8" y="531.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="789.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.37%)</title><rect x="789.7" y="531.0" width="16.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="792.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.13%)</title><rect x="792.5" y="515.0" width="13.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="795.5" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$285/1506519480.accept (4 samples, 0.32%)</title><rect x="792.5" y="499.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="795.5" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$61 (4 samples, 0.32%)</title><rect x="792.5" y="483.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="795.5" y="494.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (4 samples, 0.32%)</title><rect x="792.5" y="467.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="795.5" y="478.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (4 samples, 0.32%)</title><rect x="792.5" y="451.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="795.5" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$290/255379728.accept (10 samples, 0.81%)</title><rect x="796.3" y="499.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.3" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$scheduleThenProcess$60 (10 samples, 0.81%)</title><rect x="796.3" y="483.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="799.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$277/2130618168.complete (10 samples, 0.81%)</title><rect x="796.3" y="467.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="799.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$wrapForTracing$37 (10 samples, 0.81%)</title><rect x="796.3" y="451.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="799.3" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$276/257006155.complete (10 samples, 0.81%)</title><rect x="796.3" y="435.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="799.3" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.lambda$reportFetchedOffset$65 (10 samples, 0.81%)</title><rect x="796.3" y="419.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="799.3" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.complete (10 samples, 0.81%)</title><rect x="796.3" y="403.0" width="9.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="799.3" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.81%)</title><rect x="796.3" y="387.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="799.3" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (10 samples, 0.81%)</title><rect x="796.3" y="371.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="799.3" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.57%)</title><rect x="805.9" y="547.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="808.9" y="558.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.57%)</title><rect x="805.9" y="531.0" width="6.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="808.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.16%)</title><rect x="812.6" y="563.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="815.6" y="574.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.16%)</title><rect x="812.6" y="547.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="815.6" y="558.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.16%)</title><rect x="812.6" y="531.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="815.6" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="812.6" y="515.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="815.6" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="812.6" y="499.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="815.6" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.16%)</title><rect x="812.6" y="483.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="815.6" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.16%)</title><rect x="812.6" y="467.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="815.6" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="813.5" y="451.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="816.5" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="813.5" y="435.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="816.5" y="446.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="813.5" y="419.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="816.5" y="430.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="813.5" y="403.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="816.5" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (9 samples, 0.73%)</title><rect x="814.5" y="563.0" width="8.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.5" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.57%)</title><rect x="816.4" y="547.0" width="6.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="819.4" y="558.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.57%)</title><rect x="816.4" y="531.0" width="6.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="819.4" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.08%)</title><rect x="823.0" y="611.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="826.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.48%)</title><rect x="824.0" y="611.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="827.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.48%)</title><rect x="824.0" y="595.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="827.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.48%)</title><rect x="824.0" y="579.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="827.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.48%)</title><rect x="824.0" y="563.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="827.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (231 samples, 18.66%)</title><rect x="829.7" y="611.0" width="220.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="832.7" y="622.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (228 samples, 18.42%)</title><rect x="832.6" y="595.0" width="217.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="835.6" y="606.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (208 samples, 16.80%)</title><rect x="851.6" y="579.0" width="198.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="854.6" y="590.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.16%)</title><rect x="861.2" y="563.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="864.2" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.08%)</title><rect x="861.2" y="547.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="864.2" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="862.1" y="547.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="865.1" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="862.1" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="865.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (19 samples, 1.53%)</title><rect x="863.1" y="563.0" width="18.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="866.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.08%)</title><rect x="881.2" y="563.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="884.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="881.2" y="547.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="884.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="881.2" y="531.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="884.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="881.2" y="515.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="884.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.57%)</title><rect x="882.1" y="563.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="885.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.57%)</title><rect x="882.1" y="547.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="885.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (169 samples, 13.65%)</title><rect x="888.8" y="563.0" width="161.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="891.8" y="574.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (169 samples, 13.65%)</title><rect x="888.8" y="547.0" width="161.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="891.8" y="558.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.16%)</title><rect x="898.3" y="531.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="901.3" y="542.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.16%)</title><rect x="900.2" y="531.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="903.2" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.24%)</title><rect x="902.1" y="531.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="905.1" y="542.0"></text>
</g>
<g>
<title>Unsafe_Park (147 samples, 11.87%)</title><rect x="905.0" y="531.0" width="140.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="908.0" y="542.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="905.0" y="515.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="908.0" y="526.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="906.9" y="515.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="909.9" y="526.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.94%)</title><rect x="907.9" y="515.0" width="22.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="910.9" y="526.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.65%)</title><rect x="917.4" y="499.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="920.4" y="510.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.24%)</title><rect x="918.4" y="483.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.4" y="494.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="920.3" y="467.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="923.3" y="478.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="921.2" y="483.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="924.2" y="494.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.24%)</title><rect x="922.2" y="483.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="925.2" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.40%)</title><rect x="925.0" y="499.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="928.0" y="510.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="929.8" y="499.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="932.8" y="510.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (4 samples, 0.32%)</title><rect x="930.7" y="515.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.7" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="934.6" y="515.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="937.6" y="526.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.57%)</title><rect x="935.5" y="515.0" width="6.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="938.5" y="526.0"></text>
</g>
<g>
<title>__lll_unlock_wake (38 samples, 3.07%)</title><rect x="942.2" y="515.0" width="36.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="945.2" y="526.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (55 samples, 4.44%)</title><rect x="978.4" y="515.0" width="52.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="981.4" y="526.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.16%)</title><rect x="1030.8" y="515.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1033.8" y="526.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.08%)</title><rect x="1032.7" y="515.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1035.7" y="526.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.24%)</title><rect x="1033.7" y="515.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1036.7" y="526.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.24%)</title><rect x="1036.5" y="515.0" width="2.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1039.5" y="526.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.16%)</title><rect x="1039.4" y="515.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1042.4" y="526.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="1041.3" y="515.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1044.3" y="526.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="1042.3" y="515.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1045.3" y="526.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.16%)</title><rect x="1043.2" y="515.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1046.2" y="526.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.24%)</title><rect x="1045.1" y="531.0" width="2.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1048.1" y="542.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1048.0" y="531.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1051.0" y="542.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="1048.9" y="531.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1051.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1049.9" y="659.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1052.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1049.9" y="643.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1052.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1049.9" y="627.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1052.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="1049.9" y="611.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1052.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="1049.9" y="595.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1052.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="1049.9" y="579.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1052.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="1049.9" y="563.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1052.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1049.9" y="547.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1052.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1049.9" y="531.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1052.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1049.9" y="515.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1052.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="1049.9" y="499.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1052.9" y="510.0"></text>
</g>
<g>
<title>start_thread (146 samples, 11.79%)</title><rect x="1050.8" y="659.0" width="139.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1053.8" y="670.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (146 samples, 11.79%)</title><rect x="1050.8" y="643.0" width="139.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1053.8" y="654.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (39 samples, 3.15%)</title><rect x="1050.8" y="627.0" width="37.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1053.8" y="638.0">Gan..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 0.65%)</title><rect x="1050.8" y="611.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1053.8" y="622.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.65%)</title><rect x="1050.8" y="595.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1053.8" y="606.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="1050.8" y="579.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.8" y="590.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.40%)</title><rect x="1052.7" y="579.0" width="4.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1055.7" y="590.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.08%)</title><rect x="1057.5" y="579.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1060.5" y="590.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (30 samples, 2.42%)</title><rect x="1058.5" y="611.0" width="28.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.5" y="622.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 1.05%)</title><rect x="1058.5" y="595.0" width="12.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1061.5" y="606.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.32%)</title><rect x="1058.5" y="579.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.5" y="590.0"></text>
</g>
<g>
<title>SpinPause (9 samples, 0.73%)</title><rect x="1062.3" y="579.0" width="8.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1065.3" y="590.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.65%)</title><rect x="1070.9" y="595.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.9" y="606.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.40%)</title><rect x="1070.9" y="579.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.9" y="590.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (5 samples, 0.40%)</title><rect x="1070.9" y="563.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.9" y="574.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (5 samples, 0.40%)</title><rect x="1070.9" y="547.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.9" y="558.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (4 samples, 0.32%)</title><rect x="1071.8" y="531.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1074.8" y="542.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.24%)</title><rect x="1075.6" y="579.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.6" y="590.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.24%)</title><rect x="1075.6" y="563.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.6" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (9 samples, 0.73%)</title><rect x="1078.5" y="595.0" width="8.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1081.5" y="606.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (9 samples, 0.73%)</title><rect x="1078.5" y="579.0" width="8.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.5" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.57%)</title><rect x="1078.5" y="563.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.5" y="574.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.57%)</title><rect x="1078.5" y="547.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.5" y="558.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.57%)</title><rect x="1078.5" y="531.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1081.5" y="542.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.48%)</title><rect x="1079.4" y="515.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1082.4" y="526.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.24%)</title><rect x="1082.3" y="499.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1085.3" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.08%)</title><rect x="1084.2" y="483.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.2" y="494.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.16%)</title><rect x="1085.2" y="563.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1088.2" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.16%)</title><rect x="1085.2" y="547.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.2" y="558.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1086.1" y="531.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1089.1" y="542.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.08%)</title><rect x="1086.1" y="515.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.1" y="526.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.08%)</title><rect x="1086.1" y="499.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.1" y="510.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.08%)</title><rect x="1087.1" y="611.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.1" y="622.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.08%)</title><rect x="1087.1" y="595.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.1" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.08%)</title><rect x="1087.1" y="579.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1090.1" y="590.0"></text>
</g>
<g>
<title>JavaThread::run() (104 samples, 8.40%)</title><rect x="1088.0" y="627.0" width="99.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.0" y="638.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (104 samples, 8.40%)</title><rect x="1088.0" y="611.0" width="99.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.0" y="622.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (104 samples, 8.40%)</title><rect x="1088.0" y="595.0" width="99.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.0" y="606.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (104 samples, 8.40%)</title><rect x="1088.0" y="579.0" width="99.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.0" y="590.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (101 samples, 8.16%)</title><rect x="1088.0" y="563.0" width="96.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.0" y="574.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (101 samples, 8.16%)</title><rect x="1088.0" y="547.0" width="96.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.0" y="558.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (47 samples, 3.80%)</title><rect x="1088.0" y="531.0" width="44.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.0" y="542.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.16%)</title><rect x="1088.0" y="515.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.0" y="526.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="1088.0" y="499.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.0" y="510.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="1088.0" y="483.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.0" y="494.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="1089.0" y="499.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.0" y="510.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="1089.0" y="483.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.0" y="494.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="1089.0" y="467.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.0" y="478.0"></text>
</g>
<g>
<title>CodeSection::initialize_shared_locs(relocInfo*, int) (1 samples, 0.08%)</title><rect x="1089.0" y="451.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1092.0" y="462.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.08%)</title><rect x="1089.9" y="515.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.9" y="526.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.32%)</title><rect x="1090.9" y="515.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.9" y="526.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.32%)</title><rect x="1090.9" y="499.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1093.9" y="510.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1090.9" y="483.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.9" y="494.0"></text>
</g>
<g>
<title>CallNode::match(ProjNode const*, Matcher const*) (1 samples, 0.08%)</title><rect x="1091.8" y="483.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.8" y="494.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.16%)</title><rect x="1092.8" y="483.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.8" y="494.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.16%)</title><rect x="1092.8" y="467.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.8" y="478.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.16%)</title><rect x="1092.8" y="451.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.8" y="462.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1093.7" y="435.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.7" y="446.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="1093.7" y="419.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.7" y="430.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1093.7" y="403.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.7" y="414.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.08%)</title><rect x="1093.7" y="387.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.7" y="398.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="1094.7" y="515.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.7" y="526.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.08%)</title><rect x="1094.7" y="499.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.7" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.32%)</title><rect x="1095.6" y="515.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.6" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.32%)</title><rect x="1095.6" y="499.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.6" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.24%)</title><rect x="1095.6" y="483.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.6" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="1095.6" y="467.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.6" y="478.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1095.6" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.6" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.16%)</title><rect x="1096.6" y="467.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.6" y="478.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.08%)</title><rect x="1097.5" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.5" y="462.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.08%)</title><rect x="1097.5" y="435.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.5" y="446.0"></text>
</g>
<g>
<title>MachNode::memory_inputs(Node*&amp;, Node*&amp;) const (1 samples, 0.08%)</title><rect x="1097.5" y="419.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.5" y="430.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1098.5" y="483.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.5" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 2.83%)</title><rect x="1099.5" y="515.0" width="33.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.5" y="526.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.16%)</title><rect x="1099.5" y="499.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1102.5" y="510.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1100.4" y="483.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1103.4" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.16%)</title><rect x="1101.4" y="499.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.4" y="510.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.16%)</title><rect x="1101.4" y="483.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.4" y="494.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1102.3" y="467.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.3" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.08%)</title><rect x="1103.3" y="499.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.3" y="510.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.08%)</title><rect x="1103.3" y="483.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.3" y="494.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1103.3" y="467.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.3" y="478.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.40%)</title><rect x="1104.2" y="499.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.2" y="510.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="1108.0" y="483.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.0" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 0.89%)</title><rect x="1109.0" y="499.0" width="10.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.0" y="510.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="1114.7" y="483.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.7" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.16%)</title><rect x="1115.7" y="483.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.7" y="494.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.16%)</title><rect x="1117.6" y="483.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.6" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.32%)</title><rect x="1119.5" y="499.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.5" y="510.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.24%)</title><rect x="1119.5" y="483.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.5" y="494.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.08%)</title><rect x="1122.3" y="483.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.3" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.08%)</title><rect x="1123.3" y="499.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.3" y="510.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.08%)</title><rect x="1124.2" y="499.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.2" y="510.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="1124.2" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.2" y="494.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.08%)</title><rect x="1124.2" y="467.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.2" y="478.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.08%)</title><rect x="1124.2" y="451.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.2" y="462.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1124.2" y="435.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.2" y="446.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.57%)</title><rect x="1125.2" y="499.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.2" y="510.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1127.1" y="483.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.1" y="494.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.32%)</title><rect x="1128.0" y="483.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.0" y="494.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1130.9" y="467.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.9" y="478.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1131.9" y="499.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1134.9" y="510.0"></text>
</g>
<g>
<title>Compile::Optimize() (44 samples, 3.55%)</title><rect x="1132.8" y="531.0" width="41.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.8" y="542.0">Com..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1132.8" y="515.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.8" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.08%)</title><rect x="1132.8" y="499.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.8" y="510.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.08%)</title><rect x="1132.8" y="483.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.24%)</title><rect x="1133.8" y="515.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.16%)</title><rect x="1133.8" y="499.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1133.8" y="483.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1133.8" y="467.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1133.8" y="451.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1133.8" y="435.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.8" y="446.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1133.8" y="419.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="435.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.7" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.7" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="403.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.7" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="387.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.7" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="371.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.7" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="355.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.7" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="339.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="323.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.7" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="307.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.7" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="291.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.7" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="275.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.7" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="259.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.7" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="243.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.7" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="227.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.7" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="211.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.7" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="195.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.7" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="179.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.7" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="163.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.7" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="147.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.7" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="131.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.7" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="115.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.7" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="99.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.7" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="83.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.7" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="67.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.7" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1134.7" y="51.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.7" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1134.7" y="35.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.7" y="46.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1135.7" y="499.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1138.7" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (29 samples, 2.34%)</title><rect x="1136.6" y="515.0" width="27.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.6" y="526.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.24%)</title><rect x="1136.6" y="499.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.6" y="510.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.16%)</title><rect x="1137.6" y="483.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.6" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1139.5" y="499.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.5" y="510.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.08%)</title><rect x="1139.5" y="483.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.5" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 1.53%)</title><rect x="1140.4" y="499.0" width="18.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.4" y="510.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="1141.4" y="483.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.4" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (17 samples, 1.37%)</title><rect x="1142.3" y="483.0" width="16.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.3" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1142.3" y="467.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.3" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (16 samples, 1.29%)</title><rect x="1143.3" y="467.0" width="15.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.3" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.08%)</title><rect x="1154.7" y="451.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.7" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1154.7" y="435.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.7" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1155.7" y="451.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.7" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.16%)</title><rect x="1156.6" y="451.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.6" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1158.5" y="499.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.5" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.32%)</title><rect x="1159.5" y="499.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.5" y="510.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.08%)</title><rect x="1160.5" y="483.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.5" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1161.4" y="483.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.4" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1161.4" y="467.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.4" y="478.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.08%)</title><rect x="1162.4" y="483.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.4" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1163.3" y="499.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1163.3" y="483.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.3" y="494.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1163.3" y="467.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.3" y="478.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1163.3" y="451.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.3" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.73%)</title><rect x="1164.3" y="515.0" width="8.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.3" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.73%)</title><rect x="1164.3" y="499.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.3" y="510.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1164.3" y="483.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.3" y="494.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1164.3" y="467.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.3" y="478.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1164.3" y="451.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.3" y="462.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1164.3" y="435.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.3" y="446.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.2" y="467.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.2" y="478.0"></text>
</g>
<g>
<title>step_through_mergemem(PhaseGVN*, MergeMemNode*, TypePtr const*, TypePtr const*, outputStream*) (1 samples, 0.08%)</title><rect x="1165.2" y="451.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1168.2" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1165.2" y="435.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.2" y="446.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1165.2" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.2" y="430.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1166.2" y="483.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.2" y="494.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1166.2" y="467.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.2" y="478.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1166.2" y="451.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.2" y="462.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1166.2" y="435.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.2" y="446.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1166.2" y="419.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.2" y="430.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1166.2" y="403.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.2" y="414.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.1" y="483.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.1" y="494.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1168.1" y="483.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.1" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1168.1" y="467.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.1" y="478.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1168.1" y="451.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.1" y="462.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1169.0" y="467.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.0" y="478.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1170.0" y="483.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.0" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.0" y="467.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.0" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1170.0" y="451.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.0" y="462.0"></text>
</g>
<g>
<title>StoreCMNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1170.9" y="483.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.9" y="494.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1170.9" y="467.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.9" y="478.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1170.9" y="451.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.9" y="462.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1170.9" y="435.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.9" y="446.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.08%)</title><rect x="1170.9" y="419.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.9" y="430.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1171.9" y="483.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.9" y="494.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1171.9" y="467.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.9" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="451.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.9" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="435.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.9" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="419.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.9" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="403.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.9" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="387.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.9" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="371.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.9" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="355.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="366.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="339.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.9" y="350.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="323.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.9" y="334.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="307.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.9" y="318.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="291.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.9" y="302.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1171.9" y="275.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.9" y="286.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1171.9" y="259.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="270.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1172.8" y="515.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.8" y="526.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1172.8" y="499.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.8" y="510.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1172.8" y="483.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.8" y="494.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.08%)</title><rect x="1172.8" y="467.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.8" y="478.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1172.8" y="451.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1175.8" y="462.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1173.8" y="515.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="526.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_unlock_node(UnlockNode*) (1 samples, 0.08%)</title><rect x="1173.8" y="499.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.8" y="510.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_load(Node*, Node*, Node*, int, Type const*, BasicType) (1 samples, 0.08%)</title><rect x="1173.8" y="483.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.8" y="494.0"></text>
</g>
<g>
<title>LoadNode::LoadNode(Node*, Node*, Node*, TypePtr const*, Type const*, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1173.8" y="467.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.65%)</title><rect x="1174.7" y="531.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.65%)</title><rect x="1174.7" y="515.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.65%)</title><rect x="1174.7" y="499.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.65%)</title><rect x="1174.7" y="483.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (2 samples, 0.16%)</title><rect x="1174.7" y="467.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.7" y="478.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (2 samples, 0.16%)</title><rect x="1174.7" y="451.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.7" y="462.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (2 samples, 0.16%)</title><rect x="1174.7" y="435.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.7" y="446.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1174.7" y="419.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.7" y="430.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1174.7" y="403.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="414.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1174.7" y="387.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.7" y="398.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.08%)</title><rect x="1174.7" y="371.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.7" y="382.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1175.7" y="419.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="430.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1175.7" y="403.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.48%)</title><rect x="1176.7" y="467.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.48%)</title><rect x="1176.7" y="451.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1176.7" y="435.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1176.7" y="419.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="430.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1176.7" y="403.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.7" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1176.7" y="387.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1176.7" y="371.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1176.7" y="355.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1176.7" y="339.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1176.7" y="323.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.7" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1176.7" y="307.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1176.7" y="291.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.7" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1176.7" y="275.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.7" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1176.7" y="259.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="270.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1176.7" y="243.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.7" y="254.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1176.7" y="227.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="238.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1176.7" y="211.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="222.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1176.7" y="195.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.7" y="206.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.08%)</title><rect x="1176.7" y="179.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.7" y="190.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.08%)</title><rect x="1176.7" y="163.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1177.6" y="435.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1177.6" y="419.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1177.6" y="403.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1177.6" y="387.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1177.6" y="371.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1177.6" y="355.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="366.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.08%)</title><rect x="1177.6" y="339.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="350.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1177.6" y="323.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="334.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1177.6" y="307.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="318.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1177.6" y="291.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="302.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1177.6" y="275.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="286.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1177.6" y="259.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.6" y="339.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.6" y="323.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.6" y="307.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.6" y="291.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.6" y="275.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.6" y="259.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.6" y="243.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.6" y="227.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.6" y="211.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="222.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1178.6" y="195.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="206.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.08%)</title><rect x="1178.6" y="179.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1178.6" y="163.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="174.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1178.6" y="147.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="158.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.08%)</title><rect x="1178.6" y="131.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1179.5" y="435.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1179.5" y="419.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1179.5" y="403.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1179.5" y="387.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1179.5" y="371.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1179.5" y="355.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1179.5" y="339.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1179.5" y="323.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1179.5" y="307.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="318.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1179.5" y="291.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="302.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1179.5" y="275.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="286.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.08%)</title><rect x="1179.5" y="259.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="270.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="1179.5" y="243.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="254.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.08%)</title><rect x="1179.5" y="227.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="238.0"></text>
</g>
<g>
<title>Atomic::inc(short volatile*) (1 samples, 0.08%)</title><rect x="1179.5" y="211.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.5" y="323.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.5" y="307.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.5" y="291.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.5" y="275.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.5" y="259.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.5" y="243.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.5" y="227.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.5" y="211.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.5" y="195.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.5" y="179.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.5" y="163.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.5" y="147.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.5" y="131.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.5" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.5" y="115.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.5" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.5" y="99.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="110.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1180.5" y="83.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.5" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1180.5" y="67.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="78.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.08%)</title><rect x="1180.5" y="51.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="62.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1181.4" y="435.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1181.4" y="419.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.4" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1181.4" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.4" y="414.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1181.4" y="387.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="398.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1181.4" y="371.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.4" y="382.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1181.4" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.4" y="366.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1181.4" y="339.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="350.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.08%)</title><rect x="1181.4" y="323.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="334.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.16%)</title><rect x="1182.4" y="531.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.4" y="542.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1182.4" y="515.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.4" y="526.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1183.3" y="515.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.3" y="526.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1184.3" y="563.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.3" y="574.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1184.3" y="547.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.3" y="558.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1184.3" y="531.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.3" y="542.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1184.3" y="515.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.3" y="526.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1184.3" y="499.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.3" y="510.0"></text>
</g>
<g>
<title>Intrinsic::visit(InstructionVisitor*) (1 samples, 0.08%)</title><rect x="1184.3" y="483.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.3" y="494.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.08%)</title><rect x="1185.2" y="563.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.2" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.08%)</title><rect x="1185.2" y="547.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1185.2" y="531.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.2" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1185.2" y="515.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.2" y="526.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.08%)</title><rect x="1185.2" y="499.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="510.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.08%)</title><rect x="1185.2" y="483.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="494.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.08%)</title><rect x="1185.2" y="467.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.2" y="478.0"></text>
</g>
<g>
<title>free (1 samples, 0.08%)</title><rect x="1186.2" y="563.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1189.2" y="574.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.24%)</title><rect x="1187.1" y="627.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="638.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.24%)</title><rect x="1187.1" y="611.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.1" y="622.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (3 samples, 0.24%)</title><rect x="1187.1" y="595.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="606.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.24%)</title><rect x="1187.1" y="579.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.1" y="590.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (3 samples, 0.24%)</title><rect x="1187.1" y="563.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.24%)</title><rect x="1187.1" y="547.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (2 samples, 0.16%)</title><rect x="1187.1" y="531.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.1" y="542.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (2 samples, 0.16%)</title><rect x="1187.1" y="515.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="526.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (2 samples, 0.16%)</title><rect x="1187.1" y="499.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.1" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="531.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="542.0"></text>
</g>
</g>
</svg>
